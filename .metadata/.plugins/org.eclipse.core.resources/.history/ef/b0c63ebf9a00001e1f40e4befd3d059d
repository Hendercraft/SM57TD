/* 
 * File:   UART_LIN.c
 * Author: aravey
 *
 * Created on 12 april 2020, 13:42
 */

#include "UART_LIN.h"

//Is used in slave mode
int sync_counter = -1;


//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init(void)
{

    // Configure the GPIO pins for USART3
    // ...
    GPIO_Init();
    // Enable the USART3 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
    // Disable USART3
    USART3->CR1 &= ~USART_CR1_UE;

    // Configure USART3 for 8-bit data, no parity, and 1 stop bit oversampling 16
    USART3->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
    USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE);
    USART3->CR2 &= ~USART_CR2_STOP;
    USART3->CR2 |= USART_CR2_LINEN;
    USART3->CR3 &= 0x00000000;
    // Sstem clock (42Mhz) / Baud rate (9600) * 8* (2-CR->Over) = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
    USART3->BRR = 0x00001117;

    // Enable transmitter interrupts
    //USART3->CR1 |= USART_CR1_TXEIE;

    // Enable reception interrupts
    USART3->CR1 |= USART_CR1_RXNEIE;

    // Enable USART3
    USART3->CR1 |= USART_CR1_UE;

    NVIC_EnableIRQ(USART3_IRQn);

    // Perform the delay
    for (uint32_t i = 0; i < 500000; i++) {
    	__NOP(); // No Operation, consumes one cycle
    }
}

static void GPIO_Init(void){
	// Enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

	// Configure PB10 (USART3 TX) as AF mode, high speed, and push-pull output
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL10_Pos);

	// Configure PB11 (USART3 RX) as AF mode, high speed, and pull-up input
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT11;
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11;
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL11_Pos);
}


/*--- Transmit LIN Message ---*/

void SendMessage(LINMSG* msg){
	SendHeader(msg->ID);
	SendResponse(msg);
}
/*--- Transmit LIN Request ---*/


/*
 * Used in master mode, send the header and then process the response
 *
 * @arg msg : An empty LIN frame where the response will be stored
 * */
void SendRequest(LINMSG *msg){
	int checksum = 1;
	do{
		SendHeader(msg->ID);
		NVIC_DisableIRQ(USART3_IRQn); //Disable the interrupt so we manually catch the response
		checksum = ResponseToRequest(msg); //process it
	}while(checksum == 1);
	NVIC_EnableIRQ(USART3_IRQn); //Enable back the int
}

static void SendHeader(uint8_t ID){
	sync_break();
	UART_PutChar(ID);
}

static void SendResponse(LINMSG* msg){
	for (int i = 0; i<(msg->length -1);i++){
		UART_PutChar(msg->data[i]);
	}
	UART_PutChar(msg->checksum);
}

/*
 * The goal of this function is to 'manually' go trough the response of the slave after a request
 *
 * */
int8_t ResponseToRequest(LINMSG *msg){
	int length = 0;
	while(USART3->SR & USART_SR_RXNE_Msk && !(USART3->SR & USART_SR_LBD_Msk)){ //Fetch all the data while there is no sync detected
		msg->data[length++] = USART3->DR; //Put the data in the strut, then increment length
	}
	msg->checksum = msg->data[length--];//Last data is the checksum, put it in the coresponding field
	msg->length = length;

	if(checksum(length, msg->data)!=msg->checksum) return 1;
	return 0;
}


/*--- Send sync field and break ---*/

void sync_break(void){
	USART3->CR1 |= USART_CR1_SBK;  // Set SBK bit to send break bits
	while (USART3->SR & USART_CR1_SBK);
	while(!(USART3->SR & 0x00000040));

	USART3->DR = 0x55;  // Send sync field with value 0x55
	while(!(USART3->SR & 0x00000080));
	while(!(USART3->SR & 0x00000040));
}

/*
 * This function is called at each interrupt
 * It's used when the card is in slave mode
 * It's role is to generate a response to the request of the master
 * */
int slave_response(void){
	//sync_counter is used to determine whether we recived the sync byte or not
	if(sync_counter == -1){
		if(USART3->DR == 0x55){ //Check it is the sync byte (value 0x55)
			sync_counter = 0;
			return 0;
		}
		else{ //If not there's an error, we stay in the same stae
			return -1; //error, did not receive sync
		}
	}
	if(sync_counter == 0){ //We received the sync byte
		/*
		slave_mess_int.ID = USART3->DR; //We fetch the PID from the bus
		if(slave_mess_int.ID == SLAVE_RCV_ADDR1 | slave_mess_int.ID == SLAVE_RCV_ADDR2){ //Check if it match one of our slave address
			//send data
			LINMSG msg = {0};
			CAN_frame can_request = {0};
			can_request.IDE = 1;
			can_request.ID = 0x10510601;
			can_request.RTR = RTR_REQUEST;
			can_request.DLC = 0;
			envoi_CAN(can_request);
			CAN_frame car_response = {0};
			while(car_response.ID == 0){
				car_response = dequeue(&circu);
			}
			if(slave_mess_int.ID == SLAVE_RCV_ADDR1 ){ // feux de route allumés
				if(car_response.data[0] > 50) msg.data[0] = 0;
				else msg.data[0] = 1;
			}
			if(slave_mess_int.ID == SLAVE_RCV_ADDR2 ){ // feux de route allumés
				if(car_response.data[0]<135 && car_response.data[0] > 120) msg.data[0] = 1; //check range of analog response
				else msg.data[0] = 0;
			}
			SendMessage(&msg, SLAVE_MODE);
			sync_counter = -1;
			return 0;

		}

		sync_counter++;
		return 0;
	}
	if(sync_counter<=5){
		slave_mess_int.data[sync_counter-1] = USART3->DR;
		sync_counter++;
	}else{
		slave_mess_int.cks = USART3->DR; // checksum
		sync_counter=-1;
		enqueue_lin(&circu_lin, &slave_mess_int);
	}

	*/
	}
}

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data){
	//Load data to register
	USART3->DR = data;
	while(!(USART3->SR & 0x00000080));
	while(!(USART3->SR & 0x00000040));
}

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data){
	uint8_t ix;
	uint16_t check_sum = 0;

	for(ix = 0; ix < length-1; ix++){
		check_sum += data[ix];
		if(check_sum >= 256){
			check_sum -= 255;
		}
	}
	return (uint8_t)(0xff - check_sum);
}

void USART3_IRQHandler(void)
{
    if (USART3->SR & USART_SR_RXNE)
    {
        // Receive data available
    	//CAll slave response if it's data
    	//Otherwise, check if it's a header or a break
    	slave_response();

        // Process the received data as needed
        // ...
    }
}


