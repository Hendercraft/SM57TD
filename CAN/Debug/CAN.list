
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c10  08002c10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c18  08002c18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000058  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c13  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c6  00000000  00000000  00025cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  00027380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000498  00000000  00000000  000278e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ef4  00000000  00000000  00027d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071ff  00000000  00000000  00048c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c045e  00000000  00000000  0004fe6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001102c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000177c  00000000  00000000  0011031c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ac0 	.word	0x08002ac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002ac0 	.word	0x08002ac0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

    // Configure the GPIO pins for USART3
    // ...
    GPIO_Init();
 800057a:	f000 f843 	bl	8000604 <GPIO_Init>
    // Enable the USART3 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <UART_Init+0x84>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <UART_Init+0x84>)
 8000584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
    // Disable USART3
    USART3->CR1 &= ~USART_CR1_UE;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <UART_Init+0x88>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <UART_Init+0x88>)
 8000590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000594:	60d3      	str	r3, [r2, #12]

    // Configure USART3 for 8-bit data, no parity, and 1 stop bit oversampling 16
    USART3->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <UART_Init+0x88>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <UART_Init+0x88>)
 800059c:	f423 4314 	bic.w	r3, r3, #37888	; 0x9400
 80005a0:	60d3      	str	r3, [r2, #12]
    USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <UART_Init+0x88>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <UART_Init+0x88>)
 80005a8:	f043 030c 	orr.w	r3, r3, #12
 80005ac:	60d3      	str	r3, [r2, #12]
    USART3->CR2 &= ~USART_CR2_STOP;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <UART_Init+0x88>)
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <UART_Init+0x88>)
 80005b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005b8:	6113      	str	r3, [r2, #16]
    USART3->CR3 &= 0x00000000;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <UART_Init+0x88>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <UART_Init+0x88>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
    // Sstem clock (42Mhz) / Baud rate (9600) * 8* (2-CR->Over) = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
    USART3->BRR = 0x00001117;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <UART_Init+0x88>)
 80005c6:	f241 1217 	movw	r2, #4375	; 0x1117
 80005ca:	609a      	str	r2, [r3, #8]

    // Enable transmitter interrupts
    //USART3->CR1 |= USART_CR1_TXEIE;

    // Enable USART3
    USART3->CR1 |= USART_CR1_UE;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <UART_Init+0x88>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <UART_Init+0x88>)
 80005d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d6:	60d3      	str	r3, [r2, #12]

    // Perform the delay
    for (uint32_t i = 0; i < 5000000; i++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	e003      	b.n	80005e6 <UART_Init+0x72>
    	__NOP(); // No Operation, consumes one cycle
 80005de:	bf00      	nop
    for (uint32_t i = 0; i < 5000000; i++) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <UART_Init+0x8c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d9f7      	bls.n	80005de <UART_Init+0x6a>
    }

}
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40004800 	.word	0x40004800
 8000600:	004c4b3f 	.word	0x004c4b3f

08000604 <GPIO_Init>:

}


static void GPIO_Init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <GPIO_Init+0xd0>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <GPIO_Init+0xd0>)
 800060e:	f043 0302 	orr.w	r3, r3, #2
 8000612:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PB10 (USART3 TX) as AF mode, high speed, and push-pull output
    GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <GPIO_Init+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <GPIO_Init+0xd4>)
 800061a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800061e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <GPIO_Init+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <GPIO_Init+0xd4>)
 8000626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800062a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <GPIO_Init+0xd4>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a29      	ldr	r2, [pc, #164]	; (80006d8 <GPIO_Init+0xd4>)
 8000632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000636:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <GPIO_Init+0xd4>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <GPIO_Init+0xd4>)
 800063e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000642:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <GPIO_Init+0xd4>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a23      	ldr	r2, [pc, #140]	; (80006d8 <GPIO_Init+0xd4>)
 800064a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800064e:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <GPIO_Init+0xd4>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <GPIO_Init+0xd4>)
 8000656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800065a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL10_Pos);
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <GPIO_Init+0xd4>)
 800065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000660:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <GPIO_Init+0xd4>)
 8000662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000666:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure PB11 (USART3 RX) as AF mode, high speed, and pull-up input
    GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <GPIO_Init+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <GPIO_Init+0xd4>)
 800066e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000672:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <GPIO_Init+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <GPIO_Init+0xd4>)
 800067a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800067e:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT11;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <GPIO_Init+0xd4>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <GPIO_Init+0xd4>)
 8000686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800068a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <GPIO_Init+0xd4>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <GPIO_Init+0xd4>)
 8000692:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000696:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <GPIO_Init+0xd4>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <GPIO_Init+0xd4>)
 800069e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006a2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <GPIO_Init+0xd4>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <GPIO_Init+0xd4>)
 80006aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ae:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <GPIO_Init+0xd4>)
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <GPIO_Init+0xd4>)
 80006b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80006ba:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL11_Pos);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <GPIO_Init+0xd4>)
 80006be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <GPIO_Init+0xd4>)
 80006c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80006c6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400

080006dc <sync_break>:


/*--- Send sync field and break ---*/

void sync_break(void)
  {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	// Send 10 break bits
	USART3->CR1 |= USART_CR1_SBK;  // Set SBK bit to send break bits
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <sync_break+0x5c>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <sync_break+0x5c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	60d3      	str	r3, [r2, #12]
	while (USART3->SR & USART_CR1_SBK);
 80006ec:	bf00      	nop
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <sync_break+0x5c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f9      	bne.n	80006ee <sync_break+0x12>
	while(!(USART3->SR & 0x00000040));
 80006fa:	bf00      	nop
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <sync_break+0x5c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f9      	beq.n	80006fc <sync_break+0x20>

	USART3->DR = 0x55;  // Send sync field with value 0x55
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <sync_break+0x5c>)
 800070a:	2255      	movs	r2, #85	; 0x55
 800070c:	605a      	str	r2, [r3, #4]
	while(!(USART3->SR & 0x00000080));
 800070e:	bf00      	nop
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <sync_break+0x5c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f9      	beq.n	8000710 <sync_break+0x34>
	while(!(USART3->SR & 0x00000040));
 800071c:	bf00      	nop
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <sync_break+0x5c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f9      	beq.n	800071e <sync_break+0x42>
  }
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40004800 	.word	0x40004800

0800073c <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
  {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART3->DR = data;
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <UART_PutChar+0x3c>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 800074c:	bf00      	nop
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <UART_PutChar+0x3c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f9      	beq.n	800074e <UART_PutChar+0x12>
	while(!(USART3->SR & 0x00000040));
 800075a:	bf00      	nop
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <UART_PutChar+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0f9      	beq.n	800075c <UART_PutChar+0x20>
  }
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40004800 	.word	0x40004800

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <__NVIC_EnableIRQ+0x38>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <CAN_Counter_Init>:

static GPIO_TypeDef * PB = GPIOB;
static CAN_frame Counter;
CircularBuffer* ReciveBuffer;

void CAN_Counter_Init(){
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	Counter.ID = 0x010;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <CAN_Counter_Init+0x2c>)
 8000812:	2210      	movs	r2, #16
 8000814:	601a      	str	r2, [r3, #0]
	Counter.IDE = 0x0;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <CAN_Counter_Init+0x2c>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
	Counter.RTR = 0;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <CAN_Counter_Init+0x2c>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
	Counter.DLC = 1;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <CAN_Counter_Init+0x2c>)
 8000824:	2201      	movs	r2, #1
 8000826:	719a      	strb	r2, [r3, #6]
	Counter.data[0] = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <CAN_Counter_Init+0x2c>)
 800082a:	2200      	movs	r2, #0
 800082c:	71da      	strb	r2, [r3, #7]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000090 	.word	0x20000090

0800083c <CAN_GPIO_Init>:

void CAN_GPIO_Init(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

	Configure_buttonInterrupt();
 8000840:	f000 f916 	bl	8000a70 <Configure_buttonInterrupt>
	RCC->AHB1ENR |= 0x2; //gpio clock activation for can gpio B
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //for the led gpio D
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a20      	ldr	r2, [pc, #128]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<25); // can clock activation
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <CAN_GPIO_Init+0x9c>)
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40

	PB->MODER &=  ~(GPIO_MODER_MODER8_Msk |GPIO_MODER_MODER9_Msk); // set the Moder of pin 8 & 9 to 00
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <CAN_GPIO_Init+0xa0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <CAN_GPIO_Init+0xa0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000876:	601a      	str	r2, [r3, #0]
	PB->MODER |=  (GPIO_MODER_MODER8_1 |GPIO_MODER_MODER9_1); // set the Moder of pin 8 & 9 to 10 aka Alternate fonction
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <CAN_GPIO_Init+0xa0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <CAN_GPIO_Init+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000886:	601a      	str	r2, [r3, #0]

	PB->PUPDR &= ~(GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <CAN_GPIO_Init+0xa0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <CAN_GPIO_Init+0xa0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000896:	60da      	str	r2, [r3, #12]
	PB->OSPEEDR |= 0xF << 16; //Set the pin 8 and 9 to 11 aka hight speed
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <CAN_GPIO_Init+0xa0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <CAN_GPIO_Init+0xa0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 80008a6:	609a      	str	r2, [r3, #8]

	PB->AFR[1] &= ~0xFF;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <CAN_GPIO_Init+0xa0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <CAN_GPIO_Init+0xa0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
	PB->AFR[1] |= 0x99;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <CAN_GPIO_Init+0xa0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <CAN_GPIO_Init+0xa0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0299 	orr.w	r2, r2, #153	; 0x99
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24

	//Config the pin as general output for the led
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <CAN_GPIO_Init+0xa4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <CAN_GPIO_Init+0xa4>)
 80008ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d2:	6013      	str	r3, [r2, #0]

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	20000000 	.word	0x20000000
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <CAN_config>:

void CAN_config(uint8_t IDE, uint8_t FBM, uint16_t Filter_ID_high, uint16_t Filter_ID_low, uint16_t Filter_Mask_high, uint16_t Filter_Mask_low){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4604      	mov	r4, r0
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4623      	mov	r3, r4
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	4603      	mov	r3, r0
 80008f8:	71bb      	strb	r3, [r7, #6]
 80008fa:	460b      	mov	r3, r1
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	4613      	mov	r3, r2
 8000900:	807b      	strh	r3, [r7, #2]
	ReciveBuffer = getNewBuffer();
 8000902:	f000 faf3 	bl	8000eec <getNewBuffer>
 8000906:	4603      	mov	r3, r0
 8000908:	4a56      	ldr	r2, [pc, #344]	; (8000a64 <CAN_config+0x180>)
 800090a:	6013      	str	r3, [r2, #0]
	//clear sleep bit
	CAN1->MCR &= ~(0x2);
 800090c:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <CAN_config+0x184>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a55      	ldr	r2, [pc, #340]	; (8000a68 <CAN_config+0x184>)
 8000912:	f023 0302 	bic.w	r3, r3, #2
 8000916:	6013      	str	r3, [r2, #0]
	//wait for the can to wakeup
	while(CAN1->MSR & (0x2));
 8000918:	bf00      	nop
 800091a:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <CAN_config+0x184>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f9      	bne.n	800091a <CAN_config+0x36>
	//Set to config mode
	CAN1->MCR |= 0x1;
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <CAN_config+0x184>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a4f      	ldr	r2, [pc, #316]	; (8000a68 <CAN_config+0x184>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]

	while(!(CAN1->MSR & 0x1));
 8000932:	bf00      	nop
 8000934:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <CAN_config+0x184>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f9      	beq.n	8000934 <CAN_config+0x50>

	//Set all bit but config to 0 (maybe check it later for sleep mode ?)
	CAN1->MCR &= 0x1;
 8000940:	4b49      	ldr	r3, [pc, #292]	; (8000a68 <CAN_config+0x184>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a48      	ldr	r2, [pc, #288]	; (8000a68 <CAN_config+0x184>)
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

	// 250kbaus, loopback mode, BRP 16 10TQ
	//CAN1->BTR = 0x0403001B;
	CAN1->BTR = 0x40250010;
 800094c:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <CAN_config+0x184>)
 800094e:	4a47      	ldr	r2, [pc, #284]	; (8000a6c <CAN_config+0x188>)
 8000950:	61da      	str	r2, [r3, #28]

	//Realase mail box (? Is it necessary (box empty ?))
	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <CAN_config+0x184>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <CAN_config+0x184>)
 8000958:	f043 0320 	orr.w	r3, r3, #32
 800095c:	60d3      	str	r3, [r2, #12]

	//Enable interrupt on mailbox 0
	CAN1->IER |= 0x2;
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <CAN_config+0x184>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <CAN_config+0x184>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 800096a:	2100      	movs	r1, #0
 800096c:	2014      	movs	r0, #20
 800096e:	f7ff ff23 	bl	80007b8 <__NVIC_SetPriority>
	//NVIC_SetPriority(CAN1_TX_IRQn,0);
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000972:	2014      	movs	r0, #20
 8000974:	f7ff ff02 	bl	800077c <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_TX_IRQn);

	//set to normal mod
	CAN1->MCR &= ~(0x1);
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <CAN_config+0x184>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <CAN_config+0x184>)
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]
	//wait for normal mod
	while((CAN1->MSR & 0x1));
 8000984:	bf00      	nop
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <CAN_config+0x184>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f9      	bne.n	8000986 <CAN_config+0xa2>

	//set filter in init mode
	CAN1->FMR |= (0x1); //Mask mode
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <CAN_config+0x184>)
 8000994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000998:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <CAN_config+0x184>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	CAN1->FA1R |= 0x1;
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <CAN_config+0x184>)
 80009a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <CAN_config+0x184>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Assign the message from filter 0 to FIFO0
	CAN1->FFA1R &= ~(0x1);
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <CAN_config+0x184>)
 80009b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80009b8:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <CAN_config+0x184>)
 80009ba:	f023 0301 	bic.w	r3, r3, #1
 80009be:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	if (FBM == 0){
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d108      	bne.n	80009da <CAN_config+0xf6>
		CAN1->FM1R &= ~(0x1); //Set filter 1 in mask mod
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <CAN_config+0x184>)
 80009ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <CAN_config+0x184>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 80009d8:	e007      	b.n	80009ea <CAN_config+0x106>
	}else{
		CAN1->FM1R |= 0x1; //Set filter 1 in list mod
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <CAN_config+0x184>)
 80009dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <CAN_config+0x184>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	// configure filter mode based on IDE
	if (IDE == 0){ // standard mode
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d116      	bne.n	8000a1e <CAN_config+0x13a>
		CAN1->FS1R &= ~0x1; //activating filter 0 in 16bits
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <CAN_config+0x184>)
 80009f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <CAN_config+0x184>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_Mask_low << 16 | Filter_ID_low);
 8000a00:	8bbb      	ldrh	r3, [r7, #28]
 8000a02:	041a      	lsls	r2, r3, #16
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <CAN_config+0x184>)
 8000a0a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_ID_high);
 8000a0e:	8b3b      	ldrh	r3, [r7, #24]
 8000a10:	041a      	lsls	r2, r3, #16
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	431a      	orrs	r2, r3
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <CAN_config+0x184>)
 8000a18:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000a1c:	e015      	b.n	8000a4a <CAN_config+0x166>

	}else{ // extended mode
		CAN1->FS1R |= 0x1; //activating filter 0 32bits
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <CAN_config+0x184>)
 8000a20:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <CAN_config+0x184>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 16 | Filter_ID_low);
 8000a2e:	88bb      	ldrh	r3, [r7, #4]
 8000a30:	041a      	lsls	r2, r3, #16
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <CAN_config+0x184>)
 8000a38:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_Mask_low);
 8000a3c:	8b3b      	ldrh	r3, [r7, #24]
 8000a3e:	041a      	lsls	r2, r3, #16
 8000a40:	8bbb      	ldrh	r3, [r7, #28]
 8000a42:	431a      	orrs	r2, r3
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <CAN_config+0x184>)
 8000a46:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	}

	//Activate Filter 0
	CAN1->FMR &= ~(0x1);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <CAN_config+0x184>)
 8000a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <CAN_config+0x184>)
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000a0 	.word	0x200000a0
 8000a68:	40006400 	.word	0x40006400
 8000a6c:	40250010 	.word	0x40250010

08000a70 <Configure_buttonInterrupt>:

void Configure_buttonInterrupt() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <Configure_buttonInterrupt+0x74>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <Configure_buttonInterrupt+0x74>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <Configure_buttonInterrupt+0x74>)
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <Configure_buttonInterrupt+0x74>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PA0 as input with pull-up
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);  // Clear mode bits
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <Configure_buttonInterrupt+0x78>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <Configure_buttonInterrupt+0x78>)
 8000a92:	f023 0303 	bic.w	r3, r3, #3
 8000a96:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);  // Clear pull-up/pull-down bits
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <Configure_buttonInterrupt+0x78>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <Configure_buttonInterrupt+0x78>)
 8000a9e:	f023 0303 	bic.w	r3, r3, #3
 8000aa2:	60d3      	str	r3, [r2, #12]
    //GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;  // Set pull-up mode

    // Connect EXTI Line 0 to PA0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <Configure_buttonInterrupt+0x7c>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <Configure_buttonInterrupt+0x7c>)
 8000aaa:	f023 030f 	bic.w	r3, r3, #15
 8000aae:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <Configure_buttonInterrupt+0x7c>)
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <Configure_buttonInterrupt+0x7c>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0 to interrupt on the rising edge
    EXTI->IMR |= EXTI_IMR_MR0;  // Enable interrupt on EXTI Line 0
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <Configure_buttonInterrupt+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <Configure_buttonInterrupt+0x80>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;  // Set falling edge trigger
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <Configure_buttonInterrupt+0x80>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <Configure_buttonInterrupt+0x80>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	60d3      	str	r3, [r2, #12]

    // Enable and set the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000ad0:	2006      	movs	r0, #6
 8000ad2:	f7ff fe53 	bl	800077c <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2006      	movs	r0, #6
 8000ada:	f7ff fe6d 	bl	80007b8 <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <CAN_sendFrame>:


uint8_t CAN_sendFrame(CAN_frame CAN_mess){
 8000af4:	b490      	push	{r4, r7}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	463c      	mov	r4, r7
 8000afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //Check if TxMailbox0 is empty
    if (CAN1->TSR & 0x04000000){
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d03f      	beq.n	8000b8c <CAN_sendFrame+0x98>
        //fill the mailbox
        //Writing the id and the RTR
        uint32_t id = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
        if (CAN_mess.IDE == 0) { // standard mode
 8000b10:	793b      	ldrb	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <CAN_sendFrame+0x30>
            id = (CAN_mess.ID << 21) | (CAN_mess.RTR << 1);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	055b      	lsls	r3, r3, #21
 8000b1a:	797a      	ldrb	r2, [r7, #5]
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e007      	b.n	8000b34 <CAN_sendFrame+0x40>
        }
        else { // extended mode
            id = (CAN_mess.ID << 3) | (CAN_mess.RTR << 1) | (1 << 2);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	797a      	ldrb	r2, [r7, #5]
 8000b2a:	0052      	lsls	r2, r2, #1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
        }
        CAN1->sTxMailBox[0].TIR = id;
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        CAN1->sTxMailBox[0].TDTR = CAN_mess.DLC;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CAN1->sTxMailBox[0].TDLR = CAN_mess.data[3] << 24 | CAN_mess.data[2] << 16 | CAN_mess.data[1] << 8 | CAN_mess.data[0];
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	061a      	lsls	r2, r3, #24
 8000b48:	7a7b      	ldrb	r3, [r7, #9]
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	7a3b      	ldrb	r3, [r7, #8]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	4313      	orrs	r3, r2
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b5a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        CAN1->sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	061a      	lsls	r2, r3, #24
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	431a      	orrs	r2, r3
 8000b68:	7b3b      	ldrb	r3, [r7, #12]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	7afa      	ldrb	r2, [r7, #11]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b74:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        CAN1->sTxMailBox[0].TIR |= 1; //Send the message
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b7a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <CAN_sendFrame+0xa4>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        return(1);
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <CAN_sendFrame+0x9a>
    }
    else return(0);
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc90      	pop	{r4, r7}
 8000b96:	4770      	bx	lr
 8000b98:	40006400 	.word	0x40006400

08000b9c <CAN1_RX0_IRQHandler>:


// Interrupt handler for CAN1 RX0
void CAN1_RX0_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    if (CAN1->RF0R & CAN_RF0R_FMP0) // check if there is a message in the FIFO
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <CAN1_RX0_IRQHandler+0x24>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d007      	beq.n	8000bbc <CAN1_RX0_IRQHandler+0x20>
    {
        // call the receive callback function
        CAN_receiveCallback();
 8000bac:	f000 f894 	bl	8000cd8 <CAN_receiveCallback>
        // clear the message from the FIFO
        CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <CAN1_RX0_IRQHandler+0x24>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	4a02      	ldr	r2, [pc, #8]	; (8000bc0 <CAN1_RX0_IRQHandler+0x24>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	60d3      	str	r3, [r2, #12]
    }
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40006400 	.word	0x40006400

08000bc4 <CAN_frameToString>:

void CAN_frameToString(CAN_frame* frame, char* str) {
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b089      	sub	sp, #36	; 0x24
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	461e      	mov	r6, r3
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681a      	ldr	r2, [r3, #0]
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000bdc:	4618      	mov	r0, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	795b      	ldrb	r3, [r3, #5]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000be2:	4619      	mov	r1, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	799b      	ldrb	r3, [r3, #6]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9100      	str	r1, [sp, #0]
 8000bec:	4603      	mov	r3, r0
 8000bee:	4926      	ldr	r1, [pc, #152]	; (8000c88 <CAN_frameToString+0xc4>)
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	f001 fbd7 	bl	80023a4 <siprintf>

    char temp[frame->DLC];
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7999      	ldrb	r1, [r3, #6]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	b2cb      	uxtb	r3, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	4698      	mov	r8, r3
 8000c06:	4691      	mov	r9, r2
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c1c:	b2cb      	uxtb	r3, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	461c      	mov	r4, r3
 8000c22:	4615      	mov	r5, r2
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	00eb      	lsls	r3, r5, #3
 8000c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c32:	00e2      	lsls	r2, r4, #3
 8000c34:	460b      	mov	r3, r1
 8000c36:	3307      	adds	r3, #7
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c40:	ab02      	add	r3, sp, #8
 8000c42:	3300      	adds	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < frame->DLC; i++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e010      	b.n	8000c6e <CAN_frameToString+0xaa>
        sprintf(temp, "%02X ", frame->data[i]);
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	4413      	add	r3, r2
 8000c52:	3307      	adds	r3, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <CAN_frameToString+0xc8>)
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f001 fba2 	bl	80023a4 <siprintf>
        strcat(str, temp);
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	6838      	ldr	r0, [r7, #0]
 8000c64:	f001 fbbe 	bl	80023e4 <strcat>
    for (int i = 0; i < frame->DLC; i++) {
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	799b      	ldrb	r3, [r3, #6]
 8000c72:	461a      	mov	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dbe8      	blt.n	8000c4c <CAN_frameToString+0x88>
 8000c7a:	46b5      	mov	sp, r6
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c86:	bf00      	nop
 8000c88:	08002ad8 	.word	0x08002ad8
 8000c8c:	08002b04 	.word	0x08002b04

08000c90 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    if ((EXTI->PR & EXTI_PR_PR0) != 0) {
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <EXTI0_IRQHandler+0x24>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d007      	beq.n	8000cb0 <EXTI0_IRQHandler+0x20>
        // Button is pressed
    	EXTI0_buttonpressCallback();
 8000ca0:	f000 f80a 	bl	8000cb8 <EXTI0_buttonpressCallback>
        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <EXTI0_IRQHandler+0x24>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a02      	ldr	r2, [pc, #8]	; (8000cb4 <EXTI0_IRQHandler+0x24>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6153      	str	r3, [r2, #20]

    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013c00 	.word	0x40013c00

08000cb8 <EXTI0_buttonpressCallback>:

void EXTI0_buttonpressCallback(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	CAN_sendFrame(Counter);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <EXTI0_buttonpressCallback+0x1c>)
 8000cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc0:	f7ff ff18 	bl	8000af4 <CAN_sendFrame>
	Counter.data[0]+= 1;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <EXTI0_buttonpressCallback+0x1c>)
 8000cc6:	79db      	ldrb	r3, [r3, #7]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <EXTI0_buttonpressCallback+0x1c>)
 8000cce:	71da      	strb	r2, [r3, #7]
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <CAN_receiveCallback>:


// Receive callback function to be implemented by user
void CAN_receiveCallback(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0a0      	sub	sp, #128	; 0x80
 8000cdc:	af02      	add	r7, sp, #8
	CAN_frame CAN_mess;
	// read the message from the FIFO
	CAN_mess.IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) ? 1 : 0; // check if extended identifier
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000ce0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf14      	ite	ne
 8000cec:	2301      	movne	r3, #1
 8000cee:	2300      	moveq	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (CAN_mess.IDE == 0) { // standard identifier
 8000cf6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d107      	bne.n	8000d0e <CAN_receiveCallback+0x36>
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF; //Fetch the 11bits ID
 8000cfe:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000d00:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000d04:	0d5b      	lsrs	r3, r3, #21
 8000d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d0c:	e006      	b.n	8000d1c <CAN_receiveCallback+0x44>
	}else { // extended identifier
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFF; //Fetch the 29 bit ID
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000d10:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000d1a:	663b      	str	r3, [r7, #96]	; 0x60
	}
	CAN_mess.RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) ? 1 : 0; //Is it a reception trame?
 8000d1c:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000d1e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	CAN_mess.DLC = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8000d34:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000d36:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	677b      	str	r3, [r7, #116]	; 0x74
 8000d4a:	e010      	b.n	8000d6e <CAN_receiveCallback+0x96>
		CAN_mess.data[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i*8)) & 0xFF;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <CAN_receiveCallback+0x164>)
 8000d4e:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	b2d9      	uxtb	r1, r3
 8000d5c:	f107 0267 	add.w	r2, r7, #103	; 0x67
 8000d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d62:	4413      	add	r3, r2
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	677b      	str	r3, [r7, #116]	; 0x74
 8000d6e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d72:	461a      	mov	r2, r3
 8000d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d76:	4293      	cmp	r3, r2
 8000d78:	dbe8      	blt.n	8000d4c <CAN_receiveCallback+0x74>
	}
	int overwrite = pushToBuffer(ReciveBuffer,(void**)&CAN_mess);
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <CAN_receiveCallback+0x168>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f8ca 	bl	8000f1e <pushToBuffer>
 8000d8a:	6738      	str	r0, [r7, #112]	; 0x70
	if (overwrite == 1){
 8000d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d102      	bne.n	8000d98 <CAN_receiveCallback+0xc0>
		serial_puts("Buffer is full, overwriting oldest message\r\n");
 8000d92:	482c      	ldr	r0, [pc, #176]	; (8000e44 <CAN_receiveCallback+0x16c>)
 8000d94:	f000 fb4e 	bl	8001434 <serial_puts>
	}
	char stringbuffer[80];
	CAN_frameToString(&CAN_mess,stringbuffer);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff0e 	bl	8000bc4 <CAN_frameToString>
	serial_puts(stringbuffer);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fb41 	bl	8001434 <serial_puts>
	newLine();
 8000db2:	f000 fb5b 	bl	800146c <newLine>

	//5 checking frame with id 0x010
	if (CAN_mess.ID == 0x010){
 8000db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	d13b      	bne.n	8000e34 <CAN_receiveCallback+0x15c>
		if (CAN_mess.RTR == 1){//5.2 Request with id 0x10
 8000dbc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d116      	bne.n	8000df2 <CAN_receiveCallback+0x11a>
			serial_puts("Received request frame with ID 0x010\r\n");
 8000dc4:	4820      	ldr	r0, [pc, #128]	; (8000e48 <CAN_receiveCallback+0x170>)
 8000dc6:	f000 fb35 	bl	8001434 <serial_puts>
			serial_puts("Sending led state trough can\r\n");
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <CAN_receiveCallback+0x174>)
 8000dcc:	f000 fb32 	bl	8001434 <serial_puts>
			CAN_frame led_Frame;
			led_Frame.ID = 0x010;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	603b      	str	r3, [r7, #0]
			led_Frame.IDE = 0x0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	713b      	strb	r3, [r7, #4]
			led_Frame.RTR = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	717b      	strb	r3, [r7, #5]
			led_Frame.DLC = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71bb      	strb	r3, [r7, #6]
			led_Frame.data[0] = readLEDState() ;
 8000de0:	f000 f83a 	bl	8000e58 <readLEDState>
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
			CAN_sendFrame(led_Frame);
 8000de8:	463b      	mov	r3, r7
 8000dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dec:	f7ff fe82 	bl	8000af4 <CAN_sendFrame>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));

		}

	}
}
 8000df0:	e020      	b.n	8000e34 <CAN_receiveCallback+0x15c>
			serial_puts("Received data frame with ID 0x010\r\n");
 8000df2:	4817      	ldr	r0, [pc, #92]	; (8000e50 <CAN_receiveCallback+0x178>)
 8000df4:	f000 fb1e 	bl	8001434 <serial_puts>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));
 8000df8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e06:	105b      	asrs	r3, r3, #1
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e10:	109b      	asrs	r3, r3, #2
 8000e12:	f003 0101 	and.w	r1, r3, #1
 8000e16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e1a:	10db      	asrs	r3, r3, #3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	460b      	mov	r3, r1
 8000e24:	4601      	mov	r1, r0
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <CAN_receiveCallback+0x17c>)
 8000e28:	f001 fabc 	bl	80023a4 <siprintf>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb00 	bl	8001434 <serial_puts>
}
 8000e34:	bf00      	nop
 8000e36:	3778      	adds	r7, #120	; 0x78
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40006400 	.word	0x40006400
 8000e40:	200000a0 	.word	0x200000a0
 8000e44:	08002b0c 	.word	0x08002b0c
 8000e48:	08002b3c 	.word	0x08002b3c
 8000e4c:	08002b64 	.word	0x08002b64
 8000e50:	08002b84 	.word	0x08002b84
 8000e54:	08002ba8 	.word	0x08002ba8

08000e58 <readLEDState>:

uint8_t readLEDState() {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  // Read the current state of the LEDs
  uint8_t ledState = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_12) ? 1 : 0; // Read Green LED state
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <readLEDState+0x90>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_13) ? (1 << 1) : 0; // Read Orange LED state
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <readLEDState+0x90>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <readLEDState+0x38>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e000      	b.n	8000e92 <readLEDState+0x3a>
 8000e90:	2300      	movs	r3, #0
 8000e92:	b25a      	sxtb	r2, r3
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_14) ? (1 << 2) : 0; // Read Red LED state
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <readLEDState+0x90>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <readLEDState+0x56>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e000      	b.n	8000eb0 <readLEDState+0x58>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_15) ? (1 << 3) : 0; // Read Blue LED state
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <readLEDState+0x90>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <readLEDState+0x74>
 8000ec8:	2308      	movs	r3, #8
 8000eca:	e000      	b.n	8000ece <readLEDState+0x76>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	71fb      	strb	r3, [r7, #7]

  return ledState;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <getNewBuffer>:
	int readIndex;
	int writeIndex;
	int bufferLenght;
}CircularBuffer;

CircularBuffer* getNewBuffer(void){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  CircularBuffer* newbuffer = (CircularBuffer*) malloc(sizeof(CircularBuffer));
 8000ef2:	20ac      	movs	r0, #172	; 0xac
 8000ef4:	f001 f956 	bl	80021a4 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	607b      	str	r3, [r7, #4]
  newbuffer->readIndex = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  newbuffer->writeIndex = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  newbuffer->bufferLenght = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  return newbuffer;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <pushToBuffer>:

int pushToBuffer(CircularBuffer *buffer, void* frame){
 8000f1e:	b490      	push	{r4, r7}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  if(buffer->bufferLenght == 10){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d101      	bne.n	8000f36 <pushToBuffer+0x18>
    //Buffer plein
    return 1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e023      	b.n	8000f7e <pushToBuffer+0x60>
  }

  buffer->frameBuffer[buffer->writeIndex] = *(CAN_frame*)frame;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	441a      	add	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4614      	mov	r4, r2
 8000f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  buffer->bufferLenght++;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  if(buffer->writeIndex == 10){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f60:	2b0a      	cmp	r3, #10
 8000f62:	d104      	bne.n	8000f6e <pushToBuffer+0x50>
    buffer->writeIndex = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000f6c:	e006      	b.n	8000f7c <pushToBuffer+0x5e>
  }else{
    buffer->writeIndex++;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  }
  return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc90      	pop	{r4, r7}
 8000f86:	4770      	bx	lr

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	CAN_frame frame;

	// Initialiser les champs de la structure
	frame.ID = 0x524010;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <main+0x68>)
 8000f90:	603b      	str	r3, [r7, #0]
	frame.IDE = 0x1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	713b      	strb	r3, [r7, #4]
	frame.RTR = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	717b      	strb	r3, [r7, #5]
	frame.DLC = 4;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	71bb      	strb	r3, [r7, #6]
	frame.data[0] = 0xAA;
 8000f9e:	23aa      	movs	r3, #170	; 0xaa
 8000fa0:	71fb      	strb	r3, [r7, #7]
	frame.data[1] = 0xBB;
 8000fa2:	23bb      	movs	r3, #187	; 0xbb
 8000fa4:	723b      	strb	r3, [r7, #8]
	frame.data[2] = 0xCC;
 8000fa6:	23cc      	movs	r3, #204	; 0xcc
 8000fa8:	727b      	strb	r3, [r7, #9]
	frame.data[3] = 0xDD;
 8000faa:	23dd      	movs	r3, #221	; 0xdd
 8000fac:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 faef 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f81f 	bl	8000ff4 <SystemClock_Config>
  init_usart_int();
 8000fb6:	f000 f9b1 	bl	800131c <init_usart_int>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  CAN_GPIO_Init();
 8000fba:	f7ff fc3f 	bl	800083c <CAN_GPIO_Init>
  CAN_Counter_Init();
 8000fbe:	f7ff fc25 	bl	800080c <CAN_Counter_Init>
  UART_Init();
 8000fc2:	f7ff fad7 	bl	8000574 <UART_Init>
  //UART_Init_test();

  //2.3
  //32bit mode, list mode
  //ID = 0x010,standard ID, accept both data and request frame
  CAN_config(1,1,(0x10 << 5),0x2,(0x10 << 5),0x00);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fc83 	bl	80008e4 <CAN_config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000fde:	b662      	cpsie	i
}
 8000fe0:	bf00      	nop
  __enable_irq();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */
	  UART_PutChar('a');
 8000fe2:	2061      	movs	r0, #97	; 0x61
 8000fe4:	f7ff fbaa 	bl	800073c <UART_PutChar>
	  sync_break();
 8000fe8:	f7ff fb78 	bl	80006dc <sync_break>
	  UART_PutChar('a');
 8000fec:	e7f9      	b.n	8000fe2 <main+0x5a>
 8000fee:	bf00      	nop
 8000ff0:	00524010 	.word	0x00524010

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f8d6 	bl	80021b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <SystemClock_Config+0xcc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <SystemClock_Config+0xd0>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001064:	2308      	movs	r3, #8
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001068:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106e:	2302      	movs	r3, #2
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fc04 	bl	8001888 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001086:	f000 f81f 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2105      	movs	r1, #5
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fe65 	bl	8001d78 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b4:	f000 f808 	bl	80010c8 <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	; 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_MspInit+0x4c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001112:	2007      	movs	r0, #7
 8001114:	f000 fb84 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 fa60 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f000 ffd2 	bl	8002150 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20020000 	.word	0x20020000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	200000a4 	.word	0x200000a4
 80011e0:	200000d0 	.word	0x200000d0

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <init_usart_int>:

	HAL_Delay(1);
}

// USART2 Initialization with Rx interrupt
void init_usart_int(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8001320:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <init_usart_int+0xcc>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <init_usart_int+0xcc>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6313      	str	r3, [r2, #48]	; 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	GPIOA->MODER |= 0x000000A0;
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <init_usart_int+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <init_usart_int+0xd0>)
 8001332:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001336:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <init_usart_int+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2b      	ldr	r2, [pc, #172]	; (80013ec <init_usart_int+0xd0>)
 800133e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001342:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <init_usart_int+0xd0>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <init_usart_int+0xd0>)
 800134a:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 800134e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <init_usart_int+0xd0>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <init_usart_int+0xd0>)
 8001356:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800135a:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <init_usart_int+0xd0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <init_usart_int+0xd0>)
 8001362:	f023 030c 	bic.w	r3, r3, #12
 8001366:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <init_usart_int+0xd0>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <init_usart_int+0xd0>)
 800136e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001372:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <init_usart_int+0xd0>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <init_usart_int+0xd0>)
 800137a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800137e:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <init_usart_int+0xd0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <init_usart_int+0xd0>)
 8001386:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800138a:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <init_usart_int+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <init_usart_int+0xcc>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity, Rx interrupt enable
	//Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <init_usart_int+0xd4>)
 800139a:	f248 022c 	movw	r2, #32812	; 0x802c
 800139e:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <init_usart_int+0xd4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <init_usart_int+0xd4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <init_usart_int+0xd4>)
 80013ae:	f241 1217 	movw	r2, #4375	; 0x1117
 80013b2:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A02C;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <init_usart_int+0xd4>)
 80013b6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80013ba:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 f959 	bl	8001674 <HAL_Delay>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013c2:	f7ff ff21 	bl	8001208 <__NVIC_GetPriorityGrouping>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff71 	bl	80012b4 <NVIC_EncodePriority>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4619      	mov	r1, r3
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f7ff ff42 	bl	8001260 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80013dc:	2026      	movs	r0, #38	; 0x26
 80013de:	f7ff ff21 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40004400 	.word	0x40004400

080013f4 <serial_putc>:

void serial_putc(char c)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <serial_putc+0x3c>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8001404:	bf00      	nop
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <serial_putc+0x3c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8001412:	bf00      	nop
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <serial_putc+0x3c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <serial_putc+0x20>
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40004400 	.word	0x40004400

08001434 <serial_puts>:

void serial_puts( char *msg)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001440:	e009      	b.n	8001456 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ffd2 	bl	80013f4 <serial_putc>
		cnt++;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ef      	bne.n	8001442 <serial_puts+0xe>
	}
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <newLine>:

void newLine()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff ffbf 	bl	80013f4 <serial_putc>
	serial_putc(13); // retour chariot
 8001476:	200d      	movs	r0, #13
 8001478:	f7ff ffbc 	bl	80013f4 <serial_putc>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <USART2_IRQHandler>:

	chaine[i]='\0';
	return(chaine);
}

void USART2_IRQHandler(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  // Check if the RXNE (Receive Data Register Not Empty) flag is set
  if (USART2->SR & USART_SR_RXNE) {
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <USART2_IRQHandler+0x84>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d034      	beq.n	80014fc <USART2_IRQHandler+0x7c>
    // Read the received data
    char data = USART2->DR;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <USART2_IRQHandler+0x84>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	71fb      	strb	r3, [r7, #7]
    // Store the received character in the buffer
    rxBuffer[rxIndex] = data;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <USART2_IRQHandler+0x88>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	491b      	ldr	r1, [pc, #108]	; (800150c <USART2_IRQHandler+0x8c>)
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	54ca      	strb	r2, [r1, r3]
    // Check for the word "trame"
    if (rxIndex > 3 && rxBuffer[rxIndex] == 'e' &&  rxBuffer[rxIndex - 1] == 'm' && rxBuffer[rxIndex - 2] == 'a' && rxBuffer[rxIndex - 3] == 'r' && rxBuffer[rxIndex - 4] == 't') {
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <USART2_IRQHandler+0x88>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	dd23      	ble.n	80014f2 <USART2_IRQHandler+0x72>
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <USART2_IRQHandler+0x88>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <USART2_IRQHandler+0x8c>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	2b65      	cmp	r3, #101	; 0x65
 80014b4:	d11d      	bne.n	80014f2 <USART2_IRQHandler+0x72>
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <USART2_IRQHandler+0x88>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <USART2_IRQHandler+0x8c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	2b6d      	cmp	r3, #109	; 0x6d
 80014c2:	d116      	bne.n	80014f2 <USART2_IRQHandler+0x72>
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <USART2_IRQHandler+0x88>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b02      	subs	r3, #2
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <USART2_IRQHandler+0x8c>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	2b61      	cmp	r3, #97	; 0x61
 80014d0:	d10f      	bne.n	80014f2 <USART2_IRQHandler+0x72>
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <USART2_IRQHandler+0x88>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b03      	subs	r3, #3
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <USART2_IRQHandler+0x8c>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	2b72      	cmp	r3, #114	; 0x72
 80014de:	d108      	bne.n	80014f2 <USART2_IRQHandler+0x72>
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <USART2_IRQHandler+0x88>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b04      	subs	r3, #4
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <USART2_IRQHandler+0x8c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	2b74      	cmp	r3, #116	; 0x74
 80014ec:	d101      	bne.n	80014f2 <USART2_IRQHandler+0x72>
    	handleTrameReceived();
 80014ee:	f000 f80f 	bl	8001510 <handleTrameReceived>
    }

    // Increment the buffer index
    rxIndex += 1 % 12;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <USART2_IRQHandler+0x88>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <USART2_IRQHandler+0x88>)
 80014fa:	6013      	str	r3, [r2, #0]
  }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004400 	.word	0x40004400
 8001508:	200000b4 	.word	0x200000b4
 800150c:	200000a8 	.word	0x200000a8

08001510 <handleTrameReceived>:
void handleTrameReceived(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
	CAN_frame trame;
	trame.ID = 0x010;
 8001516:	2310      	movs	r3, #16
 8001518:	603b      	str	r3, [r7, #0]
	trame.IDE = 0x0;
 800151a:	2300      	movs	r3, #0
 800151c:	713b      	strb	r3, [r7, #4]
	trame.RTR = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	717b      	strb	r3, [r7, #5]
	trame.DLC = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	71bb      	strb	r3, [r7, #6]
	trame.data[0] = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
	CAN_sendFrame(trame);
 800152a:	463b      	mov	r3, r7
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	f7ff fae1 	bl	8000af4 <CAN_sendFrame>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001566:	f7ff fe3d 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f000 fdf7 	bl	800215c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff fd0b 	bl	8000f88 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001580:	08002c20 	.word	0x08002c20
  ldr r2, =_sbss
 8001584:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001588:	200000cc 	.word	0x200000cc

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f931 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fd86 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f000 f911 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000004 	.word	0x20000004
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000008 	.word	0x20000008

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000000c 	.word	0x2000000c
 8001658:	200000b8 	.word	0x200000b8

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200000b8 	.word	0x200000b8

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000000c 	.word	0x2000000c

080016bc <__NVIC_SetPriorityGrouping>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_SetPriority>:
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff47 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff5c 	bl	8001704 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffb0 	bl	80017dc <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e267      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d075      	beq.n	8001992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b85      	ldr	r3, [pc, #532]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x108>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e242      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x74>
 80018ee:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6c      	ldr	r2, [pc, #432]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fe8c 	bl	800165c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fe88 	bl	800165c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e207      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xc0>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fe78 	bl	800165c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fe74 	bl	800165c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1f3      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0xe8>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c7      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fe2d 	bl	800165c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fe29 	bl	800165c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1a8      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fe0c 	bl	800165c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fe08 	bl	800165c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e187      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d036      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fdec 	bl	800165c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fde8 	bl	800165c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e167      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001aa6:	e01b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fdd5 	bl	800165c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e00e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fdd1 	bl	800165c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d907      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e150      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	42470000 	.word	0x42470000
 8001ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ea      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8097 	beq.w	8001c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a7c      	ldr	r2, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a73      	ldr	r2, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fd91 	bl	800165c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff fd8d 	bl	800165c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e10c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x30c>
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fd52 	bl	800165c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fd4e 	bl	800165c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0cb      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ee      	beq.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fd3c 	bl	800165c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff fd38 	bl	800165c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0b5      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ee      	bne.n	8001be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a38      	ldr	r2, [pc, #224]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a1 	beq.w	8001d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d05c      	beq.n	8001cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d141      	bne.n	8001cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fd0c 	bl	800165c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fd08 	bl	800165c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e087      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fce1 	bl	800165c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fcdd 	bl	800165c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e05c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x416>
 8001cbc:	e054      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fcca 	bl	800165c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fcc6 	bl	800165c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e045      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e038      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d028      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11a      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cc      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d90c      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0b8      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	494d      	ldr	r1, [pc, #308]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d044      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e07f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e067      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4934      	ldr	r1, [pc, #208]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e68:	f7ff fbf8 	bl	800165c <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7ff fbf4 	bl	800165c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e04f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d20c      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e032      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4916      	ldr	r1, [pc, #88]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001efe:	f000 f821 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fb58 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08002bcc 	.word	0x08002bcc
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	20000008 	.word	0x20000008

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f48:	b094      	sub	sp, #80	; 0x50
 8001f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f50:	2300      	movs	r3, #0
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f54:	2300      	movs	r3, #0
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5c:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d00d      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x40>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	f200 80e1 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f76:	e0db      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f7c:	e0db      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f82:	e0d8      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	462b      	mov	r3, r5
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0159      	lsls	r1, r3, #5
 8001fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc8:	0150      	lsls	r0, r2, #5
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4621      	mov	r1, r4
 8001fd0:	1a51      	subs	r1, r2, r1
 8001fd2:	6139      	str	r1, [r7, #16]
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe8:	4659      	mov	r1, fp
 8001fea:	018b      	lsls	r3, r1, #6
 8001fec:	4651      	mov	r1, sl
 8001fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	018a      	lsls	r2, r1, #6
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	eb63 0901 	sbc.w	r9, r3, r1
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002016:	4690      	mov	r8, r2
 8002018:	4699      	mov	r9, r3
 800201a:	4623      	mov	r3, r4
 800201c:	eb18 0303 	adds.w	r3, r8, r3
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	462b      	mov	r3, r5
 8002024:	eb49 0303 	adc.w	r3, r9, r3
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002036:	4629      	mov	r1, r5
 8002038:	024b      	lsls	r3, r1, #9
 800203a:	4621      	mov	r1, r4
 800203c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002040:	4621      	mov	r1, r4
 8002042:	024a      	lsls	r2, r1, #9
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204a:	2200      	movs	r2, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 800204e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002054:	f7fe f90c 	bl	8000270 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4613      	mov	r3, r2
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	e058      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	2200      	movs	r2, #0
 800206a:	4618      	mov	r0, r3
 800206c:	4611      	mov	r1, r2
 800206e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800207c:	4642      	mov	r2, r8
 800207e:	464b      	mov	r3, r9
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	0159      	lsls	r1, r3, #5
 800208a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800208e:	0150      	lsls	r0, r2, #5
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4641      	mov	r1, r8
 8002096:	ebb2 0a01 	subs.w	sl, r2, r1
 800209a:	4649      	mov	r1, r9
 800209c:	eb63 0b01 	sbc.w	fp, r3, r1
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020b4:	ebb2 040a 	subs.w	r4, r2, sl
 80020b8:	eb63 050b 	sbc.w	r5, r3, fp
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	00eb      	lsls	r3, r5, #3
 80020c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020ca:	00e2      	lsls	r2, r4, #3
 80020cc:	4614      	mov	r4, r2
 80020ce:	461d      	mov	r5, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	18e3      	adds	r3, r4, r3
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	464b      	mov	r3, r9
 80020d8:	eb45 0303 	adc.w	r3, r5, r3
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ea:	4629      	mov	r1, r5
 80020ec:	028b      	lsls	r3, r1, #10
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f4:	4621      	mov	r1, r4
 80020f6:	028a      	lsls	r2, r1, #10
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	2200      	movs	r2, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	61fa      	str	r2, [r7, #28]
 8002104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002108:	f7fe f8b2 	bl	8000270 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x204>)
 8002132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002138:	4618      	mov	r0, r3
 800213a:	3750      	adds	r7, #80	; 0x50
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200

08002150 <__errno>:
 8002150:	4b01      	ldr	r3, [pc, #4]	; (8002158 <__errno+0x8>)
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000010 	.word	0x20000010

0800215c <__libc_init_array>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4d0d      	ldr	r5, [pc, #52]	; (8002194 <__libc_init_array+0x38>)
 8002160:	4c0d      	ldr	r4, [pc, #52]	; (8002198 <__libc_init_array+0x3c>)
 8002162:	1b64      	subs	r4, r4, r5
 8002164:	10a4      	asrs	r4, r4, #2
 8002166:	2600      	movs	r6, #0
 8002168:	42a6      	cmp	r6, r4
 800216a:	d109      	bne.n	8002180 <__libc_init_array+0x24>
 800216c:	4d0b      	ldr	r5, [pc, #44]	; (800219c <__libc_init_array+0x40>)
 800216e:	4c0c      	ldr	r4, [pc, #48]	; (80021a0 <__libc_init_array+0x44>)
 8002170:	f000 fca6 	bl	8002ac0 <_init>
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	2600      	movs	r6, #0
 800217a:	42a6      	cmp	r6, r4
 800217c:	d105      	bne.n	800218a <__libc_init_array+0x2e>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	f855 3b04 	ldr.w	r3, [r5], #4
 8002184:	4798      	blx	r3
 8002186:	3601      	adds	r6, #1
 8002188:	e7ee      	b.n	8002168 <__libc_init_array+0xc>
 800218a:	f855 3b04 	ldr.w	r3, [r5], #4
 800218e:	4798      	blx	r3
 8002190:	3601      	adds	r6, #1
 8002192:	e7f2      	b.n	800217a <__libc_init_array+0x1e>
 8002194:	08002c18 	.word	0x08002c18
 8002198:	08002c18 	.word	0x08002c18
 800219c:	08002c18 	.word	0x08002c18
 80021a0:	08002c1c 	.word	0x08002c1c

080021a4 <malloc>:
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <malloc+0xc>)
 80021a6:	4601      	mov	r1, r0
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	f000 b877 	b.w	800229c <_malloc_r>
 80021ae:	bf00      	nop
 80021b0:	20000010 	.word	0x20000010

080021b4 <memset>:
 80021b4:	4402      	add	r2, r0
 80021b6:	4603      	mov	r3, r0
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d100      	bne.n	80021be <memset+0xa>
 80021bc:	4770      	bx	lr
 80021be:	f803 1b01 	strb.w	r1, [r3], #1
 80021c2:	e7f9      	b.n	80021b8 <memset+0x4>

080021c4 <_free_r>:
 80021c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021c6:	2900      	cmp	r1, #0
 80021c8:	d044      	beq.n	8002254 <_free_r+0x90>
 80021ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ce:	9001      	str	r0, [sp, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f1a1 0404 	sub.w	r4, r1, #4
 80021d6:	bfb8      	it	lt
 80021d8:	18e4      	addlt	r4, r4, r3
 80021da:	f000 f913 	bl	8002404 <__malloc_lock>
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <_free_r+0x94>)
 80021e0:	9801      	ldr	r0, [sp, #4]
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	b933      	cbnz	r3, 80021f4 <_free_r+0x30>
 80021e6:	6063      	str	r3, [r4, #4]
 80021e8:	6014      	str	r4, [r2, #0]
 80021ea:	b003      	add	sp, #12
 80021ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021f0:	f000 b90e 	b.w	8002410 <__malloc_unlock>
 80021f4:	42a3      	cmp	r3, r4
 80021f6:	d908      	bls.n	800220a <_free_r+0x46>
 80021f8:	6825      	ldr	r5, [r4, #0]
 80021fa:	1961      	adds	r1, r4, r5
 80021fc:	428b      	cmp	r3, r1
 80021fe:	bf01      	itttt	eq
 8002200:	6819      	ldreq	r1, [r3, #0]
 8002202:	685b      	ldreq	r3, [r3, #4]
 8002204:	1949      	addeq	r1, r1, r5
 8002206:	6021      	streq	r1, [r4, #0]
 8002208:	e7ed      	b.n	80021e6 <_free_r+0x22>
 800220a:	461a      	mov	r2, r3
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	b10b      	cbz	r3, 8002214 <_free_r+0x50>
 8002210:	42a3      	cmp	r3, r4
 8002212:	d9fa      	bls.n	800220a <_free_r+0x46>
 8002214:	6811      	ldr	r1, [r2, #0]
 8002216:	1855      	adds	r5, r2, r1
 8002218:	42a5      	cmp	r5, r4
 800221a:	d10b      	bne.n	8002234 <_free_r+0x70>
 800221c:	6824      	ldr	r4, [r4, #0]
 800221e:	4421      	add	r1, r4
 8002220:	1854      	adds	r4, r2, r1
 8002222:	42a3      	cmp	r3, r4
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	d1e0      	bne.n	80021ea <_free_r+0x26>
 8002228:	681c      	ldr	r4, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	6053      	str	r3, [r2, #4]
 800222e:	4421      	add	r1, r4
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	e7da      	b.n	80021ea <_free_r+0x26>
 8002234:	d902      	bls.n	800223c <_free_r+0x78>
 8002236:	230c      	movs	r3, #12
 8002238:	6003      	str	r3, [r0, #0]
 800223a:	e7d6      	b.n	80021ea <_free_r+0x26>
 800223c:	6825      	ldr	r5, [r4, #0]
 800223e:	1961      	adds	r1, r4, r5
 8002240:	428b      	cmp	r3, r1
 8002242:	bf04      	itt	eq
 8002244:	6819      	ldreq	r1, [r3, #0]
 8002246:	685b      	ldreq	r3, [r3, #4]
 8002248:	6063      	str	r3, [r4, #4]
 800224a:	bf04      	itt	eq
 800224c:	1949      	addeq	r1, r1, r5
 800224e:	6021      	streq	r1, [r4, #0]
 8002250:	6054      	str	r4, [r2, #4]
 8002252:	e7ca      	b.n	80021ea <_free_r+0x26>
 8002254:	b003      	add	sp, #12
 8002256:	bd30      	pop	{r4, r5, pc}
 8002258:	200000bc 	.word	0x200000bc

0800225c <sbrk_aligned>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	4e0e      	ldr	r6, [pc, #56]	; (8002298 <sbrk_aligned+0x3c>)
 8002260:	460c      	mov	r4, r1
 8002262:	6831      	ldr	r1, [r6, #0]
 8002264:	4605      	mov	r5, r0
 8002266:	b911      	cbnz	r1, 800226e <sbrk_aligned+0x12>
 8002268:	f000 f88c 	bl	8002384 <_sbrk_r>
 800226c:	6030      	str	r0, [r6, #0]
 800226e:	4621      	mov	r1, r4
 8002270:	4628      	mov	r0, r5
 8002272:	f000 f887 	bl	8002384 <_sbrk_r>
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d00a      	beq.n	8002290 <sbrk_aligned+0x34>
 800227a:	1cc4      	adds	r4, r0, #3
 800227c:	f024 0403 	bic.w	r4, r4, #3
 8002280:	42a0      	cmp	r0, r4
 8002282:	d007      	beq.n	8002294 <sbrk_aligned+0x38>
 8002284:	1a21      	subs	r1, r4, r0
 8002286:	4628      	mov	r0, r5
 8002288:	f000 f87c 	bl	8002384 <_sbrk_r>
 800228c:	3001      	adds	r0, #1
 800228e:	d101      	bne.n	8002294 <sbrk_aligned+0x38>
 8002290:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002294:	4620      	mov	r0, r4
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	200000c0 	.word	0x200000c0

0800229c <_malloc_r>:
 800229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a0:	1ccd      	adds	r5, r1, #3
 80022a2:	f025 0503 	bic.w	r5, r5, #3
 80022a6:	3508      	adds	r5, #8
 80022a8:	2d0c      	cmp	r5, #12
 80022aa:	bf38      	it	cc
 80022ac:	250c      	movcc	r5, #12
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	4607      	mov	r7, r0
 80022b2:	db01      	blt.n	80022b8 <_malloc_r+0x1c>
 80022b4:	42a9      	cmp	r1, r5
 80022b6:	d905      	bls.n	80022c4 <_malloc_r+0x28>
 80022b8:	230c      	movs	r3, #12
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	2600      	movs	r6, #0
 80022be:	4630      	mov	r0, r6
 80022c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c4:	4e2e      	ldr	r6, [pc, #184]	; (8002380 <_malloc_r+0xe4>)
 80022c6:	f000 f89d 	bl	8002404 <__malloc_lock>
 80022ca:	6833      	ldr	r3, [r6, #0]
 80022cc:	461c      	mov	r4, r3
 80022ce:	bb34      	cbnz	r4, 800231e <_malloc_r+0x82>
 80022d0:	4629      	mov	r1, r5
 80022d2:	4638      	mov	r0, r7
 80022d4:	f7ff ffc2 	bl	800225c <sbrk_aligned>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	4604      	mov	r4, r0
 80022dc:	d14d      	bne.n	800237a <_malloc_r+0xde>
 80022de:	6834      	ldr	r4, [r6, #0]
 80022e0:	4626      	mov	r6, r4
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	d140      	bne.n	8002368 <_malloc_r+0xcc>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	4631      	mov	r1, r6
 80022ea:	4638      	mov	r0, r7
 80022ec:	eb04 0803 	add.w	r8, r4, r3
 80022f0:	f000 f848 	bl	8002384 <_sbrk_r>
 80022f4:	4580      	cmp	r8, r0
 80022f6:	d13a      	bne.n	800236e <_malloc_r+0xd2>
 80022f8:	6821      	ldr	r1, [r4, #0]
 80022fa:	3503      	adds	r5, #3
 80022fc:	1a6d      	subs	r5, r5, r1
 80022fe:	f025 0503 	bic.w	r5, r5, #3
 8002302:	3508      	adds	r5, #8
 8002304:	2d0c      	cmp	r5, #12
 8002306:	bf38      	it	cc
 8002308:	250c      	movcc	r5, #12
 800230a:	4629      	mov	r1, r5
 800230c:	4638      	mov	r0, r7
 800230e:	f7ff ffa5 	bl	800225c <sbrk_aligned>
 8002312:	3001      	adds	r0, #1
 8002314:	d02b      	beq.n	800236e <_malloc_r+0xd2>
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	442b      	add	r3, r5
 800231a:	6023      	str	r3, [r4, #0]
 800231c:	e00e      	b.n	800233c <_malloc_r+0xa0>
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	1b52      	subs	r2, r2, r5
 8002322:	d41e      	bmi.n	8002362 <_malloc_r+0xc6>
 8002324:	2a0b      	cmp	r2, #11
 8002326:	d916      	bls.n	8002356 <_malloc_r+0xba>
 8002328:	1961      	adds	r1, r4, r5
 800232a:	42a3      	cmp	r3, r4
 800232c:	6025      	str	r5, [r4, #0]
 800232e:	bf18      	it	ne
 8002330:	6059      	strne	r1, [r3, #4]
 8002332:	6863      	ldr	r3, [r4, #4]
 8002334:	bf08      	it	eq
 8002336:	6031      	streq	r1, [r6, #0]
 8002338:	5162      	str	r2, [r4, r5]
 800233a:	604b      	str	r3, [r1, #4]
 800233c:	4638      	mov	r0, r7
 800233e:	f104 060b 	add.w	r6, r4, #11
 8002342:	f000 f865 	bl	8002410 <__malloc_unlock>
 8002346:	f026 0607 	bic.w	r6, r6, #7
 800234a:	1d23      	adds	r3, r4, #4
 800234c:	1af2      	subs	r2, r6, r3
 800234e:	d0b6      	beq.n	80022be <_malloc_r+0x22>
 8002350:	1b9b      	subs	r3, r3, r6
 8002352:	50a3      	str	r3, [r4, r2]
 8002354:	e7b3      	b.n	80022be <_malloc_r+0x22>
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	42a3      	cmp	r3, r4
 800235a:	bf0c      	ite	eq
 800235c:	6032      	streq	r2, [r6, #0]
 800235e:	605a      	strne	r2, [r3, #4]
 8002360:	e7ec      	b.n	800233c <_malloc_r+0xa0>
 8002362:	4623      	mov	r3, r4
 8002364:	6864      	ldr	r4, [r4, #4]
 8002366:	e7b2      	b.n	80022ce <_malloc_r+0x32>
 8002368:	4634      	mov	r4, r6
 800236a:	6876      	ldr	r6, [r6, #4]
 800236c:	e7b9      	b.n	80022e2 <_malloc_r+0x46>
 800236e:	230c      	movs	r3, #12
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4638      	mov	r0, r7
 8002374:	f000 f84c 	bl	8002410 <__malloc_unlock>
 8002378:	e7a1      	b.n	80022be <_malloc_r+0x22>
 800237a:	6025      	str	r5, [r4, #0]
 800237c:	e7de      	b.n	800233c <_malloc_r+0xa0>
 800237e:	bf00      	nop
 8002380:	200000bc 	.word	0x200000bc

08002384 <_sbrk_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4d06      	ldr	r5, [pc, #24]	; (80023a0 <_sbrk_r+0x1c>)
 8002388:	2300      	movs	r3, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	f7fe fef2 	bl	8001178 <_sbrk>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_sbrk_r+0x1a>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	b103      	cbz	r3, 800239e <_sbrk_r+0x1a>
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	200000c4 	.word	0x200000c4

080023a4 <siprintf>:
 80023a4:	b40e      	push	{r1, r2, r3}
 80023a6:	b500      	push	{lr}
 80023a8:	b09c      	sub	sp, #112	; 0x70
 80023aa:	ab1d      	add	r3, sp, #116	; 0x74
 80023ac:	9002      	str	r0, [sp, #8]
 80023ae:	9006      	str	r0, [sp, #24]
 80023b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023b4:	4809      	ldr	r0, [pc, #36]	; (80023dc <siprintf+0x38>)
 80023b6:	9107      	str	r1, [sp, #28]
 80023b8:	9104      	str	r1, [sp, #16]
 80023ba:	4909      	ldr	r1, [pc, #36]	; (80023e0 <siprintf+0x3c>)
 80023bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80023c0:	9105      	str	r1, [sp, #20]
 80023c2:	6800      	ldr	r0, [r0, #0]
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	a902      	add	r1, sp, #8
 80023c8:	f000 f884 	bl	80024d4 <_svfiprintf_r>
 80023cc:	9b02      	ldr	r3, [sp, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	b01c      	add	sp, #112	; 0x70
 80023d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80023d8:	b003      	add	sp, #12
 80023da:	4770      	bx	lr
 80023dc:	20000010 	.word	0x20000010
 80023e0:	ffff0208 	.word	0xffff0208

080023e4 <strcat>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	4602      	mov	r2, r0
 80023e8:	7814      	ldrb	r4, [r2, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	3201      	adds	r2, #1
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d1fa      	bne.n	80023e8 <strcat+0x4>
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d1f9      	bne.n	80023f4 <strcat+0x10>
 8002400:	bd10      	pop	{r4, pc}
	...

08002404 <__malloc_lock>:
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <__malloc_lock+0x8>)
 8002406:	f000 baf9 	b.w	80029fc <__retarget_lock_acquire_recursive>
 800240a:	bf00      	nop
 800240c:	200000c8 	.word	0x200000c8

08002410 <__malloc_unlock>:
 8002410:	4801      	ldr	r0, [pc, #4]	; (8002418 <__malloc_unlock+0x8>)
 8002412:	f000 baf4 	b.w	80029fe <__retarget_lock_release_recursive>
 8002416:	bf00      	nop
 8002418:	200000c8 	.word	0x200000c8

0800241c <__ssputs_r>:
 800241c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002420:	688e      	ldr	r6, [r1, #8]
 8002422:	429e      	cmp	r6, r3
 8002424:	4682      	mov	sl, r0
 8002426:	460c      	mov	r4, r1
 8002428:	4690      	mov	r8, r2
 800242a:	461f      	mov	r7, r3
 800242c:	d838      	bhi.n	80024a0 <__ssputs_r+0x84>
 800242e:	898a      	ldrh	r2, [r1, #12]
 8002430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002434:	d032      	beq.n	800249c <__ssputs_r+0x80>
 8002436:	6825      	ldr	r5, [r4, #0]
 8002438:	6909      	ldr	r1, [r1, #16]
 800243a:	eba5 0901 	sub.w	r9, r5, r1
 800243e:	6965      	ldr	r5, [r4, #20]
 8002440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002448:	3301      	adds	r3, #1
 800244a:	444b      	add	r3, r9
 800244c:	106d      	asrs	r5, r5, #1
 800244e:	429d      	cmp	r5, r3
 8002450:	bf38      	it	cc
 8002452:	461d      	movcc	r5, r3
 8002454:	0553      	lsls	r3, r2, #21
 8002456:	d531      	bpl.n	80024bc <__ssputs_r+0xa0>
 8002458:	4629      	mov	r1, r5
 800245a:	f7ff ff1f 	bl	800229c <_malloc_r>
 800245e:	4606      	mov	r6, r0
 8002460:	b950      	cbnz	r0, 8002478 <__ssputs_r+0x5c>
 8002462:	230c      	movs	r3, #12
 8002464:	f8ca 3000 	str.w	r3, [sl]
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246e:	81a3      	strh	r3, [r4, #12]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002478:	6921      	ldr	r1, [r4, #16]
 800247a:	464a      	mov	r2, r9
 800247c:	f000 fac0 	bl	8002a00 <memcpy>
 8002480:	89a3      	ldrh	r3, [r4, #12]
 8002482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	81a3      	strh	r3, [r4, #12]
 800248c:	6126      	str	r6, [r4, #16]
 800248e:	6165      	str	r5, [r4, #20]
 8002490:	444e      	add	r6, r9
 8002492:	eba5 0509 	sub.w	r5, r5, r9
 8002496:	6026      	str	r6, [r4, #0]
 8002498:	60a5      	str	r5, [r4, #8]
 800249a:	463e      	mov	r6, r7
 800249c:	42be      	cmp	r6, r7
 800249e:	d900      	bls.n	80024a2 <__ssputs_r+0x86>
 80024a0:	463e      	mov	r6, r7
 80024a2:	6820      	ldr	r0, [r4, #0]
 80024a4:	4632      	mov	r2, r6
 80024a6:	4641      	mov	r1, r8
 80024a8:	f000 fab8 	bl	8002a1c <memmove>
 80024ac:	68a3      	ldr	r3, [r4, #8]
 80024ae:	1b9b      	subs	r3, r3, r6
 80024b0:	60a3      	str	r3, [r4, #8]
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	4433      	add	r3, r6
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	2000      	movs	r0, #0
 80024ba:	e7db      	b.n	8002474 <__ssputs_r+0x58>
 80024bc:	462a      	mov	r2, r5
 80024be:	f000 fac7 	bl	8002a50 <_realloc_r>
 80024c2:	4606      	mov	r6, r0
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d1e1      	bne.n	800248c <__ssputs_r+0x70>
 80024c8:	6921      	ldr	r1, [r4, #16]
 80024ca:	4650      	mov	r0, sl
 80024cc:	f7ff fe7a 	bl	80021c4 <_free_r>
 80024d0:	e7c7      	b.n	8002462 <__ssputs_r+0x46>
	...

080024d4 <_svfiprintf_r>:
 80024d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d8:	4698      	mov	r8, r3
 80024da:	898b      	ldrh	r3, [r1, #12]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	b09d      	sub	sp, #116	; 0x74
 80024e0:	4607      	mov	r7, r0
 80024e2:	460d      	mov	r5, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	d50e      	bpl.n	8002506 <_svfiprintf_r+0x32>
 80024e8:	690b      	ldr	r3, [r1, #16]
 80024ea:	b963      	cbnz	r3, 8002506 <_svfiprintf_r+0x32>
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	f7ff fed5 	bl	800229c <_malloc_r>
 80024f2:	6028      	str	r0, [r5, #0]
 80024f4:	6128      	str	r0, [r5, #16]
 80024f6:	b920      	cbnz	r0, 8002502 <_svfiprintf_r+0x2e>
 80024f8:	230c      	movs	r3, #12
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002500:	e0d1      	b.n	80026a6 <_svfiprintf_r+0x1d2>
 8002502:	2340      	movs	r3, #64	; 0x40
 8002504:	616b      	str	r3, [r5, #20]
 8002506:	2300      	movs	r3, #0
 8002508:	9309      	str	r3, [sp, #36]	; 0x24
 800250a:	2320      	movs	r3, #32
 800250c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002510:	f8cd 800c 	str.w	r8, [sp, #12]
 8002514:	2330      	movs	r3, #48	; 0x30
 8002516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80026c0 <_svfiprintf_r+0x1ec>
 800251a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800251e:	f04f 0901 	mov.w	r9, #1
 8002522:	4623      	mov	r3, r4
 8002524:	469a      	mov	sl, r3
 8002526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800252a:	b10a      	cbz	r2, 8002530 <_svfiprintf_r+0x5c>
 800252c:	2a25      	cmp	r2, #37	; 0x25
 800252e:	d1f9      	bne.n	8002524 <_svfiprintf_r+0x50>
 8002530:	ebba 0b04 	subs.w	fp, sl, r4
 8002534:	d00b      	beq.n	800254e <_svfiprintf_r+0x7a>
 8002536:	465b      	mov	r3, fp
 8002538:	4622      	mov	r2, r4
 800253a:	4629      	mov	r1, r5
 800253c:	4638      	mov	r0, r7
 800253e:	f7ff ff6d 	bl	800241c <__ssputs_r>
 8002542:	3001      	adds	r0, #1
 8002544:	f000 80aa 	beq.w	800269c <_svfiprintf_r+0x1c8>
 8002548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800254a:	445a      	add	r2, fp
 800254c:	9209      	str	r2, [sp, #36]	; 0x24
 800254e:	f89a 3000 	ldrb.w	r3, [sl]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80a2 	beq.w	800269c <_svfiprintf_r+0x1c8>
 8002558:	2300      	movs	r3, #0
 800255a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002562:	f10a 0a01 	add.w	sl, sl, #1
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	9307      	str	r3, [sp, #28]
 800256a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800256e:	931a      	str	r3, [sp, #104]	; 0x68
 8002570:	4654      	mov	r4, sl
 8002572:	2205      	movs	r2, #5
 8002574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002578:	4851      	ldr	r0, [pc, #324]	; (80026c0 <_svfiprintf_r+0x1ec>)
 800257a:	f7fd fe29 	bl	80001d0 <memchr>
 800257e:	9a04      	ldr	r2, [sp, #16]
 8002580:	b9d8      	cbnz	r0, 80025ba <_svfiprintf_r+0xe6>
 8002582:	06d0      	lsls	r0, r2, #27
 8002584:	bf44      	itt	mi
 8002586:	2320      	movmi	r3, #32
 8002588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800258c:	0711      	lsls	r1, r2, #28
 800258e:	bf44      	itt	mi
 8002590:	232b      	movmi	r3, #43	; 0x2b
 8002592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002596:	f89a 3000 	ldrb.w	r3, [sl]
 800259a:	2b2a      	cmp	r3, #42	; 0x2a
 800259c:	d015      	beq.n	80025ca <_svfiprintf_r+0xf6>
 800259e:	9a07      	ldr	r2, [sp, #28]
 80025a0:	4654      	mov	r4, sl
 80025a2:	2000      	movs	r0, #0
 80025a4:	f04f 0c0a 	mov.w	ip, #10
 80025a8:	4621      	mov	r1, r4
 80025aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025ae:	3b30      	subs	r3, #48	; 0x30
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d94e      	bls.n	8002652 <_svfiprintf_r+0x17e>
 80025b4:	b1b0      	cbz	r0, 80025e4 <_svfiprintf_r+0x110>
 80025b6:	9207      	str	r2, [sp, #28]
 80025b8:	e014      	b.n	80025e4 <_svfiprintf_r+0x110>
 80025ba:	eba0 0308 	sub.w	r3, r0, r8
 80025be:	fa09 f303 	lsl.w	r3, r9, r3
 80025c2:	4313      	orrs	r3, r2
 80025c4:	9304      	str	r3, [sp, #16]
 80025c6:	46a2      	mov	sl, r4
 80025c8:	e7d2      	b.n	8002570 <_svfiprintf_r+0x9c>
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	1d19      	adds	r1, r3, #4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	9103      	str	r1, [sp, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bfbb      	ittet	lt
 80025d6:	425b      	neglt	r3, r3
 80025d8:	f042 0202 	orrlt.w	r2, r2, #2
 80025dc:	9307      	strge	r3, [sp, #28]
 80025de:	9307      	strlt	r3, [sp, #28]
 80025e0:	bfb8      	it	lt
 80025e2:	9204      	strlt	r2, [sp, #16]
 80025e4:	7823      	ldrb	r3, [r4, #0]
 80025e6:	2b2e      	cmp	r3, #46	; 0x2e
 80025e8:	d10c      	bne.n	8002604 <_svfiprintf_r+0x130>
 80025ea:	7863      	ldrb	r3, [r4, #1]
 80025ec:	2b2a      	cmp	r3, #42	; 0x2a
 80025ee:	d135      	bne.n	800265c <_svfiprintf_r+0x188>
 80025f0:	9b03      	ldr	r3, [sp, #12]
 80025f2:	1d1a      	adds	r2, r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	9203      	str	r2, [sp, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bfb8      	it	lt
 80025fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002600:	3402      	adds	r4, #2
 8002602:	9305      	str	r3, [sp, #20]
 8002604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80026d0 <_svfiprintf_r+0x1fc>
 8002608:	7821      	ldrb	r1, [r4, #0]
 800260a:	2203      	movs	r2, #3
 800260c:	4650      	mov	r0, sl
 800260e:	f7fd fddf 	bl	80001d0 <memchr>
 8002612:	b140      	cbz	r0, 8002626 <_svfiprintf_r+0x152>
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	eba0 000a 	sub.w	r0, r0, sl
 800261a:	fa03 f000 	lsl.w	r0, r3, r0
 800261e:	9b04      	ldr	r3, [sp, #16]
 8002620:	4303      	orrs	r3, r0
 8002622:	3401      	adds	r4, #1
 8002624:	9304      	str	r3, [sp, #16]
 8002626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <_svfiprintf_r+0x1f0>)
 800262c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002630:	2206      	movs	r2, #6
 8002632:	f7fd fdcd 	bl	80001d0 <memchr>
 8002636:	2800      	cmp	r0, #0
 8002638:	d038      	beq.n	80026ac <_svfiprintf_r+0x1d8>
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <_svfiprintf_r+0x1f4>)
 800263c:	bb1b      	cbnz	r3, 8002686 <_svfiprintf_r+0x1b2>
 800263e:	9b03      	ldr	r3, [sp, #12]
 8002640:	3307      	adds	r3, #7
 8002642:	f023 0307 	bic.w	r3, r3, #7
 8002646:	3308      	adds	r3, #8
 8002648:	9303      	str	r3, [sp, #12]
 800264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800264c:	4433      	add	r3, r6
 800264e:	9309      	str	r3, [sp, #36]	; 0x24
 8002650:	e767      	b.n	8002522 <_svfiprintf_r+0x4e>
 8002652:	fb0c 3202 	mla	r2, ip, r2, r3
 8002656:	460c      	mov	r4, r1
 8002658:	2001      	movs	r0, #1
 800265a:	e7a5      	b.n	80025a8 <_svfiprintf_r+0xd4>
 800265c:	2300      	movs	r3, #0
 800265e:	3401      	adds	r4, #1
 8002660:	9305      	str	r3, [sp, #20]
 8002662:	4619      	mov	r1, r3
 8002664:	f04f 0c0a 	mov.w	ip, #10
 8002668:	4620      	mov	r0, r4
 800266a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800266e:	3a30      	subs	r2, #48	; 0x30
 8002670:	2a09      	cmp	r2, #9
 8002672:	d903      	bls.n	800267c <_svfiprintf_r+0x1a8>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0c5      	beq.n	8002604 <_svfiprintf_r+0x130>
 8002678:	9105      	str	r1, [sp, #20]
 800267a:	e7c3      	b.n	8002604 <_svfiprintf_r+0x130>
 800267c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002680:	4604      	mov	r4, r0
 8002682:	2301      	movs	r3, #1
 8002684:	e7f0      	b.n	8002668 <_svfiprintf_r+0x194>
 8002686:	ab03      	add	r3, sp, #12
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	462a      	mov	r2, r5
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <_svfiprintf_r+0x1f8>)
 800268e:	a904      	add	r1, sp, #16
 8002690:	4638      	mov	r0, r7
 8002692:	f3af 8000 	nop.w
 8002696:	1c42      	adds	r2, r0, #1
 8002698:	4606      	mov	r6, r0
 800269a:	d1d6      	bne.n	800264a <_svfiprintf_r+0x176>
 800269c:	89ab      	ldrh	r3, [r5, #12]
 800269e:	065b      	lsls	r3, r3, #25
 80026a0:	f53f af2c 	bmi.w	80024fc <_svfiprintf_r+0x28>
 80026a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026a6:	b01d      	add	sp, #116	; 0x74
 80026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ac:	ab03      	add	r3, sp, #12
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	462a      	mov	r2, r5
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <_svfiprintf_r+0x1f8>)
 80026b4:	a904      	add	r1, sp, #16
 80026b6:	4638      	mov	r0, r7
 80026b8:	f000 f87a 	bl	80027b0 <_printf_i>
 80026bc:	e7eb      	b.n	8002696 <_svfiprintf_r+0x1c2>
 80026be:	bf00      	nop
 80026c0:	08002bdc 	.word	0x08002bdc
 80026c4:	08002be6 	.word	0x08002be6
 80026c8:	00000000 	.word	0x00000000
 80026cc:	0800241d 	.word	0x0800241d
 80026d0:	08002be2 	.word	0x08002be2

080026d4 <_printf_common>:
 80026d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	4616      	mov	r6, r2
 80026da:	4699      	mov	r9, r3
 80026dc:	688a      	ldr	r2, [r1, #8]
 80026de:	690b      	ldr	r3, [r1, #16]
 80026e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bfb8      	it	lt
 80026e8:	4613      	movlt	r3, r2
 80026ea:	6033      	str	r3, [r6, #0]
 80026ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026f0:	4607      	mov	r7, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	b10a      	cbz	r2, 80026fa <_printf_common+0x26>
 80026f6:	3301      	adds	r3, #1
 80026f8:	6033      	str	r3, [r6, #0]
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	0699      	lsls	r1, r3, #26
 80026fe:	bf42      	ittt	mi
 8002700:	6833      	ldrmi	r3, [r6, #0]
 8002702:	3302      	addmi	r3, #2
 8002704:	6033      	strmi	r3, [r6, #0]
 8002706:	6825      	ldr	r5, [r4, #0]
 8002708:	f015 0506 	ands.w	r5, r5, #6
 800270c:	d106      	bne.n	800271c <_printf_common+0x48>
 800270e:	f104 0a19 	add.w	sl, r4, #25
 8002712:	68e3      	ldr	r3, [r4, #12]
 8002714:	6832      	ldr	r2, [r6, #0]
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	42ab      	cmp	r3, r5
 800271a:	dc26      	bgt.n	800276a <_printf_common+0x96>
 800271c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002720:	1e13      	subs	r3, r2, #0
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	bf18      	it	ne
 8002726:	2301      	movne	r3, #1
 8002728:	0692      	lsls	r2, r2, #26
 800272a:	d42b      	bmi.n	8002784 <_printf_common+0xb0>
 800272c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002730:	4649      	mov	r1, r9
 8002732:	4638      	mov	r0, r7
 8002734:	47c0      	blx	r8
 8002736:	3001      	adds	r0, #1
 8002738:	d01e      	beq.n	8002778 <_printf_common+0xa4>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	68e5      	ldr	r5, [r4, #12]
 800273e:	6832      	ldr	r2, [r6, #0]
 8002740:	f003 0306 	and.w	r3, r3, #6
 8002744:	2b04      	cmp	r3, #4
 8002746:	bf08      	it	eq
 8002748:	1aad      	subeq	r5, r5, r2
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	6922      	ldr	r2, [r4, #16]
 800274e:	bf0c      	ite	eq
 8002750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002754:	2500      	movne	r5, #0
 8002756:	4293      	cmp	r3, r2
 8002758:	bfc4      	itt	gt
 800275a:	1a9b      	subgt	r3, r3, r2
 800275c:	18ed      	addgt	r5, r5, r3
 800275e:	2600      	movs	r6, #0
 8002760:	341a      	adds	r4, #26
 8002762:	42b5      	cmp	r5, r6
 8002764:	d11a      	bne.n	800279c <_printf_common+0xc8>
 8002766:	2000      	movs	r0, #0
 8002768:	e008      	b.n	800277c <_printf_common+0xa8>
 800276a:	2301      	movs	r3, #1
 800276c:	4652      	mov	r2, sl
 800276e:	4649      	mov	r1, r9
 8002770:	4638      	mov	r0, r7
 8002772:	47c0      	blx	r8
 8002774:	3001      	adds	r0, #1
 8002776:	d103      	bne.n	8002780 <_printf_common+0xac>
 8002778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002780:	3501      	adds	r5, #1
 8002782:	e7c6      	b.n	8002712 <_printf_common+0x3e>
 8002784:	18e1      	adds	r1, r4, r3
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	2030      	movs	r0, #48	; 0x30
 800278a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800278e:	4422      	add	r2, r4
 8002790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002798:	3302      	adds	r3, #2
 800279a:	e7c7      	b.n	800272c <_printf_common+0x58>
 800279c:	2301      	movs	r3, #1
 800279e:	4622      	mov	r2, r4
 80027a0:	4649      	mov	r1, r9
 80027a2:	4638      	mov	r0, r7
 80027a4:	47c0      	blx	r8
 80027a6:	3001      	adds	r0, #1
 80027a8:	d0e6      	beq.n	8002778 <_printf_common+0xa4>
 80027aa:	3601      	adds	r6, #1
 80027ac:	e7d9      	b.n	8002762 <_printf_common+0x8e>
	...

080027b0 <_printf_i>:
 80027b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027b4:	7e0f      	ldrb	r7, [r1, #24]
 80027b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027b8:	2f78      	cmp	r7, #120	; 0x78
 80027ba:	4691      	mov	r9, r2
 80027bc:	4680      	mov	r8, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	469a      	mov	sl, r3
 80027c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80027c6:	d807      	bhi.n	80027d8 <_printf_i+0x28>
 80027c8:	2f62      	cmp	r7, #98	; 0x62
 80027ca:	d80a      	bhi.n	80027e2 <_printf_i+0x32>
 80027cc:	2f00      	cmp	r7, #0
 80027ce:	f000 80d8 	beq.w	8002982 <_printf_i+0x1d2>
 80027d2:	2f58      	cmp	r7, #88	; 0x58
 80027d4:	f000 80a3 	beq.w	800291e <_printf_i+0x16e>
 80027d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027e0:	e03a      	b.n	8002858 <_printf_i+0xa8>
 80027e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027e6:	2b15      	cmp	r3, #21
 80027e8:	d8f6      	bhi.n	80027d8 <_printf_i+0x28>
 80027ea:	a101      	add	r1, pc, #4	; (adr r1, 80027f0 <_printf_i+0x40>)
 80027ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027f0:	08002849 	.word	0x08002849
 80027f4:	0800285d 	.word	0x0800285d
 80027f8:	080027d9 	.word	0x080027d9
 80027fc:	080027d9 	.word	0x080027d9
 8002800:	080027d9 	.word	0x080027d9
 8002804:	080027d9 	.word	0x080027d9
 8002808:	0800285d 	.word	0x0800285d
 800280c:	080027d9 	.word	0x080027d9
 8002810:	080027d9 	.word	0x080027d9
 8002814:	080027d9 	.word	0x080027d9
 8002818:	080027d9 	.word	0x080027d9
 800281c:	08002969 	.word	0x08002969
 8002820:	0800288d 	.word	0x0800288d
 8002824:	0800294b 	.word	0x0800294b
 8002828:	080027d9 	.word	0x080027d9
 800282c:	080027d9 	.word	0x080027d9
 8002830:	0800298b 	.word	0x0800298b
 8002834:	080027d9 	.word	0x080027d9
 8002838:	0800288d 	.word	0x0800288d
 800283c:	080027d9 	.word	0x080027d9
 8002840:	080027d9 	.word	0x080027d9
 8002844:	08002953 	.word	0x08002953
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	1d1a      	adds	r2, r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	602a      	str	r2, [r5, #0]
 8002850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002858:	2301      	movs	r3, #1
 800285a:	e0a3      	b.n	80029a4 <_printf_i+0x1f4>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	6829      	ldr	r1, [r5, #0]
 8002860:	0606      	lsls	r6, r0, #24
 8002862:	f101 0304 	add.w	r3, r1, #4
 8002866:	d50a      	bpl.n	800287e <_printf_i+0xce>
 8002868:	680e      	ldr	r6, [r1, #0]
 800286a:	602b      	str	r3, [r5, #0]
 800286c:	2e00      	cmp	r6, #0
 800286e:	da03      	bge.n	8002878 <_printf_i+0xc8>
 8002870:	232d      	movs	r3, #45	; 0x2d
 8002872:	4276      	negs	r6, r6
 8002874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002878:	485e      	ldr	r0, [pc, #376]	; (80029f4 <_printf_i+0x244>)
 800287a:	230a      	movs	r3, #10
 800287c:	e019      	b.n	80028b2 <_printf_i+0x102>
 800287e:	680e      	ldr	r6, [r1, #0]
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002886:	bf18      	it	ne
 8002888:	b236      	sxthne	r6, r6
 800288a:	e7ef      	b.n	800286c <_printf_i+0xbc>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	6820      	ldr	r0, [r4, #0]
 8002890:	1d19      	adds	r1, r3, #4
 8002892:	6029      	str	r1, [r5, #0]
 8002894:	0601      	lsls	r1, r0, #24
 8002896:	d501      	bpl.n	800289c <_printf_i+0xec>
 8002898:	681e      	ldr	r6, [r3, #0]
 800289a:	e002      	b.n	80028a2 <_printf_i+0xf2>
 800289c:	0646      	lsls	r6, r0, #25
 800289e:	d5fb      	bpl.n	8002898 <_printf_i+0xe8>
 80028a0:	881e      	ldrh	r6, [r3, #0]
 80028a2:	4854      	ldr	r0, [pc, #336]	; (80029f4 <_printf_i+0x244>)
 80028a4:	2f6f      	cmp	r7, #111	; 0x6f
 80028a6:	bf0c      	ite	eq
 80028a8:	2308      	moveq	r3, #8
 80028aa:	230a      	movne	r3, #10
 80028ac:	2100      	movs	r1, #0
 80028ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028b2:	6865      	ldr	r5, [r4, #4]
 80028b4:	60a5      	str	r5, [r4, #8]
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	bfa2      	ittt	ge
 80028ba:	6821      	ldrge	r1, [r4, #0]
 80028bc:	f021 0104 	bicge.w	r1, r1, #4
 80028c0:	6021      	strge	r1, [r4, #0]
 80028c2:	b90e      	cbnz	r6, 80028c8 <_printf_i+0x118>
 80028c4:	2d00      	cmp	r5, #0
 80028c6:	d04d      	beq.n	8002964 <_printf_i+0x1b4>
 80028c8:	4615      	mov	r5, r2
 80028ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80028ce:	fb03 6711 	mls	r7, r3, r1, r6
 80028d2:	5dc7      	ldrb	r7, [r0, r7]
 80028d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028d8:	4637      	mov	r7, r6
 80028da:	42bb      	cmp	r3, r7
 80028dc:	460e      	mov	r6, r1
 80028de:	d9f4      	bls.n	80028ca <_printf_i+0x11a>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d10b      	bne.n	80028fc <_printf_i+0x14c>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	07de      	lsls	r6, r3, #31
 80028e8:	d508      	bpl.n	80028fc <_printf_i+0x14c>
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	6861      	ldr	r1, [r4, #4]
 80028ee:	4299      	cmp	r1, r3
 80028f0:	bfde      	ittt	le
 80028f2:	2330      	movle	r3, #48	; 0x30
 80028f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80028fc:	1b52      	subs	r2, r2, r5
 80028fe:	6122      	str	r2, [r4, #16]
 8002900:	f8cd a000 	str.w	sl, [sp]
 8002904:	464b      	mov	r3, r9
 8002906:	aa03      	add	r2, sp, #12
 8002908:	4621      	mov	r1, r4
 800290a:	4640      	mov	r0, r8
 800290c:	f7ff fee2 	bl	80026d4 <_printf_common>
 8002910:	3001      	adds	r0, #1
 8002912:	d14c      	bne.n	80029ae <_printf_i+0x1fe>
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	b004      	add	sp, #16
 800291a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800291e:	4835      	ldr	r0, [pc, #212]	; (80029f4 <_printf_i+0x244>)
 8002920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002924:	6829      	ldr	r1, [r5, #0]
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f851 6b04 	ldr.w	r6, [r1], #4
 800292c:	6029      	str	r1, [r5, #0]
 800292e:	061d      	lsls	r5, r3, #24
 8002930:	d514      	bpl.n	800295c <_printf_i+0x1ac>
 8002932:	07df      	lsls	r7, r3, #31
 8002934:	bf44      	itt	mi
 8002936:	f043 0320 	orrmi.w	r3, r3, #32
 800293a:	6023      	strmi	r3, [r4, #0]
 800293c:	b91e      	cbnz	r6, 8002946 <_printf_i+0x196>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	f023 0320 	bic.w	r3, r3, #32
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	2310      	movs	r3, #16
 8002948:	e7b0      	b.n	80028ac <_printf_i+0xfc>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	2378      	movs	r3, #120	; 0x78
 8002954:	4828      	ldr	r0, [pc, #160]	; (80029f8 <_printf_i+0x248>)
 8002956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800295a:	e7e3      	b.n	8002924 <_printf_i+0x174>
 800295c:	0659      	lsls	r1, r3, #25
 800295e:	bf48      	it	mi
 8002960:	b2b6      	uxthmi	r6, r6
 8002962:	e7e6      	b.n	8002932 <_printf_i+0x182>
 8002964:	4615      	mov	r5, r2
 8002966:	e7bb      	b.n	80028e0 <_printf_i+0x130>
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	6826      	ldr	r6, [r4, #0]
 800296c:	6961      	ldr	r1, [r4, #20]
 800296e:	1d18      	adds	r0, r3, #4
 8002970:	6028      	str	r0, [r5, #0]
 8002972:	0635      	lsls	r5, r6, #24
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	d501      	bpl.n	800297c <_printf_i+0x1cc>
 8002978:	6019      	str	r1, [r3, #0]
 800297a:	e002      	b.n	8002982 <_printf_i+0x1d2>
 800297c:	0670      	lsls	r0, r6, #25
 800297e:	d5fb      	bpl.n	8002978 <_printf_i+0x1c8>
 8002980:	8019      	strh	r1, [r3, #0]
 8002982:	2300      	movs	r3, #0
 8002984:	6123      	str	r3, [r4, #16]
 8002986:	4615      	mov	r5, r2
 8002988:	e7ba      	b.n	8002900 <_printf_i+0x150>
 800298a:	682b      	ldr	r3, [r5, #0]
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	602a      	str	r2, [r5, #0]
 8002990:	681d      	ldr	r5, [r3, #0]
 8002992:	6862      	ldr	r2, [r4, #4]
 8002994:	2100      	movs	r1, #0
 8002996:	4628      	mov	r0, r5
 8002998:	f7fd fc1a 	bl	80001d0 <memchr>
 800299c:	b108      	cbz	r0, 80029a2 <_printf_i+0x1f2>
 800299e:	1b40      	subs	r0, r0, r5
 80029a0:	6060      	str	r0, [r4, #4]
 80029a2:	6863      	ldr	r3, [r4, #4]
 80029a4:	6123      	str	r3, [r4, #16]
 80029a6:	2300      	movs	r3, #0
 80029a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ac:	e7a8      	b.n	8002900 <_printf_i+0x150>
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	462a      	mov	r2, r5
 80029b2:	4649      	mov	r1, r9
 80029b4:	4640      	mov	r0, r8
 80029b6:	47d0      	blx	sl
 80029b8:	3001      	adds	r0, #1
 80029ba:	d0ab      	beq.n	8002914 <_printf_i+0x164>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	079b      	lsls	r3, r3, #30
 80029c0:	d413      	bmi.n	80029ea <_printf_i+0x23a>
 80029c2:	68e0      	ldr	r0, [r4, #12]
 80029c4:	9b03      	ldr	r3, [sp, #12]
 80029c6:	4298      	cmp	r0, r3
 80029c8:	bfb8      	it	lt
 80029ca:	4618      	movlt	r0, r3
 80029cc:	e7a4      	b.n	8002918 <_printf_i+0x168>
 80029ce:	2301      	movs	r3, #1
 80029d0:	4632      	mov	r2, r6
 80029d2:	4649      	mov	r1, r9
 80029d4:	4640      	mov	r0, r8
 80029d6:	47d0      	blx	sl
 80029d8:	3001      	adds	r0, #1
 80029da:	d09b      	beq.n	8002914 <_printf_i+0x164>
 80029dc:	3501      	adds	r5, #1
 80029de:	68e3      	ldr	r3, [r4, #12]
 80029e0:	9903      	ldr	r1, [sp, #12]
 80029e2:	1a5b      	subs	r3, r3, r1
 80029e4:	42ab      	cmp	r3, r5
 80029e6:	dcf2      	bgt.n	80029ce <_printf_i+0x21e>
 80029e8:	e7eb      	b.n	80029c2 <_printf_i+0x212>
 80029ea:	2500      	movs	r5, #0
 80029ec:	f104 0619 	add.w	r6, r4, #25
 80029f0:	e7f5      	b.n	80029de <_printf_i+0x22e>
 80029f2:	bf00      	nop
 80029f4:	08002bed 	.word	0x08002bed
 80029f8:	08002bfe 	.word	0x08002bfe

080029fc <__retarget_lock_acquire_recursive>:
 80029fc:	4770      	bx	lr

080029fe <__retarget_lock_release_recursive>:
 80029fe:	4770      	bx	lr

08002a00 <memcpy>:
 8002a00:	440a      	add	r2, r1
 8002a02:	4291      	cmp	r1, r2
 8002a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002a08:	d100      	bne.n	8002a0c <memcpy+0xc>
 8002a0a:	4770      	bx	lr
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a16:	4291      	cmp	r1, r2
 8002a18:	d1f9      	bne.n	8002a0e <memcpy+0xe>
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <memmove>:
 8002a1c:	4288      	cmp	r0, r1
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	eb01 0402 	add.w	r4, r1, r2
 8002a24:	d902      	bls.n	8002a2c <memmove+0x10>
 8002a26:	4284      	cmp	r4, r0
 8002a28:	4623      	mov	r3, r4
 8002a2a:	d807      	bhi.n	8002a3c <memmove+0x20>
 8002a2c:	1e43      	subs	r3, r0, #1
 8002a2e:	42a1      	cmp	r1, r4
 8002a30:	d008      	beq.n	8002a44 <memmove+0x28>
 8002a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a3a:	e7f8      	b.n	8002a2e <memmove+0x12>
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4601      	mov	r1, r0
 8002a40:	428a      	cmp	r2, r1
 8002a42:	d100      	bne.n	8002a46 <memmove+0x2a>
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a4e:	e7f7      	b.n	8002a40 <memmove+0x24>

08002a50 <_realloc_r>:
 8002a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a54:	4680      	mov	r8, r0
 8002a56:	4614      	mov	r4, r2
 8002a58:	460e      	mov	r6, r1
 8002a5a:	b921      	cbnz	r1, 8002a66 <_realloc_r+0x16>
 8002a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a60:	4611      	mov	r1, r2
 8002a62:	f7ff bc1b 	b.w	800229c <_malloc_r>
 8002a66:	b92a      	cbnz	r2, 8002a74 <_realloc_r+0x24>
 8002a68:	f7ff fbac 	bl	80021c4 <_free_r>
 8002a6c:	4625      	mov	r5, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a74:	f000 f81b 	bl	8002aae <_malloc_usable_size_r>
 8002a78:	4284      	cmp	r4, r0
 8002a7a:	4607      	mov	r7, r0
 8002a7c:	d802      	bhi.n	8002a84 <_realloc_r+0x34>
 8002a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a82:	d812      	bhi.n	8002aaa <_realloc_r+0x5a>
 8002a84:	4621      	mov	r1, r4
 8002a86:	4640      	mov	r0, r8
 8002a88:	f7ff fc08 	bl	800229c <_malloc_r>
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d0ed      	beq.n	8002a6e <_realloc_r+0x1e>
 8002a92:	42bc      	cmp	r4, r7
 8002a94:	4622      	mov	r2, r4
 8002a96:	4631      	mov	r1, r6
 8002a98:	bf28      	it	cs
 8002a9a:	463a      	movcs	r2, r7
 8002a9c:	f7ff ffb0 	bl	8002a00 <memcpy>
 8002aa0:	4631      	mov	r1, r6
 8002aa2:	4640      	mov	r0, r8
 8002aa4:	f7ff fb8e 	bl	80021c4 <_free_r>
 8002aa8:	e7e1      	b.n	8002a6e <_realloc_r+0x1e>
 8002aaa:	4635      	mov	r5, r6
 8002aac:	e7df      	b.n	8002a6e <_realloc_r+0x1e>

08002aae <_malloc_usable_size_r>:
 8002aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ab2:	1f18      	subs	r0, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bfbc      	itt	lt
 8002ab8:	580b      	ldrlt	r3, [r1, r0]
 8002aba:	18c0      	addlt	r0, r0, r3
 8002abc:	4770      	bx	lr
	...

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
