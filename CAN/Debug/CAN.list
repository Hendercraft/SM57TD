
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f10  08002f10  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000068  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f57  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a09  00000000  00000000  00027003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  00028a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000560  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213b0  00000000  00000000  00029590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000812c  00000000  00000000  0004a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07b8  00000000  00000000  00052a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113224  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a78  00000000  00000000  00113274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002db8 	.word	0x08002db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08002db8 	.word	0x08002db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <__NVIC_EnableIRQ+0x38>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

    // Configure the GPIO pins for USART3
    // ...
    GPIO_Init();
 80005b6:	f000 f853 	bl	8000660 <GPIO_Init>
    // Enable the USART3 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <UART_Init+0xa4>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a25      	ldr	r2, [pc, #148]	; (8000654 <UART_Init+0xa4>)
 80005c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
    // Disable USART3
    USART3->CR1 &= ~USART_CR1_UE;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <UART_Init+0xa8>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <UART_Init+0xa8>)
 80005cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005d0:	60d3      	str	r3, [r2, #12]

    // Configure USART3 for 8-bit data, no parity, and 1 stop bit oversampling 16
    USART3->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <UART_Init+0xa8>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <UART_Init+0xa8>)
 80005d8:	f423 4314 	bic.w	r3, r3, #37888	; 0x9400
 80005dc:	60d3      	str	r3, [r2, #12]
    USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <UART_Init+0xa8>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <UART_Init+0xa8>)
 80005e4:	f043 030c 	orr.w	r3, r3, #12
 80005e8:	60d3      	str	r3, [r2, #12]
    USART3->CR2 &= ~USART_CR2_STOP;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <UART_Init+0xa8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <UART_Init+0xa8>)
 80005f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005f4:	6113      	str	r3, [r2, #16]
    USART3->CR2 |= USART_CR2_LINEN;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <UART_Init+0xa8>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <UART_Init+0xa8>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6113      	str	r3, [r2, #16]
    USART3->CR3 &= 0x00000000;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <UART_Init+0xa8>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <UART_Init+0xa8>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
    // Sstem clock (42Mhz) / Baud rate (9600) * 8* (2-CR->Over) = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
    USART3->BRR = 0x00001117;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <UART_Init+0xa8>)
 800060e:	f241 1217 	movw	r2, #4375	; 0x1117
 8000612:	609a      	str	r2, [r3, #8]

    // Enable transmitter interrupts
    //USART3->CR1 |= USART_CR1_TXEIE;

    // Enable reception interrupts
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <UART_Init+0xa8>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <UART_Init+0xa8>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	60d3      	str	r3, [r2, #12]

    // Enable USART3
    USART3->CR1 |= USART_CR1_UE;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <UART_Init+0xa8>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <UART_Init+0xa8>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART3_IRQn);
 800062c:	2027      	movs	r0, #39	; 0x27
 800062e:	f7ff ffa1 	bl	8000574 <__NVIC_EnableIRQ>

    // Perform the delay
    for (uint32_t i = 0; i < 500000; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e003      	b.n	8000640 <UART_Init+0x90>
    	__NOP(); // No Operation, consumes one cycle
 8000638:	bf00      	nop
    for (uint32_t i = 0; i < 500000; i++) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a06      	ldr	r2, [pc, #24]	; (800065c <UART_Init+0xac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d9f7      	bls.n	8000638 <UART_Init+0x88>
    }
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40004800 	.word	0x40004800
 800065c:	0007a11f 	.word	0x0007a11f

08000660 <GPIO_Init>:

static void GPIO_Init(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <GPIO_Init+0xd0>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <GPIO_Init+0xd0>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB10 (USART3 TX) as AF mode, high speed, and push-pull output
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <GPIO_Init+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <GPIO_Init+0xd4>)
 8000676:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800067a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <GPIO_Init+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <GPIO_Init+0xd4>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <GPIO_Init+0xd4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <GPIO_Init+0xd4>)
 800068e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000692:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <GPIO_Init+0xd4>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a26      	ldr	r2, [pc, #152]	; (8000734 <GPIO_Init+0xd4>)
 800069a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800069e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <GPIO_Init+0xd4>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4a23      	ldr	r2, [pc, #140]	; (8000734 <GPIO_Init+0xd4>)
 80006a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80006aa:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <GPIO_Init+0xd4>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <GPIO_Init+0xd4>)
 80006b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006b6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL10_Pos);
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <GPIO_Init+0xd4>)
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <GPIO_Init+0xd4>)
 80006be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006c2:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure PB11 (USART3 RX) as AF mode, high speed, and pull-up input
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <GPIO_Init+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <GPIO_Init+0xd4>)
 80006ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <GPIO_Init+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <GPIO_Init+0xd4>)
 80006d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT11;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <GPIO_Init+0xd4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <GPIO_Init+0xd4>)
 80006e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <GPIO_Init+0xd4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <GPIO_Init+0xd4>)
 80006ee:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80006f2:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <GPIO_Init+0xd4>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <GPIO_Init+0xd4>)
 80006fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006fe:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <GPIO_Init+0xd4>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <GPIO_Init+0xd4>)
 8000706:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800070a:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <GPIO_Init+0xd4>)
 800070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <GPIO_Init+0xd4>)
 8000712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000716:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL11_Pos);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <GPIO_Init+0xd4>)
 800071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <GPIO_Init+0xd4>)
 800071e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000722:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400

08000738 <SendResponse>:
static void SendHeader(uint8_t ID){
	sync_break();
	UART_PutChar(ID);
}

static void SendResponse(LINMSG* msg){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<(msg->length);i++){
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e00a      	b.n	800075c <SendResponse+0x24>
		UART_PutChar(msg->data[i]);
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	3302      	adds	r3, #2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f87f 	bl	8000854 <UART_PutChar>
	for (int i = 0; i<(msg->length);i++){
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	461a      	mov	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4293      	cmp	r3, r2
 8000766:	dbee      	blt.n	8000746 <SendResponse+0xe>
	}
	UART_PutChar(msg->checksum);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b1b      	ldrb	r3, [r3, #12]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f871 	bl	8000854 <UART_PutChar>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <slave_response>:
 * This function is called at each interrupt
 * It's used when the card is in slave mode
 * It's role is to generate a response to the request of the master
 * TODO implement a way to handle error while comparing checksum
 * */
int slave_response(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//sync_counter is used to determine whether we recived the sync byte or not
	if (slave_data_counter > -1){
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <slave_response+0xc4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db33      	blt.n	80007f0 <slave_response+0x74>
		if (slave_data_counter <3){ //We predefined a message with 3 data field
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <slave_response+0xc4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	dc0d      	bgt.n	80007ac <slave_response+0x30>
			salve_rx_msg.data[slave_data_counter++] = USART3->DR;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <slave_response+0xc8>)
 8000792:	6858      	ldr	r0, [r3, #4]
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <slave_response+0xc4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4929      	ldr	r1, [pc, #164]	; (8000840 <slave_response+0xc4>)
 800079c:	600a      	str	r2, [r1, #0]
 800079e:	b2c1      	uxtb	r1, r0
 80007a0:	4a29      	ldr	r2, [pc, #164]	; (8000848 <slave_response+0xcc>)
 80007a2:	4413      	add	r3, r2
 80007a4:	460a      	mov	r2, r1
 80007a6:	709a      	strb	r2, [r3, #2]
			return 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e047      	b.n	800083c <slave_response+0xc0>
		}else{
			salve_rx_msg.checksum = USART3->DR;
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <slave_response+0xc8>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <slave_response+0xcc>)
 80007b4:	731a      	strb	r2, [r3, #12]
			salve_rx_msg.length = slave_data_counter;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <slave_response+0xc4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <slave_response+0xcc>)
 80007be:	705a      	strb	r2, [r3, #1]
			slave_data_counter = -1; //reseting the counter
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <slave_response+0xc4>)
 80007c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c6:	601a      	str	r2, [r3, #0]
			if (checksum(salve_rx_msg.length,salve_rx_msg.data) == salve_rx_msg.checksum){
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <slave_response+0xcc>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	491f      	ldr	r1, [pc, #124]	; (800084c <slave_response+0xd0>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f860 	bl	8000894 <checksum>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <slave_response+0xcc>)
 80007da:	7b1b      	ldrb	r3, [r3, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d104      	bne.n	80007ea <slave_response+0x6e>
				Send_LIN_To_CAN(&salve_rx_msg);
 80007e0:	4819      	ldr	r0, [pc, #100]	; (8000848 <slave_response+0xcc>)
 80007e2:	f000 f8e9 	bl	80009b8 <Send_LIN_To_CAN>
				return 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e028      	b.n	800083c <slave_response+0xc0>
			}else{
				return -1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ee:	e025      	b.n	800083c <slave_response+0xc0>
			}
		}
	}
	if(sync_counter == -1){
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <slave_response+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007f8:	d10b      	bne.n	8000812 <slave_response+0x96>
		if(USART3->DR == 0x55){ //Check it is the sync byte (value 0x55)
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <slave_response+0xc8>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b55      	cmp	r3, #85	; 0x55
 8000800:	d104      	bne.n	800080c <slave_response+0x90>
			sync_counter = 0;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <slave_response+0xd4>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			return 1;
 8000808:	2301      	movs	r3, #1
 800080a:	e017      	b.n	800083c <slave_response+0xc0>
	    }else{
			return -1;
 800080c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000810:	e014      	b.n	800083c <slave_response+0xc0>
	    }
	}
	if(sync_counter == 0){ //We received the sync byte
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <slave_response+0xd4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d110      	bne.n	800083c <slave_response+0xc0>
		//TODO
		if (USART3->DR == SLAVE_ADDR_WRITE){ //If we recied a request for the RTC
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <slave_response+0xc8>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b73      	cmp	r3, #115	; 0x73
 8000820:	d103      	bne.n	800082a <slave_response+0xae>
			Send_RTC();
 8000822:	f000 f863 	bl	80008ec <Send_RTC>
			return 1;
 8000826:	2301      	movs	r3, #1
 8000828:	e008      	b.n	800083c <slave_response+0xc0>
		}else if (USART3->DR == SLAVE_ADDR_READ){
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <slave_response+0xc8>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b72      	cmp	r3, #114	; 0x72
 8000830:	d104      	bne.n	800083c <slave_response+0xc0>
			slave_data_counter = 0; //This will make us fetch the lin data
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <slave_response+0xc4>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
			return 1;
 8000838:	2301      	movs	r3, #1
 800083a:	e7ff      	b.n	800083c <slave_response+0xc0>
		}
		//ADD the different behavior as a slave based on the address
	}
}
 800083c:	4618      	mov	r0, r3
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000004 	.word	0x20000004
 8000844:	40004800 	.word	0x40004800
 8000848:	20000098 	.word	0x20000098
 800084c:	2000009a 	.word	0x2000009a
 8000850:	20000000 	.word	0x20000000

08000854 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data){
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART3->DR = data;
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <UART_PutChar+0x3c>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 8000864:	bf00      	nop
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <UART_PutChar+0x3c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <UART_PutChar+0x12>
	while(!(USART3->SR & 0x00000040));
 8000872:	bf00      	nop
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <UART_PutChar+0x3c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f9      	beq.n	8000874 <UART_PutChar+0x20>
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40004800 	.word	0x40004800

08000894 <checksum>:

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data){
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
	uint8_t ix;
	uint16_t check_sum = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	81bb      	strh	r3, [r7, #12]

	for(ix = 0; ix < length-1; ix++){
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e010      	b.n	80008cc <checksum+0x38>
		check_sum += data[ix];
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	81bb      	strh	r3, [r7, #12]
		if(check_sum >= 256){
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	2bff      	cmp	r3, #255	; 0xff
 80008be:	d902      	bls.n	80008c6 <checksum+0x32>
			check_sum -= 255;
 80008c0:	89bb      	ldrh	r3, [r7, #12]
 80008c2:	3bff      	subs	r3, #255	; 0xff
 80008c4:	81bb      	strh	r3, [r7, #12]
	for(ix = 0; ix < length-1; ix++){
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	3301      	adds	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbe9      	blt.n	80008aa <checksum+0x16>
		}
	}
	return (uint8_t)(0xff - check_sum);
 80008d6:	89bb      	ldrh	r3, [r7, #12]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <Send_RTC>:

void Send_RTC(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

	// Read date and time registers
	uint32_t time_tmp_reg = RTC->TR;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <Send_RTC+0xc8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	61fb      	str	r3, [r7, #28]
	uint32_t date_tmp_reg = RTC->DR;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <Send_RTC+0xc8>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	61bb      	str	r3, [r7, #24]

		// Extract values from saved register values
	uint8_t day = bcd_to_int((date_tmp_reg & (RTC_DR_DU | RTC_DR_DT)) >> RTC_DR_DU_Pos);
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fd42 	bl	8001392 <bcd_to_int>
 800090e:	4603      	mov	r3, r0
 8000910:	75fb      	strb	r3, [r7, #23]
	uint8_t month = bcd_to_int((date_tmp_reg & (RTC_DR_MU | RTC_DR_MT)) >> RTC_DR_MU_Pos);
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fd37 	bl	8001392 <bcd_to_int>
 8000924:	4603      	mov	r3, r0
 8000926:	75bb      	strb	r3, [r7, #22]
	uint8_t year = bcd_to_int((date_tmp_reg & (RTC_DR_YU | RTC_DR_YT)) >> RTC_DR_YU_Pos);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	0c1b      	lsrs	r3, r3, #16
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fd2f 	bl	8001392 <bcd_to_int>
 8000934:	4603      	mov	r3, r0
 8000936:	757b      	strb	r3, [r7, #21]
	uint8_t hour = bcd_to_int((time_tmp_reg & (RTC_TR_HU | RTC_TR_HT)) >> RTC_TR_HU_Pos);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	0c1b      	lsrs	r3, r3, #16
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd24 	bl	8001392 <bcd_to_int>
 800094a:	4603      	mov	r3, r0
 800094c:	753b      	strb	r3, [r7, #20]
	uint8_t min = bcd_to_int((time_tmp_reg & (RTC_TR_MNU | RTC_TR_MNT)) >> RTC_TR_MNU_Pos);
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fd19 	bl	8001392 <bcd_to_int>
 8000960:	4603      	mov	r3, r0
 8000962:	74fb      	strb	r3, [r7, #19]
	uint8_t sec = bcd_to_int((time_tmp_reg & (RTC_TR_SU | RTC_TR_ST)) >> RTC_TR_SU_Pos);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fd0f 	bl	8001392 <bcd_to_int>
 8000974:	4603      	mov	r3, r0
 8000976:	74bb      	strb	r3, [r7, #18]

	LINMSG response;
	response.length = 6;
 8000978:	2306      	movs	r3, #6
 800097a:	717b      	strb	r3, [r7, #5]
	response.data[0] = hour;
 800097c:	7d3b      	ldrb	r3, [r7, #20]
 800097e:	71bb      	strb	r3, [r7, #6]
	response.data[1] = min;
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	71fb      	strb	r3, [r7, #7]
	response.data[2] = sec;
 8000984:	7cbb      	ldrb	r3, [r7, #18]
 8000986:	723b      	strb	r3, [r7, #8]
	response.data[3] = day;
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	727b      	strb	r3, [r7, #9]
	response.data[4] = month;
 800098c:	7dbb      	ldrb	r3, [r7, #22]
 800098e:	72bb      	strb	r3, [r7, #10]
	response.data[5] = year;
 8000990:	7d7b      	ldrb	r3, [r7, #21]
 8000992:	72fb      	strb	r3, [r7, #11]
	response.checksum = checksum(6,response.data);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	3302      	adds	r3, #2
 8000998:	4619      	mov	r1, r3
 800099a:	2006      	movs	r0, #6
 800099c:	f7ff ff7a 	bl	8000894 <checksum>
 80009a0:	4603      	mov	r3, r0
 80009a2:	743b      	strb	r3, [r7, #16]
	SendResponse(&response);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fec6 	bl	8000738 <SendResponse>
}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40002800 	.word	0x40002800

080009b8 <Send_LIN_To_CAN>:

void Send_LIN_To_CAN(LINMSG* salve_rx_msg){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	CAN_frame can_linframe = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
	can_linframe.IDE = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	743b      	strb	r3, [r7, #16]
	can_linframe.ID = 0x11111111; //TODO maybe find another ID
 80009d2:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
 80009d6:	60fb      	str	r3, [r7, #12]
	can_linframe.RTR = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	747b      	strb	r3, [r7, #17]
	can_linframe.DLC = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	74bb      	strb	r3, [r7, #18]
	for (int i=0; i<salve_rx_msg->length;i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e00d      	b.n	8000a02 <Send_LIN_To_CAN+0x4a>
		can_linframe.data[i] = salve_rx_msg->data[i];
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	4413      	add	r3, r2
 80009ec:	3302      	adds	r3, #2
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	f107 0213 	add.w	r2, r7, #19
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<salve_rx_msg->length;i++){
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	3301      	adds	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	461a      	mov	r2, r3
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dbeb      	blt.n	80009e6 <Send_LIN_To_CAN+0x2e>
	}
	CAN_sendFrame(can_linframe);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a14:	f000 f9d4 	bl	8000dc0 <CAN_sendFrame>

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
		if(USART3->SR & USART_SR_RXNE || USART3->SR & USART_SR_LBD_Msk){
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <USART3_IRQHandler+0x24>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d105      	bne.n	8000a3c <USART3_IRQHandler+0x1c>
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <USART3_IRQHandler+0x24>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <USART3_IRQHandler+0x20>
			slave_response();
 8000a3c:	f7ff fe9e 	bl	800077c <slave_response>
		}

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40004800 	.word	0x40004800

08000a48 <__NVIC_EnableIRQ>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <CAN_Counter_Init>:

static GPIO_TypeDef * PB = GPIOB;
static CAN_frame Counter;
CircularBuffer* ReciveBuffer;

void CAN_Counter_Init(){
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	Counter.ID = 0x010;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <CAN_Counter_Init+0x2c>)
 8000ade:	2210      	movs	r2, #16
 8000ae0:	601a      	str	r2, [r3, #0]
	Counter.IDE = 0x0;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <CAN_Counter_Init+0x2c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	711a      	strb	r2, [r3, #4]
	Counter.RTR = 0;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <CAN_Counter_Init+0x2c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	715a      	strb	r2, [r3, #5]
	Counter.DLC = 1;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <CAN_Counter_Init+0x2c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	719a      	strb	r2, [r3, #6]
	Counter.data[0] = 0;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <CAN_Counter_Init+0x2c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	71da      	strb	r2, [r3, #7]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	200000a8 	.word	0x200000a8

08000b08 <CAN_GPIO_Init>:

void CAN_GPIO_Init(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	Configure_buttonInterrupt();
 8000b0c:	f000 f916 	bl	8000d3c <Configure_buttonInterrupt>
	RCC->AHB1ENR |= 0x2; //gpio clock activation for can gpio B
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //for the led gpio D
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<25); // can clock activation
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <CAN_GPIO_Init+0x9c>)
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40

	PB->MODER &=  ~(GPIO_MODER_MODER8_Msk |GPIO_MODER_MODER9_Msk); // set the Moder of pin 8 & 9 to 00
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000b42:	601a      	str	r2, [r3, #0]
	PB->MODER |=  (GPIO_MODER_MODER8_1 |GPIO_MODER_MODER9_1); // set the Moder of pin 8 & 9 to 10 aka Alternate fonction
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000b52:	601a      	str	r2, [r3, #0]

	PB->PUPDR &= ~(GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000b62:	60da      	str	r2, [r3, #12]
	PB->OSPEEDR |= 0xF << 16; //Set the pin 8 and 9 to 11 aka hight speed
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8000b72:	609a      	str	r2, [r3, #8]

	PB->AFR[1] &= ~0xFF;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
	PB->AFR[1] |= 0x99;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <CAN_GPIO_Init+0xa0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 0299 	orr.w	r2, r2, #153	; 0x99
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24

	//Config the pin as general output for the led
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <CAN_GPIO_Init+0xa4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <CAN_GPIO_Init+0xa4>)
 8000b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9e:	6013      	str	r3, [r2, #0]

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <CAN_config>:

void CAN_config(uint8_t IDE, uint8_t FBM, uint16_t Filter_ID_high, uint16_t Filter_ID_low, uint16_t Filter_Mask_high, uint16_t Filter_Mask_low){
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71bb      	strb	r3, [r7, #6]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	807b      	strh	r3, [r7, #2]
	ReciveBuffer = getNewBuffer();
 8000bce:	f000 faf3 	bl	80011b8 <getNewBuffer>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a56      	ldr	r2, [pc, #344]	; (8000d30 <CAN_config+0x180>)
 8000bd6:	6013      	str	r3, [r2, #0]
	//clear sleep bit
	CAN1->MCR &= ~(0x2);
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <CAN_config+0x184>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a55      	ldr	r2, [pc, #340]	; (8000d34 <CAN_config+0x184>)
 8000bde:	f023 0302 	bic.w	r3, r3, #2
 8000be2:	6013      	str	r3, [r2, #0]
	//wait for the can to wakeup
	while(CAN1->MSR & (0x2));
 8000be4:	bf00      	nop
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <CAN_config+0x184>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f9      	bne.n	8000be6 <CAN_config+0x36>
	//Set to config mode
	CAN1->MCR |= 0x1;
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <CAN_config+0x184>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a4f      	ldr	r2, [pc, #316]	; (8000d34 <CAN_config+0x184>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]

	while(!(CAN1->MSR & 0x1));
 8000bfe:	bf00      	nop
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <CAN_config+0x184>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f9      	beq.n	8000c00 <CAN_config+0x50>

	//Set all bit but config to 0 (maybe check it later for sleep mode ?)
	CAN1->MCR &= 0x1;
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <CAN_config+0x184>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <CAN_config+0x184>)
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

	// 250kbaus, loopback mode, BRP 16 10TQ
	//CAN1->BTR = 0x0403001B;
	CAN1->BTR = 0x40250010;
 8000c18:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <CAN_config+0x184>)
 8000c1a:	4a47      	ldr	r2, [pc, #284]	; (8000d38 <CAN_config+0x188>)
 8000c1c:	61da      	str	r2, [r3, #28]

	//Realase mail box (? Is it necessary (box empty ?))
	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <CAN_config+0x184>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <CAN_config+0x184>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	60d3      	str	r3, [r2, #12]

	//Enable interrupt on mailbox 0
	CAN1->IER |= 0x2;
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <CAN_config+0x184>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <CAN_config+0x184>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2014      	movs	r0, #20
 8000c3a:	f7ff ff23 	bl	8000a84 <__NVIC_SetPriority>
	//NVIC_SetPriority(CAN1_TX_IRQn,0);
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f7ff ff02 	bl	8000a48 <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_TX_IRQn);

	//set to normal mod
	CAN1->MCR &= ~(0x1);
 8000c44:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <CAN_config+0x184>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a3a      	ldr	r2, [pc, #232]	; (8000d34 <CAN_config+0x184>)
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]
	//wait for normal mod
	while((CAN1->MSR & 0x1));
 8000c50:	bf00      	nop
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <CAN_config+0x184>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <CAN_config+0xa2>

	//set filter in init mode
	CAN1->FMR |= (0x1); //Mask mode
 8000c5e:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <CAN_config+0x184>)
 8000c60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c64:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <CAN_config+0x184>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	CAN1->FA1R |= 0x1;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <CAN_config+0x184>)
 8000c70:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000c74:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <CAN_config+0x184>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Assign the message from filter 0 to FIFO0
	CAN1->FFA1R &= ~(0x1);
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <CAN_config+0x184>)
 8000c80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <CAN_config+0x184>)
 8000c86:	f023 0301 	bic.w	r3, r3, #1
 8000c8a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	if (FBM == 0){
 8000c8e:	79bb      	ldrb	r3, [r7, #6]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <CAN_config+0xf6>
		CAN1->FM1R &= ~(0x1); //Set filter 1 in mask mod
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <CAN_config+0x184>)
 8000c96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c9a:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <CAN_config+0x184>)
 8000c9c:	f023 0301 	bic.w	r3, r3, #1
 8000ca0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000ca4:	e007      	b.n	8000cb6 <CAN_config+0x106>
	}else{
		CAN1->FM1R |= 0x1; //Set filter 1 in list mod
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <CAN_config+0x184>)
 8000ca8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <CAN_config+0x184>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	// configure filter mode based on IDE
	if (IDE == 0){ // standard mode
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d116      	bne.n	8000cea <CAN_config+0x13a>
		CAN1->FS1R &= ~0x1; //activating filter 0 in 16bits
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <CAN_config+0x184>)
 8000cbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <CAN_config+0x184>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_Mask_low << 16 | Filter_ID_low);
 8000ccc:	8bbb      	ldrh	r3, [r7, #28]
 8000cce:	041a      	lsls	r2, r3, #16
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <CAN_config+0x184>)
 8000cd6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_ID_high);
 8000cda:	8b3b      	ldrh	r3, [r7, #24]
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <CAN_config+0x184>)
 8000ce4:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000ce8:	e015      	b.n	8000d16 <CAN_config+0x166>

	}else{ // extended mode
		CAN1->FS1R |= 0x1; //activating filter 0 32bits
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <CAN_config+0x184>)
 8000cec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <CAN_config+0x184>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 16 | Filter_ID_low);
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	041a      	lsls	r2, r3, #16
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <CAN_config+0x184>)
 8000d04:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_Mask_low);
 8000d08:	8b3b      	ldrh	r3, [r7, #24]
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	8bbb      	ldrh	r3, [r7, #28]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <CAN_config+0x184>)
 8000d12:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	}

	//Activate Filter 0
	CAN1->FMR &= ~(0x1);
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <CAN_config+0x184>)
 8000d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d1c:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <CAN_config+0x184>)
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000b8 	.word	0x200000b8
 8000d34:	40006400 	.word	0x40006400
 8000d38:	40250010 	.word	0x40250010

08000d3c <Configure_buttonInterrupt>:

void Configure_buttonInterrupt() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <Configure_buttonInterrupt+0x74>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <Configure_buttonInterrupt+0x74>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <Configure_buttonInterrupt+0x74>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <Configure_buttonInterrupt+0x74>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PA0 as input with pull-up
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);  // Clear mode bits
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <Configure_buttonInterrupt+0x78>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <Configure_buttonInterrupt+0x78>)
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);  // Clear pull-up/pull-down bits
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <Configure_buttonInterrupt+0x78>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <Configure_buttonInterrupt+0x78>)
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	60d3      	str	r3, [r2, #12]
    //GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;  // Set pull-up mode

    // Connect EXTI Line 0 to PA0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <Configure_buttonInterrupt+0x7c>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <Configure_buttonInterrupt+0x7c>)
 8000d76:	f023 030f 	bic.w	r3, r3, #15
 8000d7a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <Configure_buttonInterrupt+0x7c>)
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <Configure_buttonInterrupt+0x7c>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0 to interrupt on the rising edge
    EXTI->IMR |= EXTI_IMR_MR0;  // Enable interrupt on EXTI Line 0
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <Configure_buttonInterrupt+0x80>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <Configure_buttonInterrupt+0x80>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;  // Set falling edge trigger
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <Configure_buttonInterrupt+0x80>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <Configure_buttonInterrupt+0x80>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	60d3      	str	r3, [r2, #12]

    // Enable and set the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000d9c:	2006      	movs	r0, #6
 8000d9e:	f7ff fe53 	bl	8000a48 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000da2:	2100      	movs	r1, #0
 8000da4:	2006      	movs	r0, #6
 8000da6:	f7ff fe6d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40013c00 	.word	0x40013c00

08000dc0 <CAN_sendFrame>:


uint8_t CAN_sendFrame(CAN_frame CAN_mess){
 8000dc0:	b490      	push	{r4, r7}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	463c      	mov	r4, r7
 8000dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //Check if TxMailbox0 is empty
    if (CAN1->TSR & 0x04000000){
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d03f      	beq.n	8000e58 <CAN_sendFrame+0x98>
        //fill the mailbox
        //Writing the id and the RTR
        uint32_t id = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
        if (CAN_mess.IDE == 0) { // standard mode
 8000ddc:	793b      	ldrb	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <CAN_sendFrame+0x30>
            id = (CAN_mess.ID << 21) | (CAN_mess.RTR << 1);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	055b      	lsls	r3, r3, #21
 8000de6:	797a      	ldrb	r2, [r7, #5]
 8000de8:	0052      	lsls	r2, r2, #1
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e007      	b.n	8000e00 <CAN_sendFrame+0x40>
        }
        else { // extended mode
            id = (CAN_mess.ID << 3) | (CAN_mess.RTR << 1) | (1 << 2);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	797a      	ldrb	r2, [r7, #5]
 8000df6:	0052      	lsls	r2, r2, #1
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
        }
        CAN1->sTxMailBox[0].TIR = id;
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        CAN1->sTxMailBox[0].TDTR = CAN_mess.DLC;
 8000e08:	79ba      	ldrb	r2, [r7, #6]
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e0c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CAN1->sTxMailBox[0].TDLR = CAN_mess.data[3] << 24 | CAN_mess.data[2] << 16 | CAN_mess.data[1] << 8 | CAN_mess.data[0];
 8000e10:	7abb      	ldrb	r3, [r7, #10]
 8000e12:	061a      	lsls	r2, r3, #24
 8000e14:	7a7b      	ldrb	r3, [r7, #9]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	7a3b      	ldrb	r3, [r7, #8]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e26:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        CAN1->sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	061a      	lsls	r2, r3, #24
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	431a      	orrs	r2, r3
 8000e34:	7b3b      	ldrb	r3, [r7, #12]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	7afa      	ldrb	r2, [r7, #11]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e40:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        CAN1->sTxMailBox[0].TIR |= 1; //Send the message
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e46:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000e4a:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <CAN_sendFrame+0xa4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        return(1);
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <CAN_sendFrame+0x9a>
    }
    else return(0);
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc90      	pop	{r4, r7}
 8000e62:	4770      	bx	lr
 8000e64:	40006400 	.word	0x40006400

08000e68 <CAN1_RX0_IRQHandler>:


// Interrupt handler for CAN1 RX0
void CAN1_RX0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    if (CAN1->RF0R & CAN_RF0R_FMP0) // check if there is a message in the FIFO
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <CAN1_RX0_IRQHandler+0x24>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <CAN1_RX0_IRQHandler+0x20>
    {
        // call the receive callback function
        CAN_receiveCallback();
 8000e78:	f000 f894 	bl	8000fa4 <CAN_receiveCallback>
        // clear the message from the FIFO
        CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <CAN1_RX0_IRQHandler+0x24>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a02      	ldr	r2, [pc, #8]	; (8000e8c <CAN1_RX0_IRQHandler+0x24>)
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	60d3      	str	r3, [r2, #12]
    }
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40006400 	.word	0x40006400

08000e90 <CAN_frameToString>:

void CAN_frameToString(CAN_frame* frame, char* str) {
 8000e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e94:	b089      	sub	sp, #36	; 0x24
 8000e96:	af02      	add	r7, sp, #8
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	461e      	mov	r6, r3
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000ea8:	4618      	mov	r0, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	795b      	ldrb	r3, [r3, #5]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000eae:	4619      	mov	r1, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	799b      	ldrb	r3, [r3, #6]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	9100      	str	r1, [sp, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4926      	ldr	r1, [pc, #152]	; (8000f54 <CAN_frameToString+0xc4>)
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	f001 fbed 	bl	800269c <siprintf>

    char temp[frame->DLC];
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7999      	ldrb	r1, [r3, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	b2cb      	uxtb	r3, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ee0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ee4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ee8:	b2cb      	uxtb	r3, r1
 8000eea:	2200      	movs	r2, #0
 8000eec:	461c      	mov	r4, r3
 8000eee:	4615      	mov	r5, r2
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	00eb      	lsls	r3, r5, #3
 8000efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000efe:	00e2      	lsls	r2, r4, #3
 8000f00:	460b      	mov	r3, r1
 8000f02:	3307      	adds	r3, #7
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	ebad 0d03 	sub.w	sp, sp, r3
 8000f0c:	ab02      	add	r3, sp, #8
 8000f0e:	3300      	adds	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < frame->DLC; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e010      	b.n	8000f3a <CAN_frameToString+0xaa>
        sprintf(temp, "%02X ", frame->data[i]);
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3307      	adds	r3, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <CAN_frameToString+0xc8>)
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f001 fbb8 	bl	800269c <siprintf>
        strcat(str, temp);
 8000f2c:	68f9      	ldr	r1, [r7, #12]
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f001 fbd4 	bl	80026dc <strcat>
    for (int i = 0; i < frame->DLC; i++) {
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	799b      	ldrb	r3, [r3, #6]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	dbe8      	blt.n	8000f18 <CAN_frameToString+0x88>
 8000f46:	46b5      	mov	sp, r6
    }
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f52:	bf00      	nop
 8000f54:	08002dd0 	.word	0x08002dd0
 8000f58:	08002dfc 	.word	0x08002dfc

08000f5c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    if ((EXTI->PR & EXTI_PR_PR0) != 0) {
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <EXTI0_IRQHandler+0x24>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <EXTI0_IRQHandler+0x20>
        // Button is pressed
    	EXTI0_buttonpressCallback();
 8000f6c:	f000 f80a 	bl	8000f84 <EXTI0_buttonpressCallback>
        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <EXTI0_IRQHandler+0x24>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a02      	ldr	r2, [pc, #8]	; (8000f80 <EXTI0_IRQHandler+0x24>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6153      	str	r3, [r2, #20]

    }
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <EXTI0_buttonpressCallback>:

void EXTI0_buttonpressCallback(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	CAN_sendFrame(Counter);
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <EXTI0_buttonpressCallback+0x1c>)
 8000f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8c:	f7ff ff18 	bl	8000dc0 <CAN_sendFrame>
	Counter.data[0]+= 1;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <EXTI0_buttonpressCallback+0x1c>)
 8000f92:	79db      	ldrb	r3, [r3, #7]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b01      	ldr	r3, [pc, #4]	; (8000fa0 <EXTI0_buttonpressCallback+0x1c>)
 8000f9a:	71da      	strb	r2, [r3, #7]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000a8 	.word	0x200000a8

08000fa4 <CAN_receiveCallback>:


// Receive callback function to be implemented by user
void CAN_receiveCallback(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a0      	sub	sp, #128	; 0x80
 8000fa8:	af02      	add	r7, sp, #8
	CAN_frame CAN_mess;
	// read the message from the FIFO
	CAN_mess.IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) ? 1 : 0; // check if extended identifier
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <CAN_receiveCallback+0x164>)
 8000fac:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (CAN_mess.IDE == 0) { // standard identifier
 8000fc2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d107      	bne.n	8000fda <CAN_receiveCallback+0x36>
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF; //Fetch the 11bits ID
 8000fca:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <CAN_receiveCallback+0x164>)
 8000fcc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fd0:	0d5b      	lsrs	r3, r3, #21
 8000fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8000fd8:	e006      	b.n	8000fe8 <CAN_receiveCallback+0x44>
	}else { // extended identifier
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFF; //Fetch the 29 bit ID
 8000fda:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <CAN_receiveCallback+0x164>)
 8000fdc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000fe6:	663b      	str	r3, [r7, #96]	; 0x60
	}
	CAN_mess.RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) ? 1 : 0; //Is it a reception trame?
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <CAN_receiveCallback+0x164>)
 8000fea:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	CAN_mess.DLC = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <CAN_receiveCallback+0x164>)
 8001002:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	for (int i = 0; i < CAN_mess.DLC; i++){
 8001012:	2300      	movs	r3, #0
 8001014:	677b      	str	r3, [r7, #116]	; 0x74
 8001016:	e010      	b.n	800103a <CAN_receiveCallback+0x96>
		CAN_mess.data[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i*8)) & 0xFF;
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <CAN_receiveCallback+0x164>)
 800101a:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800101e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	b2d9      	uxtb	r1, r3
 8001028:	f107 0267 	add.w	r2, r7, #103	; 0x67
 800102c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800102e:	4413      	add	r3, r2
 8001030:	460a      	mov	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8001034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001036:	3301      	adds	r3, #1
 8001038:	677b      	str	r3, [r7, #116]	; 0x74
 800103a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800103e:	461a      	mov	r2, r3
 8001040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001042:	4293      	cmp	r3, r2
 8001044:	dbe8      	blt.n	8001018 <CAN_receiveCallback+0x74>
	}
	int overwrite = pushToBuffer(ReciveBuffer,(void**)&CAN_mess);
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <CAN_receiveCallback+0x168>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8ca 	bl	80011ea <pushToBuffer>
 8001056:	6738      	str	r0, [r7, #112]	; 0x70
	if (overwrite == 1){
 8001058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <CAN_receiveCallback+0xc0>
		serial_puts("Buffer is full, overwriting oldest message\r\n");
 800105e:	482c      	ldr	r0, [pc, #176]	; (8001110 <CAN_receiveCallback+0x16c>)
 8001060:	f000 fb64 	bl	800172c <serial_puts>
	}
	char stringbuffer[80];
	CAN_frameToString(&CAN_mess,stringbuffer);
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff0e 	bl	8000e90 <CAN_frameToString>
	serial_puts(stringbuffer);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fb57 	bl	800172c <serial_puts>
	newLine();
 800107e:	f000 fb71 	bl	8001764 <newLine>

	//5 checking frame with id 0x010
	if (CAN_mess.ID == 0x010){
 8001082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001084:	2b10      	cmp	r3, #16
 8001086:	d13b      	bne.n	8001100 <CAN_receiveCallback+0x15c>
		if (CAN_mess.RTR == 1){//5.2 Request with id 0x10
 8001088:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800108c:	2b01      	cmp	r3, #1
 800108e:	d116      	bne.n	80010be <CAN_receiveCallback+0x11a>
			serial_puts("Received request frame with ID 0x010\r\n");
 8001090:	4820      	ldr	r0, [pc, #128]	; (8001114 <CAN_receiveCallback+0x170>)
 8001092:	f000 fb4b 	bl	800172c <serial_puts>
			serial_puts("Sending led state trough can\r\n");
 8001096:	4820      	ldr	r0, [pc, #128]	; (8001118 <CAN_receiveCallback+0x174>)
 8001098:	f000 fb48 	bl	800172c <serial_puts>
			CAN_frame led_Frame;
			led_Frame.ID = 0x010;
 800109c:	2310      	movs	r3, #16
 800109e:	603b      	str	r3, [r7, #0]
			led_Frame.IDE = 0x0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	713b      	strb	r3, [r7, #4]
			led_Frame.RTR = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	717b      	strb	r3, [r7, #5]
			led_Frame.DLC = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	71bb      	strb	r3, [r7, #6]
			led_Frame.data[0] = readLEDState() ;
 80010ac:	f000 f83a 	bl	8001124 <readLEDState>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
			CAN_sendFrame(led_Frame);
 80010b4:	463b      	mov	r3, r7
 80010b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b8:	f7ff fe82 	bl	8000dc0 <CAN_sendFrame>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));

		}

	}
}
 80010bc:	e020      	b.n	8001100 <CAN_receiveCallback+0x15c>
			serial_puts("Received data frame with ID 0x010\r\n");
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <CAN_receiveCallback+0x178>)
 80010c0:	f000 fb34 	bl	800172c <serial_puts>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));
 80010c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010d2:	105b      	asrs	r3, r3, #1
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010dc:	109b      	asrs	r3, r3, #2
 80010de:	f003 0101 	and.w	r1, r3, #1
 80010e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010e6:	10db      	asrs	r3, r3, #3
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	460b      	mov	r3, r1
 80010f0:	4601      	mov	r1, r0
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <CAN_receiveCallback+0x17c>)
 80010f4:	f001 fad2 	bl	800269c <siprintf>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fb16 	bl	800172c <serial_puts>
}
 8001100:	bf00      	nop
 8001102:	3778      	adds	r7, #120	; 0x78
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40006400 	.word	0x40006400
 800110c:	200000b8 	.word	0x200000b8
 8001110:	08002e04 	.word	0x08002e04
 8001114:	08002e34 	.word	0x08002e34
 8001118:	08002e5c 	.word	0x08002e5c
 800111c:	08002e7c 	.word	0x08002e7c
 8001120:	08002ea0 	.word	0x08002ea0

08001124 <readLEDState>:

uint8_t readLEDState() {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  // Read the current state of the LEDs
  uint8_t ledState = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_12) ? 1 : 0; // Read Green LED state
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <readLEDState+0x90>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25a      	sxtb	r2, r3
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	4313      	orrs	r3, r2
 8001148:	b25b      	sxtb	r3, r3
 800114a:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_13) ? (1 << 1) : 0; // Read Orange LED state
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <readLEDState+0x90>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <readLEDState+0x38>
 8001158:	2302      	movs	r3, #2
 800115a:	e000      	b.n	800115e <readLEDState+0x3a>
 800115c:	2300      	movs	r3, #0
 800115e:	b25a      	sxtb	r2, r3
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4313      	orrs	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_14) ? (1 << 2) : 0; // Read Red LED state
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <readLEDState+0x90>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <readLEDState+0x56>
 8001176:	2304      	movs	r3, #4
 8001178:	e000      	b.n	800117c <readLEDState+0x58>
 800117a:	2300      	movs	r3, #0
 800117c:	b25a      	sxtb	r2, r3
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4313      	orrs	r3, r2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_15) ? (1 << 3) : 0; // Read Blue LED state
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <readLEDState+0x90>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <readLEDState+0x74>
 8001194:	2308      	movs	r3, #8
 8001196:	e000      	b.n	800119a <readLEDState+0x76>
 8001198:	2300      	movs	r3, #0
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	71fb      	strb	r3, [r7, #7]

  return ledState;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <getNewBuffer>:
	int readIndex;
	int writeIndex;
	int bufferLenght;
}CircularBuffer;

CircularBuffer* getNewBuffer(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  CircularBuffer* newbuffer = (CircularBuffer*) malloc(sizeof(CircularBuffer));
 80011be:	20ac      	movs	r0, #172	; 0xac
 80011c0:	f001 f96c 	bl	800249c <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	607b      	str	r3, [r7, #4]
  newbuffer->readIndex = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  newbuffer->writeIndex = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  newbuffer->bufferLenght = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  return newbuffer;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <pushToBuffer>:

int pushToBuffer(CircularBuffer *buffer, void* frame){
 80011ea:	b490      	push	{r4, r7}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  if(buffer->bufferLenght == 10){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d101      	bne.n	8001202 <pushToBuffer+0x18>
    //Buffer plein
    return 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	e023      	b.n	800124a <pushToBuffer+0x60>
  }

  buffer->frameBuffer[buffer->writeIndex] = *(CAN_frame*)frame;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	441a      	add	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4614      	mov	r4, r2
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  buffer->bufferLenght++;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  if(buffer->writeIndex == 10){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d104      	bne.n	800123a <pushToBuffer+0x50>
    buffer->writeIndex = 0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8001238:	e006      	b.n	8001248 <pushToBuffer+0x5e>
  }else{
    buffer->writeIndex++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  }
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bc90      	pop	{r4, r7}
 8001252:	4770      	bx	lr

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	CAN_frame frame;

	// Initialiser les champs de la structure
	frame.ID = 0x524010;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <main+0x5c>)
 800125c:	603b      	str	r3, [r7, #0]
	frame.IDE = 0x1;
 800125e:	2301      	movs	r3, #1
 8001260:	713b      	strb	r3, [r7, #4]
	frame.RTR = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	717b      	strb	r3, [r7, #5]
	frame.DLC = 4;
 8001266:	2304      	movs	r3, #4
 8001268:	71bb      	strb	r3, [r7, #6]
	frame.data[0] = 0xAA;
 800126a:	23aa      	movs	r3, #170	; 0xaa
 800126c:	71fb      	strb	r3, [r7, #7]
	frame.data[1] = 0xBB;
 800126e:	23bb      	movs	r3, #187	; 0xbb
 8001270:	723b      	strb	r3, [r7, #8]
	frame.data[2] = 0xCC;
 8001272:	23cc      	movs	r3, #204	; 0xcc
 8001274:	727b      	strb	r3, [r7, #9]
	frame.data[3] = 0xDD;
 8001276:	23dd      	movs	r3, #221	; 0xdd
 8001278:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fb05 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f819 	bl	80012b4 <SystemClock_Config>
  init_usart_int();
 8001282:	f000 f9c7 	bl	8001614 <init_usart_int>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  CAN_GPIO_Init();
 8001286:	f7ff fc3f 	bl	8000b08 <CAN_GPIO_Init>
  CAN_Counter_Init();
 800128a:	f7ff fc25 	bl	8000ad8 <CAN_Counter_Init>
  UART_Init();
 800128e:	f7ff f98f 	bl	80005b0 <UART_Init>
  //UART_Init_test();

  //2.3
  //32bit mode, list mode
  //ID = 0x010,standard ID, accept both data and request frame
  CAN_config(1,1,(0x10 << 5),0x2,(0x10 << 5),0x00);
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2302      	movs	r3, #2
 800129e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a2:	2101      	movs	r1, #1
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fc83 	bl	8000bb0 <CAN_config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012aa:	b662      	cpsie	i
}
 80012ac:	bf00      	nop

  /* USER CODE END 2 */
  __enable_irq();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80012ae:	e7fe      	b.n	80012ae <main+0x5a>
 80012b0:	00524010 	.word	0x00524010

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f8f2 	bl	80024ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <SystemClock_Config+0xcc>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <SystemClock_Config+0xd0>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001324:	2308      	movs	r3, #8
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001328:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001332:	2307      	movs	r3, #7
 8001334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fc20 	bl	8001b80 <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001346:	f000 f81f 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800135a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2105      	movs	r1, #5
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fe81 	bl	8002070 <HAL_RCC_ClockConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001374:	f000 f808 	bl	8001388 <Error_Handler>
  }
}
 8001378:	bf00      	nop
 800137a:	3750      	adds	r7, #80	; 0x50
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>

08001392 <bcd_to_int>:
  * @brief Turn an 8-bit bcd number into an 8-bit binary number
  * @param bcd the binary coded decimal number
  * @retval n the binary number
  */
uint8_t bcd_to_int(uint8_t bcd)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
	uint8_t n_t = (bcd & 0xF0) >> 4;
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	73fb      	strb	r3, [r7, #15]
	uint8_t n_u = (bcd & 0x0F);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	73bb      	strb	r3, [r7, #14]
	uint8_t n = (n_t*10 + n_u);
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	461a      	mov	r2, r3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	4413      	add	r3, r2
 80013ba:	737b      	strb	r3, [r7, #13]
	return n;
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140a:	2007      	movs	r0, #7
 800140c:	f000 fb84 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 fa60 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f000 ffd2 	bl	8002448 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200000bc 	.word	0x200000bc
 80014d8:	200000e8 	.word	0x200000e8

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <init_usart_int>:

	HAL_Delay(1);
}

// USART2 Initialization with Rx interrupt
void init_usart_int(void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <init_usart_int+0xcc>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <init_usart_int+0xcc>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	GPIOA->MODER |= 0x000000A0;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <init_usart_int+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <init_usart_int+0xd0>)
 800162a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800162e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <init_usart_int+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <init_usart_int+0xd0>)
 8001636:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800163a:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <init_usart_int+0xd0>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <init_usart_int+0xd0>)
 8001642:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 8001646:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <init_usart_int+0xd0>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <init_usart_int+0xd0>)
 800164e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001652:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <init_usart_int+0xd0>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <init_usart_int+0xd0>)
 800165a:	f023 030c 	bic.w	r3, r3, #12
 800165e:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <init_usart_int+0xd0>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <init_usart_int+0xd0>)
 8001666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800166a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <init_usart_int+0xd0>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <init_usart_int+0xd0>)
 8001672:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001676:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <init_usart_int+0xd0>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <init_usart_int+0xd0>)
 800167e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001682:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <init_usart_int+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <init_usart_int+0xcc>)
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity, Rx interrupt enable
	//Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <init_usart_int+0xd4>)
 8001692:	f248 022c 	movw	r2, #32812	; 0x802c
 8001696:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <init_usart_int+0xd4>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <init_usart_int+0xd4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <init_usart_int+0xd4>)
 80016a6:	f241 1217 	movw	r2, #4375	; 0x1117
 80016aa:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A02C;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <init_usart_int+0xd4>)
 80016ae:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80016b2:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 f959 	bl	800196c <HAL_Delay>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016ba:	f7ff ff21 	bl	8001500 <__NVIC_GetPriorityGrouping>
 80016be:	4603      	mov	r3, r0
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff71 	bl	80015ac <NVIC_EncodePriority>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	2026      	movs	r0, #38	; 0x26
 80016d0:	f7ff ff42 	bl	8001558 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f7ff ff21 	bl	800151c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40004400 	.word	0x40004400

080016ec <serial_putc>:

void serial_putc(char c)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <serial_putc+0x3c>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 80016fc:	bf00      	nop
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <serial_putc+0x3c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f9      	beq.n	80016fe <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 800170a:	bf00      	nop
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <serial_putc+0x3c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f9      	beq.n	800170c <serial_putc+0x20>
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40004400 	.word	0x40004400

0800172c <serial_puts>:

void serial_puts( char *msg)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001738:	e009      	b.n	800174e <serial_puts+0x22>
		serial_putc(msg[cnt]);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffd2 	bl	80016ec <serial_putc>
		cnt++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ef      	bne.n	800173a <serial_puts+0xe>
	}
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <newLine>:

void newLine()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001768:	200a      	movs	r0, #10
 800176a:	f7ff ffbf 	bl	80016ec <serial_putc>
	serial_putc(13); // retour chariot
 800176e:	200d      	movs	r0, #13
 8001770:	f7ff ffbc 	bl	80016ec <serial_putc>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <USART2_IRQHandler>:

	chaine[i]='\0';
	return(chaine);
}

void USART2_IRQHandler(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  // Check if the RXNE (Receive Data Register Not Empty) flag is set
  if (USART2->SR & USART_SR_RXNE) {
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <USART2_IRQHandler+0x84>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d034      	beq.n	80017f4 <USART2_IRQHandler+0x7c>
    // Read the received data
    char data = USART2->DR;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <USART2_IRQHandler+0x84>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	71fb      	strb	r3, [r7, #7]
    // Store the received character in the buffer
    rxBuffer[rxIndex] = data;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <USART2_IRQHandler+0x88>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	491b      	ldr	r1, [pc, #108]	; (8001804 <USART2_IRQHandler+0x8c>)
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	54ca      	strb	r2, [r1, r3]
    // Check for the word "trame"
    if (rxIndex > 3 && rxBuffer[rxIndex] == 'e' &&  rxBuffer[rxIndex - 1] == 'm' && rxBuffer[rxIndex - 2] == 'a' && rxBuffer[rxIndex - 3] == 'r' && rxBuffer[rxIndex - 4] == 't') {
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <USART2_IRQHandler+0x88>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	dd23      	ble.n	80017ea <USART2_IRQHandler+0x72>
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <USART2_IRQHandler+0x88>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <USART2_IRQHandler+0x8c>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	2b65      	cmp	r3, #101	; 0x65
 80017ac:	d11d      	bne.n	80017ea <USART2_IRQHandler+0x72>
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <USART2_IRQHandler+0x88>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <USART2_IRQHandler+0x8c>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	2b6d      	cmp	r3, #109	; 0x6d
 80017ba:	d116      	bne.n	80017ea <USART2_IRQHandler+0x72>
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <USART2_IRQHandler+0x88>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b02      	subs	r3, #2
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <USART2_IRQHandler+0x8c>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	2b61      	cmp	r3, #97	; 0x61
 80017c8:	d10f      	bne.n	80017ea <USART2_IRQHandler+0x72>
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <USART2_IRQHandler+0x88>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3b03      	subs	r3, #3
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <USART2_IRQHandler+0x8c>)
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	2b72      	cmp	r3, #114	; 0x72
 80017d6:	d108      	bne.n	80017ea <USART2_IRQHandler+0x72>
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <USART2_IRQHandler+0x88>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b04      	subs	r3, #4
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <USART2_IRQHandler+0x8c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	2b74      	cmp	r3, #116	; 0x74
 80017e4:	d101      	bne.n	80017ea <USART2_IRQHandler+0x72>
    	handleTrameReceived();
 80017e6:	f000 f80f 	bl	8001808 <handleTrameReceived>
    }

    // Increment the buffer index
    rxIndex += 1 % 12;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <USART2_IRQHandler+0x88>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a03      	ldr	r2, [pc, #12]	; (8001800 <USART2_IRQHandler+0x88>)
 80017f2:	6013      	str	r3, [r2, #0]
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40004400 	.word	0x40004400
 8001800:	200000cc 	.word	0x200000cc
 8001804:	200000c0 	.word	0x200000c0

08001808 <handleTrameReceived>:
void handleTrameReceived(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	CAN_frame trame;
	trame.ID = 0x010;
 800180e:	2310      	movs	r3, #16
 8001810:	603b      	str	r3, [r7, #0]
	trame.IDE = 0x0;
 8001812:	2300      	movs	r3, #0
 8001814:	713b      	strb	r3, [r7, #4]
	trame.RTR = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	717b      	strb	r3, [r7, #5]
	trame.DLC = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	71bb      	strb	r3, [r7, #6]
	trame.data[0] = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
	CAN_sendFrame(trame);
 8001822:	463b      	mov	r3, r7
 8001824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001826:	f7ff facb 	bl	8000dc0 <CAN_sendFrame>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185e:	f7ff fe3d 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f000 fdf7 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fcf5 	bl	8001254 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001878:	08002f18 	.word	0x08002f18
  ldr r2, =_sbss
 800187c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001880:	200000e4 	.word	0x200000e4

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f931 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fd86 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f93b 	bl	8001b66 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 f911 	bl	8001b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000014 	.word	0x20000014
 8001928:	20000010 	.word	0x20000010

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000014 	.word	0x20000014
 8001950:	200000d0 	.word	0x200000d0

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	200000d0 	.word	0x200000d0

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000014 	.word	0x20000014

080019b4 <__NVIC_SetPriorityGrouping>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_SetPriority>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff47 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff5c 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff8e 	bl	8001a6c <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5d 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffb0 	bl	8001ad4 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e267      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d075      	beq.n	8001c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d112      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc2:	d10b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d05b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x108>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d157      	bne.n	8001c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e242      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d106      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x74>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x98>
 8001bfe:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001c18:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a68      	ldr	r2, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fe8c 	bl	8001954 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fe88 	bl	8001954 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e207      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xc0>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fe78 	bl	8001954 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fe74 	bl	8001954 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1f3      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0xe8>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cae:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x152>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c7      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x244>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fe2d 	bl	8001954 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fe29 	bl	8001954 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a8      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4925      	ldr	r1, [pc, #148]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x244>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fe0c 	bl	8001954 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fe08 	bl	8001954 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e187      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d036      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x248>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff fdec 	bl	8001954 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff fde8 	bl	8001954 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e167      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x200>
 8001d9e:	e01b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x248>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fdd5 	bl	8001954 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	e00e      	b.n	8001dcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff fdd1 	bl	8001954 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d907      	bls.n	8001dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e150      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470000 	.word	0x42470000
 8001dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ea      	bne.n	8001dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8097 	beq.w	8001f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a7c      	ldr	r2, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a73      	ldr	r2, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fd91 	bl	8001954 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff fd8d 	bl	8001954 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e10c      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2ea>
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a63      	ldr	r2, [pc, #396]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x324>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x30c>
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a5b      	ldr	r2, [pc, #364]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x324>
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fd52 	bl	8001954 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fd4e 	bl	8001954 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0cb      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ee      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x334>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fd3c 	bl	8001954 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fd38 	bl	8001954 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0b5      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ee      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a1 	beq.w	8002060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d05c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d141      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fd0c 	bl	8001954 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fd08 	bl	8001954 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e087      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	491b      	ldr	r1, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fce1 	bl	8001954 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff fcdd 	bl	8001954 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e05c      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x416>
 8001fb4:	e054      	b.n	8002060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fcca 	bl	8001954 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff fcc6 	bl	8001954 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e045      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x444>
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e038      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4ec>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d028      	beq.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d121      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11a      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002034:	4293      	cmp	r3, r2
 8002036:	d111      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0cc      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b68      	ldr	r3, [pc, #416]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d90c      	bls.n	80020ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d044      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d119      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	2b03      	cmp	r3, #3
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e067      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4934      	ldr	r1, [pc, #208]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7ff fbf8 	bl	8001954 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7ff fbf4 	bl	8001954 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d20c      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fb58 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00
 800222c:	40023800 	.word	0x40023800
 8002230:	08002ec4 	.word	0x08002ec4
 8002234:	2000000c 	.word	0x2000000c
 8002238:	20000010 	.word	0x20000010

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002240:	b094      	sub	sp, #80	; 0x50
 8002242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	647b      	str	r3, [r7, #68]	; 0x44
 8002248:	2300      	movs	r3, #0
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800224c:	2300      	movs	r3, #0
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d00d      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x40>
 8002260:	2b08      	cmp	r3, #8
 8002262:	f200 80e1 	bhi.w	8002428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x34>
 800226a:	2b04      	cmp	r3, #4
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x3a>
 800226e:	e0db      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_GetSysClockFreq+0x204>)
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002274:	e0db      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002276:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCC_GetSysClockFreq+0x208>)
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227a:	e0d8      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002292:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	2200      	movs	r2, #0
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
 800229c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4621      	mov	r1, r4
 80022c8:	1a51      	subs	r1, r2, r1
 80022ca:	6139      	str	r1, [r7, #16]
 80022cc:	4629      	mov	r1, r5
 80022ce:	eb63 0301 	sbc.w	r3, r3, r1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e0:	4659      	mov	r1, fp
 80022e2:	018b      	lsls	r3, r1, #6
 80022e4:	4651      	mov	r1, sl
 80022e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ea:	4651      	mov	r1, sl
 80022ec:	018a      	lsls	r2, r1, #6
 80022ee:	4651      	mov	r1, sl
 80022f0:	ebb2 0801 	subs.w	r8, r2, r1
 80022f4:	4659      	mov	r1, fp
 80022f6:	eb63 0901 	sbc.w	r9, r3, r1
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230e:	4690      	mov	r8, r2
 8002310:	4699      	mov	r9, r3
 8002312:	4623      	mov	r3, r4
 8002314:	eb18 0303 	adds.w	r3, r8, r3
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	462b      	mov	r3, r5
 800231c:	eb49 0303 	adc.w	r3, r9, r3
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800232e:	4629      	mov	r1, r5
 8002330:	024b      	lsls	r3, r1, #9
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002338:	4621      	mov	r1, r4
 800233a:	024a      	lsls	r2, r1, #9
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	2200      	movs	r2, #0
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
 8002346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234c:	f7fd ff90 	bl	8000270 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002358:	e058      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	4618      	mov	r0, r3
 8002364:	4611      	mov	r1, r2
 8002366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002386:	0150      	lsls	r0, r2, #5
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4641      	mov	r1, r8
 800238e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb63 0b01 	sbc.w	fp, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ac:	ebb2 040a 	subs.w	r4, r2, sl
 80023b0:	eb63 050b 	sbc.w	r5, r3, fp
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	464b      	mov	r3, r9
 80023d0:	eb45 0303 	adc.w	r3, r5, r3
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e2:	4629      	mov	r1, r5
 80023e4:	028b      	lsls	r3, r1, #10
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ec:	4621      	mov	r1, r4
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	2200      	movs	r2, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	61fa      	str	r2, [r7, #28]
 80023fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002400:	f7fd ff36 	bl	8000270 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800241c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002426:	e002      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetSysClockFreq+0x204>)
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002430:	4618      	mov	r0, r3
 8002432:	3750      	adds	r7, #80	; 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <__errno>:
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <__errno+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000018 	.word	0x20000018

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	4d0d      	ldr	r5, [pc, #52]	; (800248c <__libc_init_array+0x38>)
 8002458:	4c0d      	ldr	r4, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245a:	1b64      	subs	r4, r4, r5
 800245c:	10a4      	asrs	r4, r4, #2
 800245e:	2600      	movs	r6, #0
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	4d0b      	ldr	r5, [pc, #44]	; (8002494 <__libc_init_array+0x40>)
 8002466:	4c0c      	ldr	r4, [pc, #48]	; (8002498 <__libc_init_array+0x44>)
 8002468:	f000 fca6 	bl	8002db8 <_init>
 800246c:	1b64      	subs	r4, r4, r5
 800246e:	10a4      	asrs	r4, r4, #2
 8002470:	2600      	movs	r6, #0
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	08002f10 	.word	0x08002f10
 8002490:	08002f10 	.word	0x08002f10
 8002494:	08002f10 	.word	0x08002f10
 8002498:	08002f14 	.word	0x08002f14

0800249c <malloc>:
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <malloc+0xc>)
 800249e:	4601      	mov	r1, r0
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	f000 b877 	b.w	8002594 <_malloc_r>
 80024a6:	bf00      	nop
 80024a8:	20000018 	.word	0x20000018

080024ac <memset>:
 80024ac:	4402      	add	r2, r0
 80024ae:	4603      	mov	r3, r0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d100      	bne.n	80024b6 <memset+0xa>
 80024b4:	4770      	bx	lr
 80024b6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ba:	e7f9      	b.n	80024b0 <memset+0x4>

080024bc <_free_r>:
 80024bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024be:	2900      	cmp	r1, #0
 80024c0:	d044      	beq.n	800254c <_free_r+0x90>
 80024c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024c6:	9001      	str	r0, [sp, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f1a1 0404 	sub.w	r4, r1, #4
 80024ce:	bfb8      	it	lt
 80024d0:	18e4      	addlt	r4, r4, r3
 80024d2:	f000 f913 	bl	80026fc <__malloc_lock>
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <_free_r+0x94>)
 80024d8:	9801      	ldr	r0, [sp, #4]
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	b933      	cbnz	r3, 80024ec <_free_r+0x30>
 80024de:	6063      	str	r3, [r4, #4]
 80024e0:	6014      	str	r4, [r2, #0]
 80024e2:	b003      	add	sp, #12
 80024e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024e8:	f000 b90e 	b.w	8002708 <__malloc_unlock>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d908      	bls.n	8002502 <_free_r+0x46>
 80024f0:	6825      	ldr	r5, [r4, #0]
 80024f2:	1961      	adds	r1, r4, r5
 80024f4:	428b      	cmp	r3, r1
 80024f6:	bf01      	itttt	eq
 80024f8:	6819      	ldreq	r1, [r3, #0]
 80024fa:	685b      	ldreq	r3, [r3, #4]
 80024fc:	1949      	addeq	r1, r1, r5
 80024fe:	6021      	streq	r1, [r4, #0]
 8002500:	e7ed      	b.n	80024de <_free_r+0x22>
 8002502:	461a      	mov	r2, r3
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b10b      	cbz	r3, 800250c <_free_r+0x50>
 8002508:	42a3      	cmp	r3, r4
 800250a:	d9fa      	bls.n	8002502 <_free_r+0x46>
 800250c:	6811      	ldr	r1, [r2, #0]
 800250e:	1855      	adds	r5, r2, r1
 8002510:	42a5      	cmp	r5, r4
 8002512:	d10b      	bne.n	800252c <_free_r+0x70>
 8002514:	6824      	ldr	r4, [r4, #0]
 8002516:	4421      	add	r1, r4
 8002518:	1854      	adds	r4, r2, r1
 800251a:	42a3      	cmp	r3, r4
 800251c:	6011      	str	r1, [r2, #0]
 800251e:	d1e0      	bne.n	80024e2 <_free_r+0x26>
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	6053      	str	r3, [r2, #4]
 8002526:	4421      	add	r1, r4
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	e7da      	b.n	80024e2 <_free_r+0x26>
 800252c:	d902      	bls.n	8002534 <_free_r+0x78>
 800252e:	230c      	movs	r3, #12
 8002530:	6003      	str	r3, [r0, #0]
 8002532:	e7d6      	b.n	80024e2 <_free_r+0x26>
 8002534:	6825      	ldr	r5, [r4, #0]
 8002536:	1961      	adds	r1, r4, r5
 8002538:	428b      	cmp	r3, r1
 800253a:	bf04      	itt	eq
 800253c:	6819      	ldreq	r1, [r3, #0]
 800253e:	685b      	ldreq	r3, [r3, #4]
 8002540:	6063      	str	r3, [r4, #4]
 8002542:	bf04      	itt	eq
 8002544:	1949      	addeq	r1, r1, r5
 8002546:	6021      	streq	r1, [r4, #0]
 8002548:	6054      	str	r4, [r2, #4]
 800254a:	e7ca      	b.n	80024e2 <_free_r+0x26>
 800254c:	b003      	add	sp, #12
 800254e:	bd30      	pop	{r4, r5, pc}
 8002550:	200000d4 	.word	0x200000d4

08002554 <sbrk_aligned>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	4e0e      	ldr	r6, [pc, #56]	; (8002590 <sbrk_aligned+0x3c>)
 8002558:	460c      	mov	r4, r1
 800255a:	6831      	ldr	r1, [r6, #0]
 800255c:	4605      	mov	r5, r0
 800255e:	b911      	cbnz	r1, 8002566 <sbrk_aligned+0x12>
 8002560:	f000 f88c 	bl	800267c <_sbrk_r>
 8002564:	6030      	str	r0, [r6, #0]
 8002566:	4621      	mov	r1, r4
 8002568:	4628      	mov	r0, r5
 800256a:	f000 f887 	bl	800267c <_sbrk_r>
 800256e:	1c43      	adds	r3, r0, #1
 8002570:	d00a      	beq.n	8002588 <sbrk_aligned+0x34>
 8002572:	1cc4      	adds	r4, r0, #3
 8002574:	f024 0403 	bic.w	r4, r4, #3
 8002578:	42a0      	cmp	r0, r4
 800257a:	d007      	beq.n	800258c <sbrk_aligned+0x38>
 800257c:	1a21      	subs	r1, r4, r0
 800257e:	4628      	mov	r0, r5
 8002580:	f000 f87c 	bl	800267c <_sbrk_r>
 8002584:	3001      	adds	r0, #1
 8002586:	d101      	bne.n	800258c <sbrk_aligned+0x38>
 8002588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800258c:	4620      	mov	r0, r4
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	200000d8 	.word	0x200000d8

08002594 <_malloc_r>:
 8002594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002598:	1ccd      	adds	r5, r1, #3
 800259a:	f025 0503 	bic.w	r5, r5, #3
 800259e:	3508      	adds	r5, #8
 80025a0:	2d0c      	cmp	r5, #12
 80025a2:	bf38      	it	cc
 80025a4:	250c      	movcc	r5, #12
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	4607      	mov	r7, r0
 80025aa:	db01      	blt.n	80025b0 <_malloc_r+0x1c>
 80025ac:	42a9      	cmp	r1, r5
 80025ae:	d905      	bls.n	80025bc <_malloc_r+0x28>
 80025b0:	230c      	movs	r3, #12
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	2600      	movs	r6, #0
 80025b6:	4630      	mov	r0, r6
 80025b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025bc:	4e2e      	ldr	r6, [pc, #184]	; (8002678 <_malloc_r+0xe4>)
 80025be:	f000 f89d 	bl	80026fc <__malloc_lock>
 80025c2:	6833      	ldr	r3, [r6, #0]
 80025c4:	461c      	mov	r4, r3
 80025c6:	bb34      	cbnz	r4, 8002616 <_malloc_r+0x82>
 80025c8:	4629      	mov	r1, r5
 80025ca:	4638      	mov	r0, r7
 80025cc:	f7ff ffc2 	bl	8002554 <sbrk_aligned>
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	4604      	mov	r4, r0
 80025d4:	d14d      	bne.n	8002672 <_malloc_r+0xde>
 80025d6:	6834      	ldr	r4, [r6, #0]
 80025d8:	4626      	mov	r6, r4
 80025da:	2e00      	cmp	r6, #0
 80025dc:	d140      	bne.n	8002660 <_malloc_r+0xcc>
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	4631      	mov	r1, r6
 80025e2:	4638      	mov	r0, r7
 80025e4:	eb04 0803 	add.w	r8, r4, r3
 80025e8:	f000 f848 	bl	800267c <_sbrk_r>
 80025ec:	4580      	cmp	r8, r0
 80025ee:	d13a      	bne.n	8002666 <_malloc_r+0xd2>
 80025f0:	6821      	ldr	r1, [r4, #0]
 80025f2:	3503      	adds	r5, #3
 80025f4:	1a6d      	subs	r5, r5, r1
 80025f6:	f025 0503 	bic.w	r5, r5, #3
 80025fa:	3508      	adds	r5, #8
 80025fc:	2d0c      	cmp	r5, #12
 80025fe:	bf38      	it	cc
 8002600:	250c      	movcc	r5, #12
 8002602:	4629      	mov	r1, r5
 8002604:	4638      	mov	r0, r7
 8002606:	f7ff ffa5 	bl	8002554 <sbrk_aligned>
 800260a:	3001      	adds	r0, #1
 800260c:	d02b      	beq.n	8002666 <_malloc_r+0xd2>
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	442b      	add	r3, r5
 8002612:	6023      	str	r3, [r4, #0]
 8002614:	e00e      	b.n	8002634 <_malloc_r+0xa0>
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	1b52      	subs	r2, r2, r5
 800261a:	d41e      	bmi.n	800265a <_malloc_r+0xc6>
 800261c:	2a0b      	cmp	r2, #11
 800261e:	d916      	bls.n	800264e <_malloc_r+0xba>
 8002620:	1961      	adds	r1, r4, r5
 8002622:	42a3      	cmp	r3, r4
 8002624:	6025      	str	r5, [r4, #0]
 8002626:	bf18      	it	ne
 8002628:	6059      	strne	r1, [r3, #4]
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	bf08      	it	eq
 800262e:	6031      	streq	r1, [r6, #0]
 8002630:	5162      	str	r2, [r4, r5]
 8002632:	604b      	str	r3, [r1, #4]
 8002634:	4638      	mov	r0, r7
 8002636:	f104 060b 	add.w	r6, r4, #11
 800263a:	f000 f865 	bl	8002708 <__malloc_unlock>
 800263e:	f026 0607 	bic.w	r6, r6, #7
 8002642:	1d23      	adds	r3, r4, #4
 8002644:	1af2      	subs	r2, r6, r3
 8002646:	d0b6      	beq.n	80025b6 <_malloc_r+0x22>
 8002648:	1b9b      	subs	r3, r3, r6
 800264a:	50a3      	str	r3, [r4, r2]
 800264c:	e7b3      	b.n	80025b6 <_malloc_r+0x22>
 800264e:	6862      	ldr	r2, [r4, #4]
 8002650:	42a3      	cmp	r3, r4
 8002652:	bf0c      	ite	eq
 8002654:	6032      	streq	r2, [r6, #0]
 8002656:	605a      	strne	r2, [r3, #4]
 8002658:	e7ec      	b.n	8002634 <_malloc_r+0xa0>
 800265a:	4623      	mov	r3, r4
 800265c:	6864      	ldr	r4, [r4, #4]
 800265e:	e7b2      	b.n	80025c6 <_malloc_r+0x32>
 8002660:	4634      	mov	r4, r6
 8002662:	6876      	ldr	r6, [r6, #4]
 8002664:	e7b9      	b.n	80025da <_malloc_r+0x46>
 8002666:	230c      	movs	r3, #12
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4638      	mov	r0, r7
 800266c:	f000 f84c 	bl	8002708 <__malloc_unlock>
 8002670:	e7a1      	b.n	80025b6 <_malloc_r+0x22>
 8002672:	6025      	str	r5, [r4, #0]
 8002674:	e7de      	b.n	8002634 <_malloc_r+0xa0>
 8002676:	bf00      	nop
 8002678:	200000d4 	.word	0x200000d4

0800267c <_sbrk_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4d06      	ldr	r5, [pc, #24]	; (8002698 <_sbrk_r+0x1c>)
 8002680:	2300      	movs	r3, #0
 8002682:	4604      	mov	r4, r0
 8002684:	4608      	mov	r0, r1
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	f7fe fef2 	bl	8001470 <_sbrk>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d102      	bne.n	8002696 <_sbrk_r+0x1a>
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	b103      	cbz	r3, 8002696 <_sbrk_r+0x1a>
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	bd38      	pop	{r3, r4, r5, pc}
 8002698:	200000dc 	.word	0x200000dc

0800269c <siprintf>:
 800269c:	b40e      	push	{r1, r2, r3}
 800269e:	b500      	push	{lr}
 80026a0:	b09c      	sub	sp, #112	; 0x70
 80026a2:	ab1d      	add	r3, sp, #116	; 0x74
 80026a4:	9002      	str	r0, [sp, #8]
 80026a6:	9006      	str	r0, [sp, #24]
 80026a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026ac:	4809      	ldr	r0, [pc, #36]	; (80026d4 <siprintf+0x38>)
 80026ae:	9107      	str	r1, [sp, #28]
 80026b0:	9104      	str	r1, [sp, #16]
 80026b2:	4909      	ldr	r1, [pc, #36]	; (80026d8 <siprintf+0x3c>)
 80026b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b8:	9105      	str	r1, [sp, #20]
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	a902      	add	r1, sp, #8
 80026c0:	f000 f884 	bl	80027cc <_svfiprintf_r>
 80026c4:	9b02      	ldr	r3, [sp, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	b01c      	add	sp, #112	; 0x70
 80026cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026d0:	b003      	add	sp, #12
 80026d2:	4770      	bx	lr
 80026d4:	20000018 	.word	0x20000018
 80026d8:	ffff0208 	.word	0xffff0208

080026dc <strcat>:
 80026dc:	b510      	push	{r4, lr}
 80026de:	4602      	mov	r2, r0
 80026e0:	7814      	ldrb	r4, [r2, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	3201      	adds	r2, #1
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d1fa      	bne.n	80026e0 <strcat+0x4>
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d1f9      	bne.n	80026ec <strcat+0x10>
 80026f8:	bd10      	pop	{r4, pc}
	...

080026fc <__malloc_lock>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__malloc_lock+0x8>)
 80026fe:	f000 baf9 	b.w	8002cf4 <__retarget_lock_acquire_recursive>
 8002702:	bf00      	nop
 8002704:	200000e0 	.word	0x200000e0

08002708 <__malloc_unlock>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__malloc_unlock+0x8>)
 800270a:	f000 baf4 	b.w	8002cf6 <__retarget_lock_release_recursive>
 800270e:	bf00      	nop
 8002710:	200000e0 	.word	0x200000e0

08002714 <__ssputs_r>:
 8002714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002718:	688e      	ldr	r6, [r1, #8]
 800271a:	429e      	cmp	r6, r3
 800271c:	4682      	mov	sl, r0
 800271e:	460c      	mov	r4, r1
 8002720:	4690      	mov	r8, r2
 8002722:	461f      	mov	r7, r3
 8002724:	d838      	bhi.n	8002798 <__ssputs_r+0x84>
 8002726:	898a      	ldrh	r2, [r1, #12]
 8002728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800272c:	d032      	beq.n	8002794 <__ssputs_r+0x80>
 800272e:	6825      	ldr	r5, [r4, #0]
 8002730:	6909      	ldr	r1, [r1, #16]
 8002732:	eba5 0901 	sub.w	r9, r5, r1
 8002736:	6965      	ldr	r5, [r4, #20]
 8002738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800273c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002740:	3301      	adds	r3, #1
 8002742:	444b      	add	r3, r9
 8002744:	106d      	asrs	r5, r5, #1
 8002746:	429d      	cmp	r5, r3
 8002748:	bf38      	it	cc
 800274a:	461d      	movcc	r5, r3
 800274c:	0553      	lsls	r3, r2, #21
 800274e:	d531      	bpl.n	80027b4 <__ssputs_r+0xa0>
 8002750:	4629      	mov	r1, r5
 8002752:	f7ff ff1f 	bl	8002594 <_malloc_r>
 8002756:	4606      	mov	r6, r0
 8002758:	b950      	cbnz	r0, 8002770 <__ssputs_r+0x5c>
 800275a:	230c      	movs	r3, #12
 800275c:	f8ca 3000 	str.w	r3, [sl]
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002770:	6921      	ldr	r1, [r4, #16]
 8002772:	464a      	mov	r2, r9
 8002774:	f000 fac0 	bl	8002cf8 <memcpy>
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800277e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	6126      	str	r6, [r4, #16]
 8002786:	6165      	str	r5, [r4, #20]
 8002788:	444e      	add	r6, r9
 800278a:	eba5 0509 	sub.w	r5, r5, r9
 800278e:	6026      	str	r6, [r4, #0]
 8002790:	60a5      	str	r5, [r4, #8]
 8002792:	463e      	mov	r6, r7
 8002794:	42be      	cmp	r6, r7
 8002796:	d900      	bls.n	800279a <__ssputs_r+0x86>
 8002798:	463e      	mov	r6, r7
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	4632      	mov	r2, r6
 800279e:	4641      	mov	r1, r8
 80027a0:	f000 fab8 	bl	8002d14 <memmove>
 80027a4:	68a3      	ldr	r3, [r4, #8]
 80027a6:	1b9b      	subs	r3, r3, r6
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	4433      	add	r3, r6
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	2000      	movs	r0, #0
 80027b2:	e7db      	b.n	800276c <__ssputs_r+0x58>
 80027b4:	462a      	mov	r2, r5
 80027b6:	f000 fac7 	bl	8002d48 <_realloc_r>
 80027ba:	4606      	mov	r6, r0
 80027bc:	2800      	cmp	r0, #0
 80027be:	d1e1      	bne.n	8002784 <__ssputs_r+0x70>
 80027c0:	6921      	ldr	r1, [r4, #16]
 80027c2:	4650      	mov	r0, sl
 80027c4:	f7ff fe7a 	bl	80024bc <_free_r>
 80027c8:	e7c7      	b.n	800275a <__ssputs_r+0x46>
	...

080027cc <_svfiprintf_r>:
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	4698      	mov	r8, r3
 80027d2:	898b      	ldrh	r3, [r1, #12]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	b09d      	sub	sp, #116	; 0x74
 80027d8:	4607      	mov	r7, r0
 80027da:	460d      	mov	r5, r1
 80027dc:	4614      	mov	r4, r2
 80027de:	d50e      	bpl.n	80027fe <_svfiprintf_r+0x32>
 80027e0:	690b      	ldr	r3, [r1, #16]
 80027e2:	b963      	cbnz	r3, 80027fe <_svfiprintf_r+0x32>
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	f7ff fed5 	bl	8002594 <_malloc_r>
 80027ea:	6028      	str	r0, [r5, #0]
 80027ec:	6128      	str	r0, [r5, #16]
 80027ee:	b920      	cbnz	r0, 80027fa <_svfiprintf_r+0x2e>
 80027f0:	230c      	movs	r3, #12
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f8:	e0d1      	b.n	800299e <_svfiprintf_r+0x1d2>
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	616b      	str	r3, [r5, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	9309      	str	r3, [sp, #36]	; 0x24
 8002802:	2320      	movs	r3, #32
 8002804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002808:	f8cd 800c 	str.w	r8, [sp, #12]
 800280c:	2330      	movs	r3, #48	; 0x30
 800280e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80029b8 <_svfiprintf_r+0x1ec>
 8002812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002816:	f04f 0901 	mov.w	r9, #1
 800281a:	4623      	mov	r3, r4
 800281c:	469a      	mov	sl, r3
 800281e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002822:	b10a      	cbz	r2, 8002828 <_svfiprintf_r+0x5c>
 8002824:	2a25      	cmp	r2, #37	; 0x25
 8002826:	d1f9      	bne.n	800281c <_svfiprintf_r+0x50>
 8002828:	ebba 0b04 	subs.w	fp, sl, r4
 800282c:	d00b      	beq.n	8002846 <_svfiprintf_r+0x7a>
 800282e:	465b      	mov	r3, fp
 8002830:	4622      	mov	r2, r4
 8002832:	4629      	mov	r1, r5
 8002834:	4638      	mov	r0, r7
 8002836:	f7ff ff6d 	bl	8002714 <__ssputs_r>
 800283a:	3001      	adds	r0, #1
 800283c:	f000 80aa 	beq.w	8002994 <_svfiprintf_r+0x1c8>
 8002840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002842:	445a      	add	r2, fp
 8002844:	9209      	str	r2, [sp, #36]	; 0x24
 8002846:	f89a 3000 	ldrb.w	r3, [sl]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a2 	beq.w	8002994 <_svfiprintf_r+0x1c8>
 8002850:	2300      	movs	r3, #0
 8002852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800285a:	f10a 0a01 	add.w	sl, sl, #1
 800285e:	9304      	str	r3, [sp, #16]
 8002860:	9307      	str	r3, [sp, #28]
 8002862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002866:	931a      	str	r3, [sp, #104]	; 0x68
 8002868:	4654      	mov	r4, sl
 800286a:	2205      	movs	r2, #5
 800286c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002870:	4851      	ldr	r0, [pc, #324]	; (80029b8 <_svfiprintf_r+0x1ec>)
 8002872:	f7fd fcad 	bl	80001d0 <memchr>
 8002876:	9a04      	ldr	r2, [sp, #16]
 8002878:	b9d8      	cbnz	r0, 80028b2 <_svfiprintf_r+0xe6>
 800287a:	06d0      	lsls	r0, r2, #27
 800287c:	bf44      	itt	mi
 800287e:	2320      	movmi	r3, #32
 8002880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002884:	0711      	lsls	r1, r2, #28
 8002886:	bf44      	itt	mi
 8002888:	232b      	movmi	r3, #43	; 0x2b
 800288a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288e:	f89a 3000 	ldrb.w	r3, [sl]
 8002892:	2b2a      	cmp	r3, #42	; 0x2a
 8002894:	d015      	beq.n	80028c2 <_svfiprintf_r+0xf6>
 8002896:	9a07      	ldr	r2, [sp, #28]
 8002898:	4654      	mov	r4, sl
 800289a:	2000      	movs	r0, #0
 800289c:	f04f 0c0a 	mov.w	ip, #10
 80028a0:	4621      	mov	r1, r4
 80028a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028a6:	3b30      	subs	r3, #48	; 0x30
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d94e      	bls.n	800294a <_svfiprintf_r+0x17e>
 80028ac:	b1b0      	cbz	r0, 80028dc <_svfiprintf_r+0x110>
 80028ae:	9207      	str	r2, [sp, #28]
 80028b0:	e014      	b.n	80028dc <_svfiprintf_r+0x110>
 80028b2:	eba0 0308 	sub.w	r3, r0, r8
 80028b6:	fa09 f303 	lsl.w	r3, r9, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	46a2      	mov	sl, r4
 80028c0:	e7d2      	b.n	8002868 <_svfiprintf_r+0x9c>
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	1d19      	adds	r1, r3, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	9103      	str	r1, [sp, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bfbb      	ittet	lt
 80028ce:	425b      	neglt	r3, r3
 80028d0:	f042 0202 	orrlt.w	r2, r2, #2
 80028d4:	9307      	strge	r3, [sp, #28]
 80028d6:	9307      	strlt	r3, [sp, #28]
 80028d8:	bfb8      	it	lt
 80028da:	9204      	strlt	r2, [sp, #16]
 80028dc:	7823      	ldrb	r3, [r4, #0]
 80028de:	2b2e      	cmp	r3, #46	; 0x2e
 80028e0:	d10c      	bne.n	80028fc <_svfiprintf_r+0x130>
 80028e2:	7863      	ldrb	r3, [r4, #1]
 80028e4:	2b2a      	cmp	r3, #42	; 0x2a
 80028e6:	d135      	bne.n	8002954 <_svfiprintf_r+0x188>
 80028e8:	9b03      	ldr	r3, [sp, #12]
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	9203      	str	r2, [sp, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bfb8      	it	lt
 80028f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028f8:	3402      	adds	r4, #2
 80028fa:	9305      	str	r3, [sp, #20]
 80028fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029c8 <_svfiprintf_r+0x1fc>
 8002900:	7821      	ldrb	r1, [r4, #0]
 8002902:	2203      	movs	r2, #3
 8002904:	4650      	mov	r0, sl
 8002906:	f7fd fc63 	bl	80001d0 <memchr>
 800290a:	b140      	cbz	r0, 800291e <_svfiprintf_r+0x152>
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	eba0 000a 	sub.w	r0, r0, sl
 8002912:	fa03 f000 	lsl.w	r0, r3, r0
 8002916:	9b04      	ldr	r3, [sp, #16]
 8002918:	4303      	orrs	r3, r0
 800291a:	3401      	adds	r4, #1
 800291c:	9304      	str	r3, [sp, #16]
 800291e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002922:	4826      	ldr	r0, [pc, #152]	; (80029bc <_svfiprintf_r+0x1f0>)
 8002924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002928:	2206      	movs	r2, #6
 800292a:	f7fd fc51 	bl	80001d0 <memchr>
 800292e:	2800      	cmp	r0, #0
 8002930:	d038      	beq.n	80029a4 <_svfiprintf_r+0x1d8>
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <_svfiprintf_r+0x1f4>)
 8002934:	bb1b      	cbnz	r3, 800297e <_svfiprintf_r+0x1b2>
 8002936:	9b03      	ldr	r3, [sp, #12]
 8002938:	3307      	adds	r3, #7
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	3308      	adds	r3, #8
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002944:	4433      	add	r3, r6
 8002946:	9309      	str	r3, [sp, #36]	; 0x24
 8002948:	e767      	b.n	800281a <_svfiprintf_r+0x4e>
 800294a:	fb0c 3202 	mla	r2, ip, r2, r3
 800294e:	460c      	mov	r4, r1
 8002950:	2001      	movs	r0, #1
 8002952:	e7a5      	b.n	80028a0 <_svfiprintf_r+0xd4>
 8002954:	2300      	movs	r3, #0
 8002956:	3401      	adds	r4, #1
 8002958:	9305      	str	r3, [sp, #20]
 800295a:	4619      	mov	r1, r3
 800295c:	f04f 0c0a 	mov.w	ip, #10
 8002960:	4620      	mov	r0, r4
 8002962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002966:	3a30      	subs	r2, #48	; 0x30
 8002968:	2a09      	cmp	r2, #9
 800296a:	d903      	bls.n	8002974 <_svfiprintf_r+0x1a8>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0c5      	beq.n	80028fc <_svfiprintf_r+0x130>
 8002970:	9105      	str	r1, [sp, #20]
 8002972:	e7c3      	b.n	80028fc <_svfiprintf_r+0x130>
 8002974:	fb0c 2101 	mla	r1, ip, r1, r2
 8002978:	4604      	mov	r4, r0
 800297a:	2301      	movs	r3, #1
 800297c:	e7f0      	b.n	8002960 <_svfiprintf_r+0x194>
 800297e:	ab03      	add	r3, sp, #12
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	462a      	mov	r2, r5
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <_svfiprintf_r+0x1f8>)
 8002986:	a904      	add	r1, sp, #16
 8002988:	4638      	mov	r0, r7
 800298a:	f3af 8000 	nop.w
 800298e:	1c42      	adds	r2, r0, #1
 8002990:	4606      	mov	r6, r0
 8002992:	d1d6      	bne.n	8002942 <_svfiprintf_r+0x176>
 8002994:	89ab      	ldrh	r3, [r5, #12]
 8002996:	065b      	lsls	r3, r3, #25
 8002998:	f53f af2c 	bmi.w	80027f4 <_svfiprintf_r+0x28>
 800299c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800299e:	b01d      	add	sp, #116	; 0x74
 80029a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a4:	ab03      	add	r3, sp, #12
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	462a      	mov	r2, r5
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <_svfiprintf_r+0x1f8>)
 80029ac:	a904      	add	r1, sp, #16
 80029ae:	4638      	mov	r0, r7
 80029b0:	f000 f87a 	bl	8002aa8 <_printf_i>
 80029b4:	e7eb      	b.n	800298e <_svfiprintf_r+0x1c2>
 80029b6:	bf00      	nop
 80029b8:	08002ed4 	.word	0x08002ed4
 80029bc:	08002ede 	.word	0x08002ede
 80029c0:	00000000 	.word	0x00000000
 80029c4:	08002715 	.word	0x08002715
 80029c8:	08002eda 	.word	0x08002eda

080029cc <_printf_common>:
 80029cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d0:	4616      	mov	r6, r2
 80029d2:	4699      	mov	r9, r3
 80029d4:	688a      	ldr	r2, [r1, #8]
 80029d6:	690b      	ldr	r3, [r1, #16]
 80029d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029dc:	4293      	cmp	r3, r2
 80029de:	bfb8      	it	lt
 80029e0:	4613      	movlt	r3, r2
 80029e2:	6033      	str	r3, [r6, #0]
 80029e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029e8:	4607      	mov	r7, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	b10a      	cbz	r2, 80029f2 <_printf_common+0x26>
 80029ee:	3301      	adds	r3, #1
 80029f0:	6033      	str	r3, [r6, #0]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	0699      	lsls	r1, r3, #26
 80029f6:	bf42      	ittt	mi
 80029f8:	6833      	ldrmi	r3, [r6, #0]
 80029fa:	3302      	addmi	r3, #2
 80029fc:	6033      	strmi	r3, [r6, #0]
 80029fe:	6825      	ldr	r5, [r4, #0]
 8002a00:	f015 0506 	ands.w	r5, r5, #6
 8002a04:	d106      	bne.n	8002a14 <_printf_common+0x48>
 8002a06:	f104 0a19 	add.w	sl, r4, #25
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	6832      	ldr	r2, [r6, #0]
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	42ab      	cmp	r3, r5
 8002a12:	dc26      	bgt.n	8002a62 <_printf_common+0x96>
 8002a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a18:	1e13      	subs	r3, r2, #0
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	bf18      	it	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	0692      	lsls	r2, r2, #26
 8002a22:	d42b      	bmi.n	8002a7c <_printf_common+0xb0>
 8002a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a28:	4649      	mov	r1, r9
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	47c0      	blx	r8
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d01e      	beq.n	8002a70 <_printf_common+0xa4>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	68e5      	ldr	r5, [r4, #12]
 8002a36:	6832      	ldr	r2, [r6, #0]
 8002a38:	f003 0306 	and.w	r3, r3, #6
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	bf08      	it	eq
 8002a40:	1aad      	subeq	r5, r5, r2
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	6922      	ldr	r2, [r4, #16]
 8002a46:	bf0c      	ite	eq
 8002a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a4c:	2500      	movne	r5, #0
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	bfc4      	itt	gt
 8002a52:	1a9b      	subgt	r3, r3, r2
 8002a54:	18ed      	addgt	r5, r5, r3
 8002a56:	2600      	movs	r6, #0
 8002a58:	341a      	adds	r4, #26
 8002a5a:	42b5      	cmp	r5, r6
 8002a5c:	d11a      	bne.n	8002a94 <_printf_common+0xc8>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e008      	b.n	8002a74 <_printf_common+0xa8>
 8002a62:	2301      	movs	r3, #1
 8002a64:	4652      	mov	r2, sl
 8002a66:	4649      	mov	r1, r9
 8002a68:	4638      	mov	r0, r7
 8002a6a:	47c0      	blx	r8
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d103      	bne.n	8002a78 <_printf_common+0xac>
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a78:	3501      	adds	r5, #1
 8002a7a:	e7c6      	b.n	8002a0a <_printf_common+0x3e>
 8002a7c:	18e1      	adds	r1, r4, r3
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	2030      	movs	r0, #48	; 0x30
 8002a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a86:	4422      	add	r2, r4
 8002a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a90:	3302      	adds	r3, #2
 8002a92:	e7c7      	b.n	8002a24 <_printf_common+0x58>
 8002a94:	2301      	movs	r3, #1
 8002a96:	4622      	mov	r2, r4
 8002a98:	4649      	mov	r1, r9
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	47c0      	blx	r8
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d0e6      	beq.n	8002a70 <_printf_common+0xa4>
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7d9      	b.n	8002a5a <_printf_common+0x8e>
	...

08002aa8 <_printf_i>:
 8002aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	7e0f      	ldrb	r7, [r1, #24]
 8002aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ab0:	2f78      	cmp	r7, #120	; 0x78
 8002ab2:	4691      	mov	r9, r2
 8002ab4:	4680      	mov	r8, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	469a      	mov	sl, r3
 8002aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002abe:	d807      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ac0:	2f62      	cmp	r7, #98	; 0x62
 8002ac2:	d80a      	bhi.n	8002ada <_printf_i+0x32>
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	f000 80d8 	beq.w	8002c7a <_printf_i+0x1d2>
 8002aca:	2f58      	cmp	r7, #88	; 0x58
 8002acc:	f000 80a3 	beq.w	8002c16 <_printf_i+0x16e>
 8002ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ad8:	e03a      	b.n	8002b50 <_printf_i+0xa8>
 8002ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ade:	2b15      	cmp	r3, #21
 8002ae0:	d8f6      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ae2:	a101      	add	r1, pc, #4	; (adr r1, 8002ae8 <_printf_i+0x40>)
 8002ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ae8:	08002b41 	.word	0x08002b41
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002ad1 	.word	0x08002ad1
 8002af4:	08002ad1 	.word	0x08002ad1
 8002af8:	08002ad1 	.word	0x08002ad1
 8002afc:	08002ad1 	.word	0x08002ad1
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002ad1 	.word	0x08002ad1
 8002b08:	08002ad1 	.word	0x08002ad1
 8002b0c:	08002ad1 	.word	0x08002ad1
 8002b10:	08002ad1 	.word	0x08002ad1
 8002b14:	08002c61 	.word	0x08002c61
 8002b18:	08002b85 	.word	0x08002b85
 8002b1c:	08002c43 	.word	0x08002c43
 8002b20:	08002ad1 	.word	0x08002ad1
 8002b24:	08002ad1 	.word	0x08002ad1
 8002b28:	08002c83 	.word	0x08002c83
 8002b2c:	08002ad1 	.word	0x08002ad1
 8002b30:	08002b85 	.word	0x08002b85
 8002b34:	08002ad1 	.word	0x08002ad1
 8002b38:	08002ad1 	.word	0x08002ad1
 8002b3c:	08002c4b 	.word	0x08002c4b
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	602a      	str	r2, [r5, #0]
 8002b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0a3      	b.n	8002c9c <_printf_i+0x1f4>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	6829      	ldr	r1, [r5, #0]
 8002b58:	0606      	lsls	r6, r0, #24
 8002b5a:	f101 0304 	add.w	r3, r1, #4
 8002b5e:	d50a      	bpl.n	8002b76 <_printf_i+0xce>
 8002b60:	680e      	ldr	r6, [r1, #0]
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	2e00      	cmp	r6, #0
 8002b66:	da03      	bge.n	8002b70 <_printf_i+0xc8>
 8002b68:	232d      	movs	r3, #45	; 0x2d
 8002b6a:	4276      	negs	r6, r6
 8002b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b70:	485e      	ldr	r0, [pc, #376]	; (8002cec <_printf_i+0x244>)
 8002b72:	230a      	movs	r3, #10
 8002b74:	e019      	b.n	8002baa <_printf_i+0x102>
 8002b76:	680e      	ldr	r6, [r1, #0]
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b7e:	bf18      	it	ne
 8002b80:	b236      	sxthne	r6, r6
 8002b82:	e7ef      	b.n	8002b64 <_printf_i+0xbc>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	1d19      	adds	r1, r3, #4
 8002b8a:	6029      	str	r1, [r5, #0]
 8002b8c:	0601      	lsls	r1, r0, #24
 8002b8e:	d501      	bpl.n	8002b94 <_printf_i+0xec>
 8002b90:	681e      	ldr	r6, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <_printf_i+0xf2>
 8002b94:	0646      	lsls	r6, r0, #25
 8002b96:	d5fb      	bpl.n	8002b90 <_printf_i+0xe8>
 8002b98:	881e      	ldrh	r6, [r3, #0]
 8002b9a:	4854      	ldr	r0, [pc, #336]	; (8002cec <_printf_i+0x244>)
 8002b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2308      	moveq	r3, #8
 8002ba2:	230a      	movne	r3, #10
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002baa:	6865      	ldr	r5, [r4, #4]
 8002bac:	60a5      	str	r5, [r4, #8]
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	bfa2      	ittt	ge
 8002bb2:	6821      	ldrge	r1, [r4, #0]
 8002bb4:	f021 0104 	bicge.w	r1, r1, #4
 8002bb8:	6021      	strge	r1, [r4, #0]
 8002bba:	b90e      	cbnz	r6, 8002bc0 <_printf_i+0x118>
 8002bbc:	2d00      	cmp	r5, #0
 8002bbe:	d04d      	beq.n	8002c5c <_printf_i+0x1b4>
 8002bc0:	4615      	mov	r5, r2
 8002bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8002bca:	5dc7      	ldrb	r7, [r0, r7]
 8002bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bd0:	4637      	mov	r7, r6
 8002bd2:	42bb      	cmp	r3, r7
 8002bd4:	460e      	mov	r6, r1
 8002bd6:	d9f4      	bls.n	8002bc2 <_printf_i+0x11a>
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10b      	bne.n	8002bf4 <_printf_i+0x14c>
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	07de      	lsls	r6, r3, #31
 8002be0:	d508      	bpl.n	8002bf4 <_printf_i+0x14c>
 8002be2:	6923      	ldr	r3, [r4, #16]
 8002be4:	6861      	ldr	r1, [r4, #4]
 8002be6:	4299      	cmp	r1, r3
 8002be8:	bfde      	ittt	le
 8002bea:	2330      	movle	r3, #48	; 0x30
 8002bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bf4:	1b52      	subs	r2, r2, r5
 8002bf6:	6122      	str	r2, [r4, #16]
 8002bf8:	f8cd a000 	str.w	sl, [sp]
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	aa03      	add	r2, sp, #12
 8002c00:	4621      	mov	r1, r4
 8002c02:	4640      	mov	r0, r8
 8002c04:	f7ff fee2 	bl	80029cc <_printf_common>
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d14c      	bne.n	8002ca6 <_printf_i+0x1fe>
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c10:	b004      	add	sp, #16
 8002c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c16:	4835      	ldr	r0, [pc, #212]	; (8002cec <_printf_i+0x244>)
 8002c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c1c:	6829      	ldr	r1, [r5, #0]
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c24:	6029      	str	r1, [r5, #0]
 8002c26:	061d      	lsls	r5, r3, #24
 8002c28:	d514      	bpl.n	8002c54 <_printf_i+0x1ac>
 8002c2a:	07df      	lsls	r7, r3, #31
 8002c2c:	bf44      	itt	mi
 8002c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c32:	6023      	strmi	r3, [r4, #0]
 8002c34:	b91e      	cbnz	r6, 8002c3e <_printf_i+0x196>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f023 0320 	bic.w	r3, r3, #32
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	2310      	movs	r3, #16
 8002c40:	e7b0      	b.n	8002ba4 <_printf_i+0xfc>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	2378      	movs	r3, #120	; 0x78
 8002c4c:	4828      	ldr	r0, [pc, #160]	; (8002cf0 <_printf_i+0x248>)
 8002c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c52:	e7e3      	b.n	8002c1c <_printf_i+0x174>
 8002c54:	0659      	lsls	r1, r3, #25
 8002c56:	bf48      	it	mi
 8002c58:	b2b6      	uxthmi	r6, r6
 8002c5a:	e7e6      	b.n	8002c2a <_printf_i+0x182>
 8002c5c:	4615      	mov	r5, r2
 8002c5e:	e7bb      	b.n	8002bd8 <_printf_i+0x130>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	6826      	ldr	r6, [r4, #0]
 8002c64:	6961      	ldr	r1, [r4, #20]
 8002c66:	1d18      	adds	r0, r3, #4
 8002c68:	6028      	str	r0, [r5, #0]
 8002c6a:	0635      	lsls	r5, r6, #24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	d501      	bpl.n	8002c74 <_printf_i+0x1cc>
 8002c70:	6019      	str	r1, [r3, #0]
 8002c72:	e002      	b.n	8002c7a <_printf_i+0x1d2>
 8002c74:	0670      	lsls	r0, r6, #25
 8002c76:	d5fb      	bpl.n	8002c70 <_printf_i+0x1c8>
 8002c78:	8019      	strh	r1, [r3, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6123      	str	r3, [r4, #16]
 8002c7e:	4615      	mov	r5, r2
 8002c80:	e7ba      	b.n	8002bf8 <_printf_i+0x150>
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	602a      	str	r2, [r5, #0]
 8002c88:	681d      	ldr	r5, [r3, #0]
 8002c8a:	6862      	ldr	r2, [r4, #4]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7fd fa9e 	bl	80001d0 <memchr>
 8002c94:	b108      	cbz	r0, 8002c9a <_printf_i+0x1f2>
 8002c96:	1b40      	subs	r0, r0, r5
 8002c98:	6060      	str	r0, [r4, #4]
 8002c9a:	6863      	ldr	r3, [r4, #4]
 8002c9c:	6123      	str	r3, [r4, #16]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca4:	e7a8      	b.n	8002bf8 <_printf_i+0x150>
 8002ca6:	6923      	ldr	r3, [r4, #16]
 8002ca8:	462a      	mov	r2, r5
 8002caa:	4649      	mov	r1, r9
 8002cac:	4640      	mov	r0, r8
 8002cae:	47d0      	blx	sl
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d0ab      	beq.n	8002c0c <_printf_i+0x164>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	079b      	lsls	r3, r3, #30
 8002cb8:	d413      	bmi.n	8002ce2 <_printf_i+0x23a>
 8002cba:	68e0      	ldr	r0, [r4, #12]
 8002cbc:	9b03      	ldr	r3, [sp, #12]
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	bfb8      	it	lt
 8002cc2:	4618      	movlt	r0, r3
 8002cc4:	e7a4      	b.n	8002c10 <_printf_i+0x168>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	4632      	mov	r2, r6
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4640      	mov	r0, r8
 8002cce:	47d0      	blx	sl
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d09b      	beq.n	8002c0c <_printf_i+0x164>
 8002cd4:	3501      	adds	r5, #1
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	9903      	ldr	r1, [sp, #12]
 8002cda:	1a5b      	subs	r3, r3, r1
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	dcf2      	bgt.n	8002cc6 <_printf_i+0x21e>
 8002ce0:	e7eb      	b.n	8002cba <_printf_i+0x212>
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	f104 0619 	add.w	r6, r4, #25
 8002ce8:	e7f5      	b.n	8002cd6 <_printf_i+0x22e>
 8002cea:	bf00      	nop
 8002cec:	08002ee5 	.word	0x08002ee5
 8002cf0:	08002ef6 	.word	0x08002ef6

08002cf4 <__retarget_lock_acquire_recursive>:
 8002cf4:	4770      	bx	lr

08002cf6 <__retarget_lock_release_recursive>:
 8002cf6:	4770      	bx	lr

08002cf8 <memcpy>:
 8002cf8:	440a      	add	r2, r1
 8002cfa:	4291      	cmp	r1, r2
 8002cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d00:	d100      	bne.n	8002d04 <memcpy+0xc>
 8002d02:	4770      	bx	lr
 8002d04:	b510      	push	{r4, lr}
 8002d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d0e:	4291      	cmp	r1, r2
 8002d10:	d1f9      	bne.n	8002d06 <memcpy+0xe>
 8002d12:	bd10      	pop	{r4, pc}

08002d14 <memmove>:
 8002d14:	4288      	cmp	r0, r1
 8002d16:	b510      	push	{r4, lr}
 8002d18:	eb01 0402 	add.w	r4, r1, r2
 8002d1c:	d902      	bls.n	8002d24 <memmove+0x10>
 8002d1e:	4284      	cmp	r4, r0
 8002d20:	4623      	mov	r3, r4
 8002d22:	d807      	bhi.n	8002d34 <memmove+0x20>
 8002d24:	1e43      	subs	r3, r0, #1
 8002d26:	42a1      	cmp	r1, r4
 8002d28:	d008      	beq.n	8002d3c <memmove+0x28>
 8002d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d32:	e7f8      	b.n	8002d26 <memmove+0x12>
 8002d34:	4402      	add	r2, r0
 8002d36:	4601      	mov	r1, r0
 8002d38:	428a      	cmp	r2, r1
 8002d3a:	d100      	bne.n	8002d3e <memmove+0x2a>
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d46:	e7f7      	b.n	8002d38 <memmove+0x24>

08002d48 <_realloc_r>:
 8002d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	4614      	mov	r4, r2
 8002d50:	460e      	mov	r6, r1
 8002d52:	b921      	cbnz	r1, 8002d5e <_realloc_r+0x16>
 8002d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d58:	4611      	mov	r1, r2
 8002d5a:	f7ff bc1b 	b.w	8002594 <_malloc_r>
 8002d5e:	b92a      	cbnz	r2, 8002d6c <_realloc_r+0x24>
 8002d60:	f7ff fbac 	bl	80024bc <_free_r>
 8002d64:	4625      	mov	r5, r4
 8002d66:	4628      	mov	r0, r5
 8002d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d6c:	f000 f81b 	bl	8002da6 <_malloc_usable_size_r>
 8002d70:	4284      	cmp	r4, r0
 8002d72:	4607      	mov	r7, r0
 8002d74:	d802      	bhi.n	8002d7c <_realloc_r+0x34>
 8002d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d7a:	d812      	bhi.n	8002da2 <_realloc_r+0x5a>
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4640      	mov	r0, r8
 8002d80:	f7ff fc08 	bl	8002594 <_malloc_r>
 8002d84:	4605      	mov	r5, r0
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d0ed      	beq.n	8002d66 <_realloc_r+0x1e>
 8002d8a:	42bc      	cmp	r4, r7
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	4631      	mov	r1, r6
 8002d90:	bf28      	it	cs
 8002d92:	463a      	movcs	r2, r7
 8002d94:	f7ff ffb0 	bl	8002cf8 <memcpy>
 8002d98:	4631      	mov	r1, r6
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f7ff fb8e 	bl	80024bc <_free_r>
 8002da0:	e7e1      	b.n	8002d66 <_realloc_r+0x1e>
 8002da2:	4635      	mov	r5, r6
 8002da4:	e7df      	b.n	8002d66 <_realloc_r+0x1e>

08002da6 <_malloc_usable_size_r>:
 8002da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002daa:	1f18      	subs	r0, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bfbc      	itt	lt
 8002db0:	580b      	ldrlt	r3, [r1, r0]
 8002db2:	18c0      	addlt	r0, r0, r3
 8002db4:	4770      	bx	lr
	...

08002db8 <_init>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr

08002dc4 <_fini>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr
