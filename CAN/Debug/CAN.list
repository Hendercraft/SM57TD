
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000310c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800348c  0800348c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003494  08003494  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000058  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e85  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1e  00000000  00000000  00026f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00028950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000558  00000000  00000000  00028f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211d5  00000000  00000000  000294c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e5d  00000000  00000000  0004a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c077b  00000000  00000000  000524f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00112c6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a54  00000000  00000000  00112cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003284 	.word	0x08003284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003284 	.word	0x08003284

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <__NVIC_EnableIRQ+0x38>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

    // Configure the GPIO pins for USART3
    // ...
    GPIO_Init();
 80005b6:	f000 f853 	bl	8000660 <GPIO_Init>
    // Enable the USART3 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <UART_Init+0xa4>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a25      	ldr	r2, [pc, #148]	; (8000654 <UART_Init+0xa4>)
 80005c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
    // Disable USART3
    USART3->CR1 &= ~USART_CR1_UE;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <UART_Init+0xa8>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <UART_Init+0xa8>)
 80005cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005d0:	60d3      	str	r3, [r2, #12]

    // Configure USART3 for 8-bit data, no parity, and 1 stop bit oversampling 16
    USART3->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <UART_Init+0xa8>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <UART_Init+0xa8>)
 80005d8:	f423 4314 	bic.w	r3, r3, #37888	; 0x9400
 80005dc:	60d3      	str	r3, [r2, #12]
    USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <UART_Init+0xa8>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <UART_Init+0xa8>)
 80005e4:	f043 030c 	orr.w	r3, r3, #12
 80005e8:	60d3      	str	r3, [r2, #12]
    USART3->CR2 &= ~USART_CR2_STOP;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <UART_Init+0xa8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <UART_Init+0xa8>)
 80005f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005f4:	6113      	str	r3, [r2, #16]
    USART3->CR2 |= USART_CR2_LINEN;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <UART_Init+0xa8>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <UART_Init+0xa8>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6113      	str	r3, [r2, #16]
    USART3->CR3 &= 0x00000000;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <UART_Init+0xa8>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <UART_Init+0xa8>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
    // Sstem clock (42Mhz) / Baud rate (9600) * 8* (2-CR->Over) = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
    USART3->BRR = 0x00001117;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <UART_Init+0xa8>)
 800060e:	f241 1217 	movw	r2, #4375	; 0x1117
 8000612:	609a      	str	r2, [r3, #8]

    // Enable transmitter interrupts
    //USART3->CR1 |= USART_CR1_TXEIE;

    // Enable reception interrupts
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <UART_Init+0xa8>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <UART_Init+0xa8>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	60d3      	str	r3, [r2, #12]

    // Enable USART3
    USART3->CR1 |= USART_CR1_UE;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <UART_Init+0xa8>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <UART_Init+0xa8>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART3_IRQn);
 800062c:	2027      	movs	r0, #39	; 0x27
 800062e:	f7ff ffa1 	bl	8000574 <__NVIC_EnableIRQ>

    // Perform the delay
    for (uint32_t i = 0; i < 500000; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e003      	b.n	8000640 <UART_Init+0x90>
    	__NOP(); // No Operation, consumes one cycle
 8000638:	bf00      	nop
    for (uint32_t i = 0; i < 500000; i++) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a06      	ldr	r2, [pc, #24]	; (800065c <UART_Init+0xac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d9f7      	bls.n	8000638 <UART_Init+0x88>
    }
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40004800 	.word	0x40004800
 800065c:	0007a11f 	.word	0x0007a11f

08000660 <GPIO_Init>:

static void GPIO_Init(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <GPIO_Init+0xd0>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <GPIO_Init+0xd0>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB10 (USART3 TX) as AF mode, high speed, and push-pull output
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <GPIO_Init+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <GPIO_Init+0xd4>)
 8000676:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800067a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <GPIO_Init+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <GPIO_Init+0xd4>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <GPIO_Init+0xd4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <GPIO_Init+0xd4>)
 800068e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000692:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <GPIO_Init+0xd4>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a26      	ldr	r2, [pc, #152]	; (8000734 <GPIO_Init+0xd4>)
 800069a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800069e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <GPIO_Init+0xd4>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4a23      	ldr	r2, [pc, #140]	; (8000734 <GPIO_Init+0xd4>)
 80006a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80006aa:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <GPIO_Init+0xd4>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <GPIO_Init+0xd4>)
 80006b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006b6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL10_Pos);
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <GPIO_Init+0xd4>)
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <GPIO_Init+0xd4>)
 80006be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006c2:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure PB11 (USART3 RX) as AF mode, high speed, and pull-up input
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <GPIO_Init+0xd4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <GPIO_Init+0xd4>)
 80006ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <GPIO_Init+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <GPIO_Init+0xd4>)
 80006d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT11;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <GPIO_Init+0xd4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <GPIO_Init+0xd4>)
 80006e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <GPIO_Init+0xd4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <GPIO_Init+0xd4>)
 80006ee:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80006f2:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <GPIO_Init+0xd4>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <GPIO_Init+0xd4>)
 80006fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006fe:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <GPIO_Init+0xd4>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <GPIO_Init+0xd4>)
 8000706:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800070a:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <GPIO_Init+0xd4>)
 800070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <GPIO_Init+0xd4>)
 8000712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000716:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL11_Pos);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <GPIO_Init+0xd4>)
 800071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <GPIO_Init+0xd4>)
 800071e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000722:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400

08000738 <SendResponse>:
static void SendHeader(uint8_t ID){
	sync_break();
	UART_PutChar(ID);
}

static void SendResponse(LINMSG* msg){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<(msg->length);i++){
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e00a      	b.n	800075c <SendResponse+0x24>
		UART_PutChar(msg->data[i]);
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	3302      	adds	r3, #2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f83f 	bl	80007d4 <UART_PutChar>
	for (int i = 0; i<(msg->length);i++){
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	461a      	mov	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4293      	cmp	r3, r2
 8000766:	dbee      	blt.n	8000746 <SendResponse+0xe>
	}
	UART_PutChar(msg->checksum);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b1b      	ldrb	r3, [r3, #12]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f831 	bl	80007d4 <UART_PutChar>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <slave_response>:
/*
 * This function is called at each interrupt
 * It's used when the card is in slave mode
 * It's role is to generate a response to the request of the master
 * */
int slave_response(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//sync_counter is used to determine whether we recived the sync byte or not
	serial_putc(USART3->DR);
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <slave_response+0x50>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fa16 	bl	8001bb8 <serial_putc>

	if(sync_counter == -1){
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <slave_response+0x54>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000794:	d10b      	bne.n	80007ae <slave_response+0x32>
		if(USART3->DR == 0x55){ //Check it is the sync byte (value 0x55)
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <slave_response+0x50>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b55      	cmp	r3, #85	; 0x55
 800079c:	d104      	bne.n	80007a8 <slave_response+0x2c>
			sync_counter = 0;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <slave_response+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
			return 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e00e      	b.n	80007c6 <slave_response+0x4a>
	    }else{
			return -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ac:	e00b      	b.n	80007c6 <slave_response+0x4a>
	    }
	}
	if(sync_counter == 0){ //We received the sync byte
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <slave_response+0x54>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d107      	bne.n	80007c6 <slave_response+0x4a>
		//TODO
		if (USART3->DR == SLAVE_ADDR_WRITE){ //If we recied a request for the RTC
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <slave_response+0x50>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b73      	cmp	r3, #115	; 0x73
 80007bc:	d103      	bne.n	80007c6 <slave_response+0x4a>
			Send_RTC();
 80007be:	f000 f855 	bl	800086c <Send_RTC>
			return 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e7ff      	b.n	80007c6 <slave_response+0x4a>
		}
		//ADD the different behavior as a slave based on the address
	}
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40004800 	.word	0x40004800
 80007d0:	20000000 	.word	0x20000000

080007d4 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART3->DR = data;
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <UART_PutChar+0x3c>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 80007e4:	bf00      	nop
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <UART_PutChar+0x3c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <UART_PutChar+0x12>
	while(!(USART3->SR & 0x00000040));
 80007f2:	bf00      	nop
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <UART_PutChar+0x3c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f9      	beq.n	80007f4 <UART_PutChar+0x20>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40004800 	.word	0x40004800

08000814 <checksum>:

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data){
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
	uint8_t ix;
	uint16_t check_sum = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	81bb      	strh	r3, [r7, #12]

	for(ix = 0; ix < length-1; ix++){
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e010      	b.n	800084c <checksum+0x38>
		check_sum += data[ix];
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b29a      	uxth	r2, r3
 8000834:	89bb      	ldrh	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	81bb      	strh	r3, [r7, #12]
		if(check_sum >= 256){
 800083a:	89bb      	ldrh	r3, [r7, #12]
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d902      	bls.n	8000846 <checksum+0x32>
			check_sum -= 255;
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	3bff      	subs	r3, #255	; 0xff
 8000844:	81bb      	strh	r3, [r7, #12]
	for(ix = 0; ix < length-1; ix++){
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3301      	adds	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	7bfa      	ldrb	r2, [r7, #15]
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3b01      	subs	r3, #1
 8000852:	429a      	cmp	r2, r3
 8000854:	dbe9      	blt.n	800082a <checksum+0x16>
		}
	}
	return (uint8_t)(0xff - check_sum);
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	b2db      	uxtb	r3, r3
}
 800085e:	4618      	mov	r0, r3
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <Send_RTC>:

void Send_RTC(){
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

	// Read date and time registers
	uint32_t time_tmp_reg = RTC->TR;
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <Send_RTC+0xc8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	61fb      	str	r3, [r7, #28]
	uint32_t date_tmp_reg = RTC->DR;
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <Send_RTC+0xc8>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	61bb      	str	r3, [r7, #24]

		// Extract values from saved register values
	uint8_t day = bcd_to_int((date_tmp_reg & (RTC_DR_DU | RTC_DR_DT)) >> RTC_DR_DU_Pos);
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fec9 	bl	8001620 <bcd_to_int>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
	uint8_t month = bcd_to_int((date_tmp_reg & (RTC_DR_MU | RTC_DR_MT)) >> RTC_DR_MU_Pos);
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 031f 	and.w	r3, r3, #31
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 febe 	bl	8001620 <bcd_to_int>
 80008a4:	4603      	mov	r3, r0
 80008a6:	75bb      	strb	r3, [r7, #22]
	uint8_t year = bcd_to_int((date_tmp_reg & (RTC_DR_YU | RTC_DR_YT)) >> RTC_DR_YU_Pos);
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	0c1b      	lsrs	r3, r3, #16
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 feb6 	bl	8001620 <bcd_to_int>
 80008b4:	4603      	mov	r3, r0
 80008b6:	757b      	strb	r3, [r7, #21]
	uint8_t hour = bcd_to_int((time_tmp_reg & (RTC_TR_HU | RTC_TR_HT)) >> RTC_TR_HU_Pos);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	0c1b      	lsrs	r3, r3, #16
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 feab 	bl	8001620 <bcd_to_int>
 80008ca:	4603      	mov	r3, r0
 80008cc:	753b      	strb	r3, [r7, #20]
	uint8_t min = bcd_to_int((time_tmp_reg & (RTC_TR_MNU | RTC_TR_MNT)) >> RTC_TR_MNU_Pos);
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fea0 	bl	8001620 <bcd_to_int>
 80008e0:	4603      	mov	r3, r0
 80008e2:	74fb      	strb	r3, [r7, #19]
	uint8_t sec = bcd_to_int((time_tmp_reg & (RTC_TR_SU | RTC_TR_ST)) >> RTC_TR_SU_Pos);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fe96 	bl	8001620 <bcd_to_int>
 80008f4:	4603      	mov	r3, r0
 80008f6:	74bb      	strb	r3, [r7, #18]

	LINMSG response;
	response.length = 6;
 80008f8:	2306      	movs	r3, #6
 80008fa:	717b      	strb	r3, [r7, #5]
	response.data[0] = hour;
 80008fc:	7d3b      	ldrb	r3, [r7, #20]
 80008fe:	71bb      	strb	r3, [r7, #6]
	response.data[1] = min;
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	71fb      	strb	r3, [r7, #7]
	response.data[2] = sec;
 8000904:	7cbb      	ldrb	r3, [r7, #18]
 8000906:	723b      	strb	r3, [r7, #8]
	response.data[3] = day;
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	727b      	strb	r3, [r7, #9]
	response.data[4] = month;
 800090c:	7dbb      	ldrb	r3, [r7, #22]
 800090e:	72bb      	strb	r3, [r7, #10]
	response.data[5] = year;
 8000910:	7d7b      	ldrb	r3, [r7, #21]
 8000912:	72fb      	strb	r3, [r7, #11]
	response.checksum = checksum(6,response.data);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3302      	adds	r3, #2
 8000918:	4619      	mov	r1, r3
 800091a:	2006      	movs	r0, #6
 800091c:	f7ff ff7a 	bl	8000814 <checksum>
 8000920:	4603      	mov	r3, r0
 8000922:	743b      	strb	r3, [r7, #16]
	SendResponse(&response);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff06 	bl	8000738 <SendResponse>
}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40002800 	.word	0x40002800

08000938 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
		if(USART3->SR & USART_SR_RXNE || USART3->SR & USART_SR_LBD_Msk){
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <USART3_IRQHandler+0x24>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b00      	cmp	r3, #0
 8000946:	d105      	bne.n	8000954 <USART3_IRQHandler+0x1c>
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <USART3_IRQHandler+0x24>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <USART3_IRQHandler+0x20>
			slave_response();
 8000954:	f7ff ff12 	bl	800077c <slave_response>
		}

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40004800 	.word	0x40004800

08000960 <__NVIC_EnableIRQ>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <__NVIC_EnableIRQ+0x38>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <CAN_Counter_Init>:

static GPIO_TypeDef * PB = GPIOB;
static CAN_frame Counter;
CircularBuffer* ReciveBuffer;

void CAN_Counter_Init(){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	Counter.ID = 0x010;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <CAN_Counter_Init+0x2c>)
 80009f6:	2210      	movs	r2, #16
 80009f8:	601a      	str	r2, [r3, #0]
	Counter.IDE = 0x0;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <CAN_Counter_Init+0x2c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	711a      	strb	r2, [r3, #4]
	Counter.RTR = 0;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <CAN_Counter_Init+0x2c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	715a      	strb	r2, [r3, #5]
	Counter.DLC = 1;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <CAN_Counter_Init+0x2c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	719a      	strb	r2, [r3, #6]
	Counter.data[0] = 0;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <CAN_Counter_Init+0x2c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	71da      	strb	r2, [r3, #7]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000094 	.word	0x20000094

08000a20 <CAN_GPIO_Init>:

void CAN_GPIO_Init(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

	Configure_buttonInterrupt();
 8000a24:	f000 f916 	bl	8000c54 <Configure_buttonInterrupt>
	RCC->AHB1ENR |= 0x2; //gpio clock activation for can gpio B
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a23      	ldr	r2, [pc, #140]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //for the led gpio D
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<25); // can clock activation
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <CAN_GPIO_Init+0x9c>)
 8000a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40

	PB->MODER &=  ~(GPIO_MODER_MODER8_Msk |GPIO_MODER_MODER9_Msk); // set the Moder of pin 8 & 9 to 00
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000a5a:	601a      	str	r2, [r3, #0]
	PB->MODER |=  (GPIO_MODER_MODER8_1 |GPIO_MODER_MODER9_1); // set the Moder of pin 8 & 9 to 10 aka Alternate fonction
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000a6a:	601a      	str	r2, [r3, #0]

	PB->PUPDR &= ~(GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000a7a:	60da      	str	r2, [r3, #12]
	PB->OSPEEDR |= 0xF << 16; //Set the pin 8 and 9 to 11 aka hight speed
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8000a8a:	609a      	str	r2, [r3, #8]

	PB->AFR[1] &= ~0xFF;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
	PB->AFR[1] |= 0x99;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <CAN_GPIO_Init+0xa0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0299 	orr.w	r2, r2, #153	; 0x99
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24

	//Config the pin as general output for the led
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <CAN_GPIO_Init+0xa4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <CAN_GPIO_Init+0xa4>)
 8000ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	6013      	str	r3, [r2, #0]

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <CAN_config>:

void CAN_config(uint8_t IDE, uint8_t FBM, uint16_t Filter_ID_high, uint16_t Filter_ID_low, uint16_t Filter_Mask_high, uint16_t Filter_Mask_low){
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	4603      	mov	r3, r0
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	807b      	strh	r3, [r7, #2]
	ReciveBuffer = getNewBuffer();
 8000ae6:	f000 faf3 	bl	80010d0 <getNewBuffer>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <CAN_config+0x180>)
 8000aee:	6013      	str	r3, [r2, #0]
	//clear sleep bit
	CAN1->MCR &= ~(0x2);
 8000af0:	4b56      	ldr	r3, [pc, #344]	; (8000c4c <CAN_config+0x184>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <CAN_config+0x184>)
 8000af6:	f023 0302 	bic.w	r3, r3, #2
 8000afa:	6013      	str	r3, [r2, #0]
	//wait for the can to wakeup
	while(CAN1->MSR & (0x2));
 8000afc:	bf00      	nop
 8000afe:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <CAN_config+0x184>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f9      	bne.n	8000afe <CAN_config+0x36>
	//Set to config mode
	CAN1->MCR |= 0x1;
 8000b0a:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <CAN_config+0x184>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <CAN_config+0x184>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]

	while(!(CAN1->MSR & 0x1));
 8000b16:	bf00      	nop
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <CAN_config+0x184>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f9      	beq.n	8000b18 <CAN_config+0x50>

	//Set all bit but config to 0 (maybe check it later for sleep mode ?)
	CAN1->MCR &= 0x1;
 8000b24:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <CAN_config+0x184>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a48      	ldr	r2, [pc, #288]	; (8000c4c <CAN_config+0x184>)
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]

	// 250kbaus, loopback mode, BRP 16 10TQ
	//CAN1->BTR = 0x0403001B;
	CAN1->BTR = 0x40250010;
 8000b30:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <CAN_config+0x184>)
 8000b32:	4a47      	ldr	r2, [pc, #284]	; (8000c50 <CAN_config+0x188>)
 8000b34:	61da      	str	r2, [r3, #28]

	//Realase mail box (? Is it necessary (box empty ?))
	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000b36:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <CAN_config+0x184>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <CAN_config+0x184>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	60d3      	str	r3, [r2, #12]

	//Enable interrupt on mailbox 0
	CAN1->IER |= 0x2;
 8000b42:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <CAN_config+0x184>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a41      	ldr	r2, [pc, #260]	; (8000c4c <CAN_config+0x184>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2014      	movs	r0, #20
 8000b52:	f7ff ff23 	bl	800099c <__NVIC_SetPriority>
	//NVIC_SetPriority(CAN1_TX_IRQn,0);
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b56:	2014      	movs	r0, #20
 8000b58:	f7ff ff02 	bl	8000960 <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_TX_IRQn);

	//set to normal mod
	CAN1->MCR &= ~(0x1);
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <CAN_config+0x184>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a3a      	ldr	r2, [pc, #232]	; (8000c4c <CAN_config+0x184>)
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]
	//wait for normal mod
	while((CAN1->MSR & 0x1));
 8000b68:	bf00      	nop
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <CAN_config+0x184>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f9      	bne.n	8000b6a <CAN_config+0xa2>

	//set filter in init mode
	CAN1->FMR |= (0x1); //Mask mode
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <CAN_config+0x184>)
 8000b78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b7c:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <CAN_config+0x184>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	CAN1->FA1R |= 0x1;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <CAN_config+0x184>)
 8000b88:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000b8c:	4a2f      	ldr	r2, [pc, #188]	; (8000c4c <CAN_config+0x184>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Assign the message from filter 0 to FIFO0
	CAN1->FFA1R &= ~(0x1);
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <CAN_config+0x184>)
 8000b98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <CAN_config+0x184>)
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	if (FBM == 0){
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d108      	bne.n	8000bbe <CAN_config+0xf6>
		CAN1->FM1R &= ~(0x1); //Set filter 1 in mask mod
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <CAN_config+0x184>)
 8000bae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000bb2:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <CAN_config+0x184>)
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000bbc:	e007      	b.n	8000bce <CAN_config+0x106>
	}else{
		CAN1->FM1R |= 0x1; //Set filter 1 in list mod
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <CAN_config+0x184>)
 8000bc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <CAN_config+0x184>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	// configure filter mode based on IDE
	if (IDE == 0){ // standard mode
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d116      	bne.n	8000c02 <CAN_config+0x13a>
		CAN1->FS1R &= ~0x1; //activating filter 0 in 16bits
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <CAN_config+0x184>)
 8000bd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <CAN_config+0x184>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_Mask_low << 16 | Filter_ID_low);
 8000be4:	8bbb      	ldrh	r3, [r7, #28]
 8000be6:	041a      	lsls	r2, r3, #16
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <CAN_config+0x184>)
 8000bee:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_ID_high);
 8000bf2:	8b3b      	ldrh	r3, [r7, #24]
 8000bf4:	041a      	lsls	r2, r3, #16
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <CAN_config+0x184>)
 8000bfc:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000c00:	e015      	b.n	8000c2e <CAN_config+0x166>

	}else{ // extended mode
		CAN1->FS1R |= 0x1; //activating filter 0 32bits
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <CAN_config+0x184>)
 8000c04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <CAN_config+0x184>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 16 | Filter_ID_low);
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	041a      	lsls	r2, r3, #16
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <CAN_config+0x184>)
 8000c1c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_Mask_low);
 8000c20:	8b3b      	ldrh	r3, [r7, #24]
 8000c22:	041a      	lsls	r2, r3, #16
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <CAN_config+0x184>)
 8000c2a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	}

	//Activate Filter 0
	CAN1->FMR &= ~(0x1);
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <CAN_config+0x184>)
 8000c30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <CAN_config+0x184>)
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	40006400 	.word	0x40006400
 8000c50:	40250010 	.word	0x40250010

08000c54 <Configure_buttonInterrupt>:

void Configure_buttonInterrupt() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <Configure_buttonInterrupt+0x74>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <Configure_buttonInterrupt+0x74>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <Configure_buttonInterrupt+0x74>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <Configure_buttonInterrupt+0x74>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PA0 as input with pull-up
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);  // Clear mode bits
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <Configure_buttonInterrupt+0x78>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <Configure_buttonInterrupt+0x78>)
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);  // Clear pull-up/pull-down bits
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <Configure_buttonInterrupt+0x78>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <Configure_buttonInterrupt+0x78>)
 8000c82:	f023 0303 	bic.w	r3, r3, #3
 8000c86:	60d3      	str	r3, [r2, #12]
    //GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;  // Set pull-up mode

    // Connect EXTI Line 0 to PA0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <Configure_buttonInterrupt+0x7c>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <Configure_buttonInterrupt+0x7c>)
 8000c8e:	f023 030f 	bic.w	r3, r3, #15
 8000c92:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <Configure_buttonInterrupt+0x7c>)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <Configure_buttonInterrupt+0x7c>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0 to interrupt on the rising edge
    EXTI->IMR |= EXTI_IMR_MR0;  // Enable interrupt on EXTI Line 0
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <Configure_buttonInterrupt+0x80>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <Configure_buttonInterrupt+0x80>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;  // Set falling edge trigger
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Configure_buttonInterrupt+0x80>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <Configure_buttonInterrupt+0x80>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	60d3      	str	r3, [r2, #12]

    // Enable and set the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f7ff fe53 	bl	8000960 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f7ff fe6d 	bl	800099c <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40013c00 	.word	0x40013c00

08000cd8 <CAN_sendFrame>:


uint8_t CAN_sendFrame(CAN_frame CAN_mess){
 8000cd8:	b490      	push	{r4, r7}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	463c      	mov	r4, r7
 8000ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //Check if TxMailbox0 is empty
    if (CAN1->TSR & 0x04000000){
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d03f      	beq.n	8000d70 <CAN_sendFrame+0x98>
        //fill the mailbox
        //Writing the id and the RTR
        uint32_t id = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
        if (CAN_mess.IDE == 0) { // standard mode
 8000cf4:	793b      	ldrb	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <CAN_sendFrame+0x30>
            id = (CAN_mess.ID << 21) | (CAN_mess.RTR << 1);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	055b      	lsls	r3, r3, #21
 8000cfe:	797a      	ldrb	r2, [r7, #5]
 8000d00:	0052      	lsls	r2, r2, #1
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e007      	b.n	8000d18 <CAN_sendFrame+0x40>
        }
        else { // extended mode
            id = (CAN_mess.ID << 3) | (CAN_mess.RTR << 1) | (1 << 2);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	797a      	ldrb	r2, [r7, #5]
 8000d0e:	0052      	lsls	r2, r2, #1
 8000d10:	4313      	orrs	r3, r2
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
        }
        CAN1->sTxMailBox[0].TIR = id;
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        CAN1->sTxMailBox[0].TDTR = CAN_mess.DLC;
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d24:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CAN1->sTxMailBox[0].TDLR = CAN_mess.data[3] << 24 | CAN_mess.data[2] << 16 | CAN_mess.data[1] << 8 | CAN_mess.data[0];
 8000d28:	7abb      	ldrb	r3, [r7, #10]
 8000d2a:	061a      	lsls	r2, r3, #24
 8000d2c:	7a7b      	ldrb	r3, [r7, #9]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	431a      	orrs	r2, r3
 8000d32:	7a3b      	ldrb	r3, [r7, #8]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	4313      	orrs	r3, r2
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d3e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        CAN1->sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	061a      	lsls	r2, r3, #24
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	041b      	lsls	r3, r3, #16
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	4313      	orrs	r3, r2
 8000d52:	7afa      	ldrb	r2, [r7, #11]
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d58:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        CAN1->sTxMailBox[0].TIR |= 1; //Send the message
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d5e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <CAN_sendFrame+0xa4>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        return(1);
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <CAN_sendFrame+0x9a>
    }
    else return(0);
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc90      	pop	{r4, r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40006400 	.word	0x40006400

08000d80 <CAN1_RX0_IRQHandler>:


// Interrupt handler for CAN1 RX0
void CAN1_RX0_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    if (CAN1->RF0R & CAN_RF0R_FMP0) // check if there is a message in the FIFO
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <CAN1_RX0_IRQHandler+0x24>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d007      	beq.n	8000da0 <CAN1_RX0_IRQHandler+0x20>
    {
        // call the receive callback function
        CAN_receiveCallback();
 8000d90:	f000 f894 	bl	8000ebc <CAN_receiveCallback>
        // clear the message from the FIFO
        CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <CAN1_RX0_IRQHandler+0x24>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a02      	ldr	r2, [pc, #8]	; (8000da4 <CAN1_RX0_IRQHandler+0x24>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	60d3      	str	r3, [r2, #12]
    }
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40006400 	.word	0x40006400

08000da8 <CAN_frameToString>:

void CAN_frameToString(CAN_frame* frame, char* str) {
 8000da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dac:	b089      	sub	sp, #36	; 0x24
 8000dae:	af02      	add	r7, sp, #8
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
 8000db4:	466b      	mov	r3, sp
 8000db6:	461e      	mov	r6, r3
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	791b      	ldrb	r3, [r3, #4]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000dc0:	4618      	mov	r0, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	795b      	ldrb	r3, [r3, #5]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000dc6:	4619      	mov	r1, r3
            frame->ID, frame->IDE, frame->RTR, frame->DLC);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	799b      	ldrb	r3, [r3, #6]
    sprintf(str, "ID: %lu, IDE: %u, RTR: %u, DLC: %u, Data: ",
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	9100      	str	r1, [sp, #0]
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4926      	ldr	r1, [pc, #152]	; (8000e6c <CAN_frameToString+0xc4>)
 8000dd4:	6838      	ldr	r0, [r7, #0]
 8000dd6:	f001 fec7 	bl	8002b68 <siprintf>

    char temp[frame->DLC];
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7999      	ldrb	r1, [r3, #6]
 8000dde:	460b      	mov	r3, r1
 8000de0:	3b01      	subs	r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	b2cb      	uxtb	r3, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	4698      	mov	r8, r3
 8000dea:	4691      	mov	r9, r2
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e00:	b2cb      	uxtb	r3, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	461c      	mov	r4, r3
 8000e06:	4615      	mov	r5, r2
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	00eb      	lsls	r3, r5, #3
 8000e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e16:	00e2      	lsls	r2, r4, #3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	3307      	adds	r3, #7
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	ebad 0d03 	sub.w	sp, sp, r3
 8000e24:	ab02      	add	r3, sp, #8
 8000e26:	3300      	adds	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < frame->DLC; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e010      	b.n	8000e52 <CAN_frameToString+0xaa>
        sprintf(temp, "%02X ", frame->data[i]);
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	4413      	add	r3, r2
 8000e36:	3307      	adds	r3, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <CAN_frameToString+0xc8>)
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f001 fe92 	bl	8002b68 <siprintf>
        strcat(str, temp);
 8000e44:	68f9      	ldr	r1, [r7, #12]
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f001 feae 	bl	8002ba8 <strcat>
    for (int i = 0; i < frame->DLC; i++) {
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	799b      	ldrb	r3, [r3, #6]
 8000e56:	461a      	mov	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	dbe8      	blt.n	8000e30 <CAN_frameToString+0x88>
 8000e5e:	46b5      	mov	sp, r6
    }
}
 8000e60:	bf00      	nop
 8000e62:	371c      	adds	r7, #28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800329c 	.word	0x0800329c
 8000e70:	080032c8 	.word	0x080032c8

08000e74 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    if ((EXTI->PR & EXTI_PR_PR0) != 0) {
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <EXTI0_IRQHandler+0x24>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d007      	beq.n	8000e94 <EXTI0_IRQHandler+0x20>
        // Button is pressed
    	EXTI0_buttonpressCallback();
 8000e84:	f000 f80a 	bl	8000e9c <EXTI0_buttonpressCallback>
        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <EXTI0_IRQHandler+0x24>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4a02      	ldr	r2, [pc, #8]	; (8000e98 <EXTI0_IRQHandler+0x24>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6153      	str	r3, [r2, #20]

    }
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40013c00 	.word	0x40013c00

08000e9c <EXTI0_buttonpressCallback>:

void EXTI0_buttonpressCallback(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	CAN_sendFrame(Counter);
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <EXTI0_buttonpressCallback+0x1c>)
 8000ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea4:	f7ff ff18 	bl	8000cd8 <CAN_sendFrame>
	Counter.data[0]+= 1;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <EXTI0_buttonpressCallback+0x1c>)
 8000eaa:	79db      	ldrb	r3, [r3, #7]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <EXTI0_buttonpressCallback+0x1c>)
 8000eb2:	71da      	strb	r2, [r3, #7]
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000094 	.word	0x20000094

08000ebc <CAN_receiveCallback>:


// Receive callback function to be implemented by user
void CAN_receiveCallback(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0a0      	sub	sp, #128	; 0x80
 8000ec0:	af02      	add	r7, sp, #8
	CAN_frame CAN_mess;
	// read the message from the FIFO
	CAN_mess.IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) ? 1 : 0; // check if extended identifier
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <CAN_receiveCallback+0x164>)
 8000ec4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (CAN_mess.IDE == 0) { // standard identifier
 8000eda:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d107      	bne.n	8000ef2 <CAN_receiveCallback+0x36>
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF; //Fetch the 11bits ID
 8000ee2:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <CAN_receiveCallback+0x164>)
 8000ee4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60
 8000ef0:	e006      	b.n	8000f00 <CAN_receiveCallback+0x44>
	}else { // extended identifier
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFF; //Fetch the 29 bit ID
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <CAN_receiveCallback+0x164>)
 8000ef4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000efe:	663b      	str	r3, [r7, #96]	; 0x60
	}
	CAN_mess.RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) ? 1 : 0; //Is it a reception trame?
 8000f00:	4b47      	ldr	r3, [pc, #284]	; (8001020 <CAN_receiveCallback+0x164>)
 8000f02:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	CAN_mess.DLC = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8000f18:	4b41      	ldr	r3, [pc, #260]	; (8001020 <CAN_receiveCallback+0x164>)
 8000f1a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8000f2e:	e010      	b.n	8000f52 <CAN_receiveCallback+0x96>
		CAN_mess.data[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i*8)) & 0xFF;
 8000f30:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <CAN_receiveCallback+0x164>)
 8000f32:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	f107 0267 	add.w	r2, r7, #103	; 0x67
 8000f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f46:	4413      	add	r3, r2
 8000f48:	460a      	mov	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f4e:	3301      	adds	r3, #1
 8000f50:	677b      	str	r3, [r7, #116]	; 0x74
 8000f52:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000f56:	461a      	mov	r2, r3
 8000f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dbe8      	blt.n	8000f30 <CAN_receiveCallback+0x74>
	}
	int overwrite = pushToBuffer(ReciveBuffer,(void**)&CAN_mess);
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <CAN_receiveCallback+0x168>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8ca 	bl	8001102 <pushToBuffer>
 8000f6e:	6738      	str	r0, [r7, #112]	; 0x70
	if (overwrite == 1){
 8000f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <CAN_receiveCallback+0xc0>
		serial_puts("Buffer is full, overwriting oldest message\r\n");
 8000f76:	482c      	ldr	r0, [pc, #176]	; (8001028 <CAN_receiveCallback+0x16c>)
 8000f78:	f000 fe3e 	bl	8001bf8 <serial_puts>
	}
	char stringbuffer[80];
	CAN_frameToString(&CAN_mess,stringbuffer);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff0e 	bl	8000da8 <CAN_frameToString>
	serial_puts(stringbuffer);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fe31 	bl	8001bf8 <serial_puts>
	newLine();
 8000f96:	f000 fe4b 	bl	8001c30 <newLine>

	//5 checking frame with id 0x010
	if (CAN_mess.ID == 0x010){
 8000f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d13b      	bne.n	8001018 <CAN_receiveCallback+0x15c>
		if (CAN_mess.RTR == 1){//5.2 Request with id 0x10
 8000fa0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d116      	bne.n	8000fd6 <CAN_receiveCallback+0x11a>
			serial_puts("Received request frame with ID 0x010\r\n");
 8000fa8:	4820      	ldr	r0, [pc, #128]	; (800102c <CAN_receiveCallback+0x170>)
 8000faa:	f000 fe25 	bl	8001bf8 <serial_puts>
			serial_puts("Sending led state trough can\r\n");
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <CAN_receiveCallback+0x174>)
 8000fb0:	f000 fe22 	bl	8001bf8 <serial_puts>
			CAN_frame led_Frame;
			led_Frame.ID = 0x010;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	603b      	str	r3, [r7, #0]
			led_Frame.IDE = 0x0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	713b      	strb	r3, [r7, #4]
			led_Frame.RTR = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	717b      	strb	r3, [r7, #5]
			led_Frame.DLC = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	71bb      	strb	r3, [r7, #6]
			led_Frame.data[0] = readLEDState() ;
 8000fc4:	f000 f83a 	bl	800103c <readLEDState>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
			CAN_sendFrame(led_Frame);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd0:	f7ff fe82 	bl	8000cd8 <CAN_sendFrame>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));

		}

	}
}
 8000fd4:	e020      	b.n	8001018 <CAN_receiveCallback+0x15c>
			serial_puts("Received data frame with ID 0x010\r\n");
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <CAN_receiveCallback+0x178>)
 8000fd8:	f000 fe0e 	bl	8001bf8 <serial_puts>
			serial_puts(sprintf("Green:%d Orange:%d Red:%d Blue:%d\r\n",CAN_mess.data[0] & 0b0001,(CAN_mess.data[0] & 0b0010)>>1,(CAN_mess.data[0] & 0b0100)>>2,(CAN_mess.data[0] & 0b1000)>>3));
 8000fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fea:	105b      	asrs	r3, r3, #1
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ff4:	109b      	asrs	r3, r3, #2
 8000ff6:	f003 0101 	and.w	r1, r3, #1
 8000ffa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ffe:	10db      	asrs	r3, r3, #3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	460b      	mov	r3, r1
 8001008:	4601      	mov	r1, r0
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <CAN_receiveCallback+0x17c>)
 800100c:	f001 fdac 	bl	8002b68 <siprintf>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fdf0 	bl	8001bf8 <serial_puts>
}
 8001018:	bf00      	nop
 800101a:	3778      	adds	r7, #120	; 0x78
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40006400 	.word	0x40006400
 8001024:	200000a4 	.word	0x200000a4
 8001028:	080032d0 	.word	0x080032d0
 800102c:	08003300 	.word	0x08003300
 8001030:	08003328 	.word	0x08003328
 8001034:	08003348 	.word	0x08003348
 8001038:	0800336c 	.word	0x0800336c

0800103c <readLEDState>:

uint8_t readLEDState() {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  // Read the current state of the LEDs
  uint8_t ledState = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_12) ? 1 : 0; // Read Green LED state
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <readLEDState+0x90>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b25a      	sxtb	r2, r3
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4313      	orrs	r3, r2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_13) ? (1 << 1) : 0; // Read Orange LED state
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <readLEDState+0x90>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <readLEDState+0x38>
 8001070:	2302      	movs	r3, #2
 8001072:	e000      	b.n	8001076 <readLEDState+0x3a>
 8001074:	2300      	movs	r3, #0
 8001076:	b25a      	sxtb	r2, r3
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_14) ? (1 << 2) : 0; // Read Red LED state
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <readLEDState+0x90>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <readLEDState+0x56>
 800108e:	2304      	movs	r3, #4
 8001090:	e000      	b.n	8001094 <readLEDState+0x58>
 8001092:	2300      	movs	r3, #0
 8001094:	b25a      	sxtb	r2, r3
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	4313      	orrs	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	71fb      	strb	r3, [r7, #7]
  ledState |= (GPIOD->ODR & GPIO_ODR_ODR_15) ? (1 << 3) : 0; // Read Blue LED state
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <readLEDState+0x90>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <readLEDState+0x74>
 80010ac:	2308      	movs	r3, #8
 80010ae:	e000      	b.n	80010b2 <readLEDState+0x76>
 80010b0:	2300      	movs	r3, #0
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	71fb      	strb	r3, [r7, #7]

  return ledState;
 80010be:	79fb      	ldrb	r3, [r7, #7]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <getNewBuffer>:
	int readIndex;
	int writeIndex;
	int bufferLenght;
}CircularBuffer;

CircularBuffer* getNewBuffer(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  CircularBuffer* newbuffer = (CircularBuffer*) malloc(sizeof(CircularBuffer));
 80010d6:	20ac      	movs	r0, #172	; 0xac
 80010d8:	f001 fc46 	bl	8002968 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	607b      	str	r3, [r7, #4]
  newbuffer->readIndex = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  newbuffer->writeIndex = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  newbuffer->bufferLenght = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  return newbuffer;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <pushToBuffer>:

int pushToBuffer(CircularBuffer *buffer, void* frame){
 8001102:	b490      	push	{r4, r7}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  if(buffer->bufferLenght == 10){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d101      	bne.n	800111a <pushToBuffer+0x18>
    //Buffer plein
    return 1;
 8001116:	2301      	movs	r3, #1
 8001118:	e023      	b.n	8001162 <pushToBuffer+0x60>
  }

  buffer->frameBuffer[buffer->writeIndex] = *(CAN_frame*)frame;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	441a      	add	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4614      	mov	r4, r2
 800112a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  buffer->bufferLenght++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  if(buffer->writeIndex == 10){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d104      	bne.n	8001152 <pushToBuffer+0x50>
    buffer->writeIndex = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8001150:	e006      	b.n	8001160 <pushToBuffer+0x5e>
  }else{
    buffer->writeIndex++;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  }
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bc90      	pop	{r4, r7}
 800116a:	4770      	bx	lr

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	CAN_frame frame;

	// Initialiser les champs de la structure
	frame.ID = 0x524010;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <main+0x60>)
 8001174:	603b      	str	r3, [r7, #0]
	frame.IDE = 0x1;
 8001176:	2301      	movs	r3, #1
 8001178:	713b      	strb	r3, [r7, #4]
	frame.RTR = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	717b      	strb	r3, [r7, #5]
	frame.DLC = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	71bb      	strb	r3, [r7, #6]
	frame.data[0] = 0xAA;
 8001182:	23aa      	movs	r3, #170	; 0xaa
 8001184:	71fb      	strb	r3, [r7, #7]
	frame.data[1] = 0xBB;
 8001186:	23bb      	movs	r3, #187	; 0xbb
 8001188:	723b      	strb	r3, [r7, #8]
	frame.data[2] = 0xCC;
 800118a:	23cc      	movs	r3, #204	; 0xcc
 800118c:	727b      	strb	r3, [r7, #9]
	frame.data[3] = 0xDD;
 800118e:	23dd      	movs	r3, #221	; 0xdd
 8001190:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fddf 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f81b 	bl	80011d0 <SystemClock_Config>
  init_usart_int();
 800119a:	f000 fca1 	bl	8001ae0 <init_usart_int>
  RTC_Init();
 800119e:	f000 f911 	bl	80013c4 <RTC_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  CAN_GPIO_Init();
 80011a2:	f7ff fc3d 	bl	8000a20 <CAN_GPIO_Init>
  CAN_Counter_Init();
 80011a6:	f7ff fc23 	bl	80009f0 <CAN_Counter_Init>
  UART_Init();
 80011aa:	f7ff fa01 	bl	80005b0 <UART_Init>
  //UART_Init_test();

  //2.3
  //32bit mode, list mode
  //ID = 0x010,standard ID, accept both data and request frame
  CAN_config(1,1,(0x10 << 5),0x2,(0x10 << 5),0x00);
 80011ae:	2300      	movs	r3, #0
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	2101      	movs	r1, #1
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fc81 	bl	8000ac8 <CAN_config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80011c6:	b662      	cpsie	i
}
 80011c8:	bf00      	nop

  /* USER CODE END 2 */
  __enable_irq();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80011ca:	e7fe      	b.n	80011ca <main+0x5e>
 80011cc:	00524010 	.word	0x00524010

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fbca 	bl	8002978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a27      	ldr	r2, [pc, #156]	; (800129c <SystemClock_Config+0xcc>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <SystemClock_Config+0xd0>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001240:	2308      	movs	r3, #8
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001244:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800124e:	2307      	movs	r3, #7
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fef8 	bl	800204c <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001262:	f000 f81f 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001272:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2105      	movs	r1, #5
 8001284:	4618      	mov	r0, r3
 8001286:	f001 f959 	bl	800253c <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001290:	f000 f808 	bl	80012a4 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	; 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <__NVIC_GetPriorityGrouping>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void RTC_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
	// Init USART2
	USART2_Init();
 80013ca:	f000 f945 	bl	8001658 <USART2_Init>

	// Enable Power Clock
	__IO uint32_t tmpreg = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <RTC_Init+0x114>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <RTC_Init+0x114>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
	// Delay after an RCC peripheral clock enabling
	tmpreg = (RCC->APB1ENR & RCC_APB1ENR_PWREN);
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <RTC_Init+0x114>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
	(void)tmpreg;
 80013e8:	687b      	ldr	r3, [r7, #4]

	// Enable LSI
	RCC->CSR |= RCC_CSR_LSION;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <RTC_Init+0x114>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	4a3a      	ldr	r2, [pc, #232]	; (80014d8 <RTC_Init+0x114>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6753      	str	r3, [r2, #116]	; 0x74

	// Wait until LSI is stable
	while ((RCC->CSR & RCC_CSR_LSIRDY) == 0) {}
 80013f6:	bf00      	nop
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <RTC_Init+0x114>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f9      	beq.n	80013f8 <RTC_Init+0x34>

	// Enable write access to Backup domain
	PWR->CR |= PWR_CR_DBP;
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <RTC_Init+0x118>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a34      	ldr	r2, [pc, #208]	; (80014dc <RTC_Init+0x118>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140e:	6013      	str	r3, [r2, #0]

	// Confirm write access has been enabled
	while((PWR->CR & PWR_CR_DBP) == 0) {}
 8001410:	bf00      	nop
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <RTC_Init+0x118>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f9      	beq.n	8001412 <RTC_Init+0x4e>

	// Reset the Backup domain only if the RTC Clock source is different from "No clock" and "LSI oscillator clock"
	uint32_t rtcsel = ((RCC->BDCR & RCC_BDCR_RTCSEL) >> RCC_BDCR_RTCSEL_Pos);
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <RTC_Init+0x114>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	60fb      	str	r3, [r7, #12]
	if((rtcsel != 0b00) && (rtcsel != 0b10))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <RTC_Init+0x9a>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d013      	beq.n	800145e <RTC_Init+0x9a>
	{
	  // Store the content of BDCR register before the reset of Backup Domain
	  uint32_t old_bdcr = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <RTC_Init+0x114>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800143e:	60bb      	str	r3, [r7, #8]

	  // RTC Clock selection can be changed only if the Backup Domain is reset
	  RCC->BDCR |= RCC_BDCR_BDRST;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <RTC_Init+0x114>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <RTC_Init+0x114>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6713      	str	r3, [r2, #112]	; 0x70
	  RCC->BDCR &= ~RCC_BDCR_BDRST;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <RTC_Init+0x114>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <RTC_Init+0x114>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6713      	str	r3, [r2, #112]	; 0x70

	  // Restore the Content of BDCR register
	  RCC->BDCR = old_bdcr;
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <RTC_Init+0x114>)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
	}

	// Select LSI oscillator as RTC clock source
	RCC->BDCR |= RCC_BDCR_RTCSEL_1;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <RTC_Init+0x114>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <RTC_Init+0x114>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001468:	6713      	str	r3, [r2, #112]	; 0x70

	// Enable RTC clock
	RCC->BDCR |= RCC_BDCR_RTCEN;
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <RTC_Init+0x114>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <RTC_Init+0x114>)
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	6713      	str	r3, [r2, #112]	; 0x70

	// Unlock write protection on RTC registers
	RTC->WPR = 0xCA;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <RTC_Init+0x11c>)
 8001478:	22ca      	movs	r2, #202	; 0xca
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <RTC_Init+0x11c>)
 800147e:	2253      	movs	r2, #83	; 0x53
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

	// Enable RTC initialization mode
	RTC->ISR |= RTC_ISR_INIT;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <RTC_Init+0x11c>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <RTC_Init+0x11c>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	60d3      	str	r3, [r2, #12]
	// Wait until the INITF bit is set (this should only take a few clock cycles)
	while((RTC->ISR & RTC_ISR_INITF) == 0) {}
 800148e:	bf00      	nop
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <RTC_Init+0x11c>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f9      	beq.n	8001490 <RTC_Init+0xcc>

	// SynchPrediv = 255, AsynchPrediv = 127
	RTC->PRER = 255;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <RTC_Init+0x11c>)
 800149e:	22ff      	movs	r2, #255	; 0xff
 80014a0:	611a      	str	r2, [r3, #16]
	RTC->PRER |= (127 << RTC_PRER_PREDIV_A_Pos);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <RTC_Init+0x11c>)
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <RTC_Init+0x11c>)
 80014a8:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 80014ac:	6113      	str	r3, [r2, #16]

	// Check if the RTC calendar has already been initialized in a previous reset. If not, start the init sequence
	if ((RTC->ISR & RTC_ISR_INITS) == 0) {
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <RTC_Init+0x11c>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <RTC_Init+0xfa>
		RTC_Calendar_Init();
 80014ba:	f000 f813 	bl	80014e4 <RTC_Calendar_Init>
	}

	// Exit initialization mode
	RTC->ISR &= ~RTC_ISR_INIT;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <RTC_Init+0x11c>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <RTC_Init+0x11c>)
 80014c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014c8:	60d3      	str	r3, [r2, #12]

	// Re-enable RTC registers write protection
	RTC->WPR = 0xFF;
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <RTC_Init+0x11c>)
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	40002800 	.word	0x40002800

080014e4 <RTC_Calendar_Init>:
  * @brief Sets the RTC calendar using USART prompts
  * @param None
  * @retval None
  */
void RTC_Calendar_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
	uint32_t date_tmp_reg = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
	uint32_t time_tmp_reg = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]

	// Wait until the user confirms they are in front of a TTY terminal
	USART2_WaitUser();
 80014f2:	f000 f99b 	bl	800182c <USART2_WaitUser>

	// Prompt time and date
	date_tmp_reg |= (RTC_Calendar_Init_Prompt("Enter day DD: ") << RTC_DR_DU_Pos);
 80014f6:	481f      	ldr	r0, [pc, #124]	; (8001574 <RTC_Calendar_Init+0x90>)
 80014f8:	f000 f848 	bl	800158c <RTC_Calendar_Init_Prompt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	607b      	str	r3, [r7, #4]
	date_tmp_reg |= (RTC_Calendar_Init_Prompt("Enter month MM: ") << RTC_DR_MU_Pos);
 8001506:	481c      	ldr	r0, [pc, #112]	; (8001578 <RTC_Calendar_Init+0x94>)
 8001508:	f000 f840 	bl	800158c <RTC_Calendar_Init_Prompt>
 800150c:	4603      	mov	r3, r0
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	607b      	str	r3, [r7, #4]
	date_tmp_reg |= (RTC_Calendar_Init_Prompt("Enter year AA: ") << RTC_DR_YU_Pos);
 8001518:	4818      	ldr	r0, [pc, #96]	; (800157c <RTC_Calendar_Init+0x98>)
 800151a:	f000 f837 	bl	800158c <RTC_Calendar_Init_Prompt>
 800151e:	4603      	mov	r3, r0
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4313      	orrs	r3, r2
 8001528:	607b      	str	r3, [r7, #4]
	time_tmp_reg |= (RTC_Calendar_Init_Prompt("Enter hour HH: ") << RTC_TR_HU_Pos);
 800152a:	4815      	ldr	r0, [pc, #84]	; (8001580 <RTC_Calendar_Init+0x9c>)
 800152c:	f000 f82e 	bl	800158c <RTC_Calendar_Init_Prompt>
 8001530:	4603      	mov	r3, r0
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	461a      	mov	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	603b      	str	r3, [r7, #0]
	time_tmp_reg |= (RTC_Calendar_Init_Prompt("Enter minutes MM: ") << RTC_TR_MNU_Pos);
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <RTC_Calendar_Init+0xa0>)
 800153e:	f000 f825 	bl	800158c <RTC_Calendar_Init_Prompt>
 8001542:	4603      	mov	r3, r0
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	603b      	str	r3, [r7, #0]

	// Save values to registers
    RTC->TR = (uint32_t)(time_tmp_reg & (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST  | RTC_TR_SU | RTC_TR_PM));
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <RTC_Calendar_Init+0xa4>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001556:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800155a:	6013      	str	r3, [r2, #0]
    RTC->DR = (uint32_t)(date_tmp_reg & (RTC_DR_YT | RTC_DR_YU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_WDU));
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <RTC_Calendar_Init+0xa4>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001568:	6053      	str	r3, [r2, #4]
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08003390 	.word	0x08003390
 8001578:	080033a0 	.word	0x080033a0
 800157c:	080033b4 	.word	0x080033b4
 8001580:	080033c4 	.word	0x080033c4
 8001584:	080033d4 	.word	0x080033d4
 8001588:	40002800 	.word	0x40002800

0800158c <RTC_Calendar_Init_Prompt>:
  * @brief Prompts the user for a two-digits number and returns it as BCD
  * @param prompt a string literal that will be displayed to the user
  * @retval bcd the number typed as BCD
  */
uint8_t RTC_Calendar_Init_Prompt(char *prompt)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	// Print prompt
	serial_puts(prompt);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb2f 	bl	8001bf8 <serial_puts>

	// Wait for user input
	uint8_t input[10];
	USART2_Receive_line(input, 10, 1);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2201      	movs	r2, #1
 80015a0:	210a      	movs	r1, #10
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f8ee 	bl	8001784 <USART2_Receive_line>
	USART2_NewLine();
 80015a8:	f000 f96c 	bl	8001884 <USART2_NewLine>

	// Turn input to BCD and return it
	return c_to_bcd(input[0], input[1]);
 80015ac:	7b3b      	ldrb	r3, [r7, #12]
 80015ae:	7b7a      	ldrb	r2, [r7, #13]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f805 	bl	80015c2 <c_to_bcd>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <c_to_bcd>:
  * @param c_t tens digit
  * @param c_u units digit
  * @retval bcd the two chars coded as bcd. Any invalid char will be coded as a 0
  */
uint8_t c_to_bcd(char c_t, char c_u)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	460a      	mov	r2, r1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	4613      	mov	r3, r2
 80015d0:	71bb      	strb	r3, [r7, #6]
	uint8_t bcd_t = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
	uint8_t bcd_u = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73bb      	strb	r3, [r7, #14]
	uint8_t bcd = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	737b      	strb	r3, [r7, #13]

	// Tens
	if (c_t >= '0' && c_t <= '9') {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b2f      	cmp	r3, #47	; 0x2f
 80015e2:	d905      	bls.n	80015f0 <c_to_bcd+0x2e>
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b39      	cmp	r3, #57	; 0x39
 80015e8:	d802      	bhi.n	80015f0 <c_to_bcd+0x2e>
		bcd_t = (c_t - '0');
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	3b30      	subs	r3, #48	; 0x30
 80015ee:	73fb      	strb	r3, [r7, #15]
    }

	// Units
	if (c_u >= '0' && c_u <= '9') {
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b2f      	cmp	r3, #47	; 0x2f
 80015f4:	d905      	bls.n	8001602 <c_to_bcd+0x40>
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	2b39      	cmp	r3, #57	; 0x39
 80015fa:	d802      	bhi.n	8001602 <c_to_bcd+0x40>
		bcd_u = (c_u - '0');
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	3b30      	subs	r3, #48	; 0x30
 8001600:	73bb      	strb	r3, [r7, #14]
    }

	// Merge the two
	bcd = (bcd_t << 4) | bcd_u;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	b25a      	sxtb	r2, r3
 8001608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	737b      	strb	r3, [r7, #13]

    return bcd;
 8001612:	7b7b      	ldrb	r3, [r7, #13]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <bcd_to_int>:
  * @brief Turn an 8-bit bcd number into an 8-bit binary number
  * @param bcd the binary coded decimal number
  * @retval n the binary number
  */
uint8_t bcd_to_int(uint8_t bcd)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	uint8_t n_t = (bcd & 0xF0) >> 4;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	73fb      	strb	r3, [r7, #15]
	uint8_t n_u = (bcd & 0x0F);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	73bb      	strb	r3, [r7, #14]
	uint8_t n = (n_t*10 + n_u);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	461a      	mov	r2, r3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	4413      	add	r3, r2
 8001648:	737b      	strb	r3, [r7, #13]
	return n;
 800164a:	7b7b      	ldrb	r3, [r7, #13]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <USART2_Init>:
/**
  * @brief  Init USART2 at 19200 bauds
  * @retval None
  * */
void USART2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <USART2_Init+0xf8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a3b      	ldr	r2, [pc, #236]	; (8001750 <USART2_Init+0xf8>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
    // Setup PA2 and PA3 as Alternate Function
	GPIOA->MODER |= 0x000000A0;
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <USART2_Init+0xfc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a39      	ldr	r2, [pc, #228]	; (8001754 <USART2_Init+0xfc>)
 8001670:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001674:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <USART2_Init+0xfc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a36      	ldr	r2, [pc, #216]	; (8001754 <USART2_Init+0xfc>)
 800167c:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001680:	6013      	str	r3, [r2, #0]
	// Setup Alternate function as USART2
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <USART2_Init+0xfc>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a33      	ldr	r2, [pc, #204]	; (8001754 <USART2_Init+0xfc>)
 8001688:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 800168c:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <USART2_Init+0xfc>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a30      	ldr	r2, [pc, #192]	; (8001754 <USART2_Init+0xfc>)
 8001694:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001698:	6213      	str	r3, [r2, #32]
	// Push pull output
	GPIOA->OTYPER &= 0xFFFFFFF3;
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <USART2_Init+0xfc>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <USART2_Init+0xfc>)
 80016a0:	f023 030c 	bic.w	r3, r3, #12
 80016a4:	6053      	str	r3, [r2, #4]
	// Pull up resistor on
	GPIOA->PUPDR &= 0xFFFFFF5F;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <USART2_Init+0xfc>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <USART2_Init+0xfc>)
 80016ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016b0:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <USART2_Init+0xfc>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <USART2_Init+0xfc>)
 80016b8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80016bc:	60d3      	str	r3, [r2, #12]
	// Output speed set to VeryHigh
	GPIOA->OSPEEDR |= 0x000000F0;
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <USART2_Init+0xfc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a24      	ldr	r2, [pc, #144]	; (8001754 <USART2_Init+0xfc>)
 80016c4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80016c8:	6093      	str	r3, [r2, #8]

	// Reset/de-reset USART2
	RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <USART2_Init+0xf8>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <USART2_Init+0xf8>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <USART2_Init+0xf8>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <USART2_Init+0xf8>)
 80016dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016e0:	6213      	str	r3, [r2, #32]
	// Activate USART2 Clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <USART2_Init+0xf8>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <USART2_Init+0xf8>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
	// Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity
	// Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <USART2_Init+0x100>)
 80016f0:	f248 022c 	movw	r2, #32812	; 0x802c
 80016f4:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <USART2_Init+0x100>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample points
	USART2->CR3 = 0x00000000;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <USART2_Init+0x100>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <USART2_Init+0x100>)
 8001704:	f241 1217 	movw	r2, #4375	; 0x1117
 8001708:	609a      	str	r2, [r3, #8]
	// Enable UART. Tx interrupts will only be enabled when there is a transmission to do
	USART2->CR1 = 0x0000A00C;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <USART2_Init+0x100>)
 800170c:	f24a 020c 	movw	r2, #40972	; 0xa00c
 8001710:	60da      	str	r2, [r3, #12]

	// Wait around 0.1ms. No HAL so we're doing it the old-fashioned way.
	// Note that we're using volatile to prevent the compiler from optimising the loop away
	volatile uint32_t n = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
	while (n < 1680) {
 8001716:	e002      	b.n	800171e <USART2_Init+0xc6>
		++n;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
	while (n < 1680) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8001724:	d3f8      	bcc.n	8001718 <USART2_Init+0xc0>
	}

	// Enable USART2 interrupt
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001726:	f7ff fdc3 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 800172a:	4603      	mov	r3, r0
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe13 	bl	800135c <NVIC_EncodePriority>
 8001736:	4603      	mov	r3, r0
 8001738:	4619      	mov	r1, r3
 800173a:	2026      	movs	r0, #38	; 0x26
 800173c:	f7ff fde4 	bl	8001308 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001740:	2026      	movs	r0, #38	; 0x26
 8001742:	f7ff fdc3 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000
 8001758:	40004400 	.word	0x40004400

0800175c <__io_getchar>:
/**
  * @brief  Receive a single char from host through USART2. If none is available, the function waits
  * @retval int the received char
  * */
int __io_getchar(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	// Wait until the data register receives data
	while ((USART2->SR & USART_SR_RXNE) == 0) {}
 8001760:	bf00      	nop
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <__io_getchar+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f9      	beq.n	8001762 <__io_getchar+0x6>

	// Read and return the lowest byte of DR
	return (USART2->DR & 0xFF);
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__io_getchar+0x24>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	b2db      	uxtb	r3, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40004400 	.word	0x40004400

08001784 <USART2_Receive_line>:
  * @param 	max_len the size of the buffer
  * @param 	feedback_enable whether or not to send typed chars back over USART. 1 to enable, 0 to disable
  * @retval nb_rx number of chars received
  * */
int32_t USART2_Receive_line(uint8_t *data, uint32_t max_len, uint8_t feedback_enable)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	71fb      	strb	r3, [r7, #7]
	// Number of chars received
	uint32_t nb_rx = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

	// Read until a newline char is received
	while (1) {
		// Wait and read the next char
		char rx_ch = __io_getchar();
 8001796:	f7ff ffe1 	bl	800175c <__io_getchar>
 800179a:	4603      	mov	r3, r0
 800179c:	74fb      	strb	r3, [r7, #19]

		// If it is a newline, exit loop
		if ((rx_ch == '\n') || (rx_ch == '\r')) {
 800179e:	7cfb      	ldrb	r3, [r7, #19]
 80017a0:	2b0a      	cmp	r3, #10
 80017a2:	d037      	beq.n	8001814 <USART2_Receive_line+0x90>
 80017a4:	7cfb      	ldrb	r3, [r7, #19]
 80017a6:	2b0d      	cmp	r3, #13
 80017a8:	d034      	beq.n	8001814 <USART2_Receive_line+0x90>
			break;
		};

		if (rx_ch == 0x7F) {
 80017aa:	7cfb      	ldrb	r3, [r7, #19]
 80017ac:	2b7f      	cmp	r3, #127	; 0x7f
 80017ae:	d106      	bne.n	80017be <USART2_Receive_line+0x3a>
			// Backspace support
			if (nb_rx > 0) {
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d02b      	beq.n	800180e <USART2_Receive_line+0x8a>
				nb_rx--;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e007      	b.n	80017ce <USART2_Receive_line+0x4a>
				continue;
			}
		}
		else {
			// Save received char in buffer
			data[nb_rx] = rx_ch;
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4413      	add	r3, r2
 80017c4:	7cfa      	ldrb	r2, [r7, #19]
 80017c6:	701a      	strb	r2, [r3, #0]
			nb_rx++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
		}

		// If enabled, send the character back over USART
		if (feedback_enable) {
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <USART2_Receive_line+0x7e>
			// Wait until there are no transmissions in progress
			while (((USART2->CR1 & USART_CR1_TXEIE) != 0) || ((USART2->SR & USART_SR_TXE) == 0)) {}
 80017d4:	bf00      	nop
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <USART2_Receive_line+0xa4>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <USART2_Receive_line+0x52>
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <USART2_Receive_line+0xa4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f3      	beq.n	80017d6 <USART2_Receive_line+0x52>

			// Push char to data register
			USART2->DR = USART_DR_DR_Msk & rx_ch;
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <USART2_Receive_line+0xa4>)
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	6053      	str	r3, [r2, #4]

			// Wait until char has been sent
			while ((USART2->SR & USART_SR_TXE) == 0) {}
 80017f4:	bf00      	nop
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <USART2_Receive_line+0xa4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f9      	beq.n	80017f6 <USART2_Receive_line+0x72>
		}

		// If the max number of chars has been reached, exit loop
		if (nb_rx >= (max_len-1)) {
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	d202      	bcs.n	8001812 <USART2_Receive_line+0x8e>
 800180c:	e7c3      	b.n	8001796 <USART2_Receive_line+0x12>
				continue;
 800180e:	bf00      	nop
	while (1) {
 8001810:	e7c1      	b.n	8001796 <USART2_Receive_line+0x12>
			break;
 8001812:	bf00      	nop
		}
	}

	// Insert \0
	data[nb_rx] = '\0';
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

	return nb_rx;
 800181e:	697b      	ldr	r3, [r7, #20]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40004400 	.word	0x40004400

0800182c <USART2_WaitUser>:
/**
  * @brief  Print prompt until the user confirms the TTY terminal is open by pressing enter
  * @retval None
  * */
void USART2_WaitUser(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	while (1) {
		// Print prompt
		serial_puts("Press enter to begin...\r\n");
 8001832:	4811      	ldr	r0, [pc, #68]	; (8001878 <USART2_WaitUser+0x4c>)
 8001834:	f000 f9e0 	bl	8001bf8 <serial_puts>

		// Poll for a received char
		if ((USART2->SR & USART_SR_RXNE) != 0) {
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <USART2_WaitUser+0x50>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <USART2_WaitUser+0x2c>
			// Retreive char. If it's a newline, exit loop
			char rx_ch = __io_getchar();
 8001844:	f7ff ff8a 	bl	800175c <__io_getchar>
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
			if ((rx_ch == '\n') || (rx_ch == '\r')) {
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d00d      	beq.n	800186e <USART2_WaitUser+0x42>
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b0d      	cmp	r3, #13
 8001856:	d00a      	beq.n	800186e <USART2_WaitUser+0x42>
			};
		}

		// Wait around 1s between each prompt. No HAL so we're doing it the old-fashioned way.
		// Note that we're using volatile to prevent the compiler from optimising the loop away
		volatile uint32_t n = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
		while (n < 16800000) {
 800185c:	e002      	b.n	8001864 <USART2_WaitUser+0x38>
			++n;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	603b      	str	r3, [r7, #0]
		while (n < 16800000) {
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <USART2_WaitUser+0x54>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d3f8      	bcc.n	800185e <USART2_WaitUser+0x32>
	while (1) {
 800186c:	e7e1      	b.n	8001832 <USART2_WaitUser+0x6>
		}
	}
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08003428 	.word	0x08003428
 800187c:	40004400 	.word	0x40004400
 8001880:	01005900 	.word	0x01005900

08001884 <USART2_NewLine>:
/**
  * @brief  Print newline over USART
  * @retval None
  * */
void USART2_NewLine(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	serial_puts("\n\r");
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <USART2_NewLine+0x10>)
 800188a:	f000 f9b5 	bl	8001bf8 <serial_puts>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08003444 	.word	0x08003444

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018d6:	2007      	movs	r0, #7
 80018d8:	f000 fb84 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 fa60 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f000 ffd2 	bl	8002914 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20020000 	.word	0x20020000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200000a8 	.word	0x200000a8
 80019a4:	200000d0 	.word	0x200000d0

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <init_usart_int>:

	HAL_Delay(1);
}

// USART2 Initialization with Rx interrupt
void init_usart_int(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <init_usart_int+0xcc>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a30      	ldr	r2, [pc, #192]	; (8001bac <init_usart_int+0xcc>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	GPIOA->MODER |= 0x000000A0;
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <init_usart_int+0xd0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <init_usart_int+0xd0>)
 8001af6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001afa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <init_usart_int+0xd0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <init_usart_int+0xd0>)
 8001b02:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001b06:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <init_usart_int+0xd0>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <init_usart_int+0xd0>)
 8001b0e:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 8001b12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <init_usart_int+0xd0>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <init_usart_int+0xd0>)
 8001b1a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001b1e:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <init_usart_int+0xd0>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <init_usart_int+0xd0>)
 8001b26:	f023 030c 	bic.w	r3, r3, #12
 8001b2a:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <init_usart_int+0xd0>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <init_usart_int+0xd0>)
 8001b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b36:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <init_usart_int+0xd0>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <init_usart_int+0xd0>)
 8001b3e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001b42:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <init_usart_int+0xd0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <init_usart_int+0xd0>)
 8001b4a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001b4e:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <init_usart_int+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <init_usart_int+0xcc>)
 8001b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity, Rx interrupt enable
	//Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <init_usart_int+0xd4>)
 8001b5e:	f248 022c 	movw	r2, #32812	; 0x802c
 8001b62:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <init_usart_int+0xd4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <init_usart_int+0xd4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <init_usart_int+0xd4>)
 8001b72:	f241 1217 	movw	r2, #4375	; 0x1117
 8001b76:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A02C;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <init_usart_int+0xd4>)
 8001b7a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8001b7e:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f000 f959 	bl	8001e38 <HAL_Delay>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b86:	f7ff ff21 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff71 	bl	8001a78 <NVIC_EncodePriority>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	2026      	movs	r0, #38	; 0x26
 8001b9c:	f7ff ff42 	bl	8001a24 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001ba0:	2026      	movs	r0, #38	; 0x26
 8001ba2:	f7ff ff21 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <serial_putc>:

void serial_putc(char c)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <serial_putc+0x3c>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8001bc8:	bf00      	nop
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <serial_putc+0x3c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f9      	beq.n	8001bca <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8001bd6:	bf00      	nop
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <serial_putc+0x3c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f9      	beq.n	8001bd8 <serial_putc+0x20>
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40004400 	.word	0x40004400

08001bf8 <serial_puts>:

void serial_puts( char *msg)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001c04:	e009      	b.n	8001c1a <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffd2 	bl	8001bb8 <serial_putc>
		cnt++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <serial_puts+0xe>
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <newLine>:

void newLine()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001c34:	200a      	movs	r0, #10
 8001c36:	f7ff ffbf 	bl	8001bb8 <serial_putc>
	serial_putc(13); // retour chariot
 8001c3a:	200d      	movs	r0, #13
 8001c3c:	f7ff ffbc 	bl	8001bb8 <serial_putc>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <USART2_IRQHandler>:

	chaine[i]='\0';
	return(chaine);
}

void USART2_IRQHandler(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  // Check if the RXNE (Receive Data Register Not Empty) flag is set
  if (USART2->SR & USART_SR_RXNE) {
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <USART2_IRQHandler+0x84>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d034      	beq.n	8001cc0 <USART2_IRQHandler+0x7c>
    // Read the received data
    char data = USART2->DR;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <USART2_IRQHandler+0x84>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	71fb      	strb	r3, [r7, #7]
    // Store the received character in the buffer
    rxBuffer[rxIndex] = data;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	54ca      	strb	r2, [r1, r3]
    // Check for the word "trame"
    if (rxIndex > 3 && rxBuffer[rxIndex] == 'e' &&  rxBuffer[rxIndex - 1] == 'm' && rxBuffer[rxIndex - 2] == 'a' && rxBuffer[rxIndex - 3] == 'r' && rxBuffer[rxIndex - 4] == 't') {
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dd23      	ble.n	8001cb6 <USART2_IRQHandler+0x72>
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	2b65      	cmp	r3, #101	; 0x65
 8001c78:	d11d      	bne.n	8001cb6 <USART2_IRQHandler+0x72>
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	2b6d      	cmp	r3, #109	; 0x6d
 8001c86:	d116      	bne.n	8001cb6 <USART2_IRQHandler+0x72>
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b02      	subs	r3, #2
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	2b61      	cmp	r3, #97	; 0x61
 8001c94:	d10f      	bne.n	8001cb6 <USART2_IRQHandler+0x72>
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3b03      	subs	r3, #3
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	2b72      	cmp	r3, #114	; 0x72
 8001ca2:	d108      	bne.n	8001cb6 <USART2_IRQHandler+0x72>
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3b04      	subs	r3, #4
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <USART2_IRQHandler+0x8c>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	2b74      	cmp	r3, #116	; 0x74
 8001cb0:	d101      	bne.n	8001cb6 <USART2_IRQHandler+0x72>
    	handleTrameReceived();
 8001cb2:	f000 f80f 	bl	8001cd4 <handleTrameReceived>
    }

    // Increment the buffer index
    rxIndex += 1 % 12;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <USART2_IRQHandler+0x88>)
 8001cbe:	6013      	str	r3, [r2, #0]
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	200000b8 	.word	0x200000b8
 8001cd0:	200000ac 	.word	0x200000ac

08001cd4 <handleTrameReceived>:
void handleTrameReceived(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
	CAN_frame trame;
	trame.ID = 0x010;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	603b      	str	r3, [r7, #0]
	trame.IDE = 0x0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	713b      	strb	r3, [r7, #4]
	trame.RTR = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	717b      	strb	r3, [r7, #5]
	trame.DLC = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71bb      	strb	r3, [r7, #6]
	trame.data[0] = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	71fb      	strb	r3, [r7, #7]
	CAN_sendFrame(trame);
 8001cee:	463b      	mov	r3, r7
 8001cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf2:	f7fe fff1 	bl	8000cd8 <CAN_sendFrame>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2a:	f7ff fe3d 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f000 fdf7 	bl	8002920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7ff fa1b 	bl	800116c <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d44:	0800349c 	.word	0x0800349c
  ldr r2, =_sbss
 8001d48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d4c:	200000d0 	.word	0x200000d0

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f931 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fd86 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f93b 	bl	8002032 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd4:	f000 f911 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000010 	.word	0x20000010
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	200000bc 	.word	0x200000bc

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200000bc 	.word	0x200000bc

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000010 	.word	0x20000010

08001e80 <__NVIC_SetPriorityGrouping>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_SetPriority>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff47 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff5c 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffb0 	bl	8001fa0 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e267      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d075      	beq.n	8002156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00c      	beq.n	8002090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b82      	ldr	r3, [pc, #520]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d05b      	beq.n	8002154 <HAL_RCC_OscConfig+0x108>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d157      	bne.n	8002154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e242      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x74>
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6f      	ldr	r2, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6c      	ldr	r2, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fe8c 	bl	8001e20 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fe88 	bl	8001e20 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e207      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xc0>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fe78 	bl	8001e20 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fe74 	bl	8001e20 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1f3      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0xe8>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c7      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff fe2d 	bl	8001e20 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fe29 	bl	8001e20 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a8      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fe0c 	bl	8001e20 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fe08 	bl	8001e20 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e187      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d036      	beq.n	80022a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff fdec 	bl	8001e20 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fde8 	bl	8001e20 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e167      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x200>
 800226a:	e01b      	b.n	80022a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff fdd5 	bl	8001e20 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	e00e      	b.n	8002298 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff fdd1 	bl	8001e20 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d907      	bls.n	8002298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e150      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ea      	bne.n	800227a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8097 	beq.w	80023e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a7c      	ldr	r2, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fd91 	bl	8001e20 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff fd8d 	bl	8001e20 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e10c      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x2ea>
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x30c>
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a5b      	ldr	r2, [pc, #364]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002358:	4b58      	ldr	r3, [pc, #352]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a57      	ldr	r2, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	4b55      	ldr	r3, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a54      	ldr	r2, [pc, #336]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff fd52 	bl	8001e20 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff fd4e 	bl	8001e20 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0cb      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ee      	beq.n	8002380 <HAL_RCC_OscConfig+0x334>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fd3c 	bl	8001e20 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7ff fd38 	bl	8001e20 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0b5      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ee      	bne.n	80023ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a38      	ldr	r2, [pc, #224]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a1 	beq.w	800252c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d05c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d141      	bne.n	8002482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fd0c 	bl	8001e20 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff fd08 	bl	8001e20 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e087      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	491b      	ldr	r1, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff fce1 	bl	8001e20 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff fcdd 	bl	8001e20 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e05c      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x416>
 8002480:	e054      	b.n	800252c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fcca 	bl	8001e20 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff fcc6 	bl	8001e20 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e045      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
 80024ae:	e03d      	b.n	800252c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e038      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x4ec>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d028      	beq.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d121      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d11a      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	4293      	cmp	r3, r2
 8002502:	d111      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0cc      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d90c      	bls.n	8002578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b8      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800259a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	494d      	ldr	r1, [pc, #308]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d044      	beq.n	800265c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d119      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e07f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e067      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4934      	ldr	r1, [pc, #208]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7ff fbf8 	bl	8001e20 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7ff fbf4 	bl	8001e20 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20c      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e032      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4916      	ldr	r1, [pc, #88]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	490e      	ldr	r1, [pc, #56]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c2:	f000 f821 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	490a      	ldr	r1, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	5ccb      	ldrb	r3, [r1, r3]
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb58 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08003448 	.word	0x08003448
 8002700:	20000008 	.word	0x20000008
 8002704:	2000000c 	.word	0x2000000c

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800270c:	b094      	sub	sp, #80	; 0x50
 800270e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
 8002714:	2300      	movs	r3, #0
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002718:	2300      	movs	r3, #0
 800271a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002720:	4b79      	ldr	r3, [pc, #484]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d00d      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x40>
 800272c:	2b08      	cmp	r3, #8
 800272e:	f200 80e1 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x34>
 8002736:	2b04      	cmp	r3, #4
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x3a>
 800273a:	e0db      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_GetSysClockFreq+0x204>)
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002740:	e0db      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_GetSysClockFreq+0x208>)
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002746:	e0d8      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002750:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	2200      	movs	r2, #0
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
 8002768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
 8002776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800277a:	4622      	mov	r2, r4
 800277c:	462b      	mov	r3, r5
 800277e:	f04f 0000 	mov.w	r0, #0
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	0159      	lsls	r1, r3, #5
 8002788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278c:	0150      	lsls	r0, r2, #5
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4621      	mov	r1, r4
 8002794:	1a51      	subs	r1, r2, r1
 8002796:	6139      	str	r1, [r7, #16]
 8002798:	4629      	mov	r1, r5
 800279a:	eb63 0301 	sbc.w	r3, r3, r1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ac:	4659      	mov	r1, fp
 80027ae:	018b      	lsls	r3, r1, #6
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b6:	4651      	mov	r1, sl
 80027b8:	018a      	lsls	r2, r1, #6
 80027ba:	4651      	mov	r1, sl
 80027bc:	ebb2 0801 	subs.w	r8, r2, r1
 80027c0:	4659      	mov	r1, fp
 80027c2:	eb63 0901 	sbc.w	r9, r3, r1
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027da:	4690      	mov	r8, r2
 80027dc:	4699      	mov	r9, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	eb18 0303 	adds.w	r3, r8, r3
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	462b      	mov	r3, r5
 80027e8:	eb49 0303 	adc.w	r3, r9, r3
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027fa:	4629      	mov	r1, r5
 80027fc:	024b      	lsls	r3, r1, #9
 80027fe:	4621      	mov	r1, r4
 8002800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002804:	4621      	mov	r1, r4
 8002806:	024a      	lsls	r2, r1, #9
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	2200      	movs	r2, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002818:	f7fd fd2a 	bl	8000270 <__aeabi_uldivmod>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4613      	mov	r3, r2
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002824:	e058      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	2200      	movs	r2, #0
 800282e:	4618      	mov	r0, r3
 8002830:	4611      	mov	r1, r2
 8002832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	f04f 0000 	mov.w	r0, #0
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	0159      	lsls	r1, r3, #5
 800284e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002852:	0150      	lsls	r0, r2, #5
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4641      	mov	r1, r8
 800285a:	ebb2 0a01 	subs.w	sl, r2, r1
 800285e:	4649      	mov	r1, r9
 8002860:	eb63 0b01 	sbc.w	fp, r3, r1
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002878:	ebb2 040a 	subs.w	r4, r2, sl
 800287c:	eb63 050b 	sbc.w	r5, r3, fp
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	00eb      	lsls	r3, r5, #3
 800288a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800288e:	00e2      	lsls	r2, r4, #3
 8002890:	4614      	mov	r4, r2
 8002892:	461d      	mov	r5, r3
 8002894:	4643      	mov	r3, r8
 8002896:	18e3      	adds	r3, r4, r3
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	464b      	mov	r3, r9
 800289c:	eb45 0303 	adc.w	r3, r5, r3
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ae:	4629      	mov	r1, r5
 80028b0:	028b      	lsls	r3, r1, #10
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b8:	4621      	mov	r1, r4
 80028ba:	028a      	lsls	r2, r1, #10
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c2:	2200      	movs	r2, #0
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	61fa      	str	r2, [r7, #28]
 80028c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028cc:	f7fd fcd0 	bl	8000270 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_GetSysClockFreq+0x200>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0x204>)
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3750      	adds	r7, #80	; 0x50
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <__errno>:
 8002914:	4b01      	ldr	r3, [pc, #4]	; (800291c <__errno+0x8>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000014 	.word	0x20000014

08002920 <__libc_init_array>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4d0d      	ldr	r5, [pc, #52]	; (8002958 <__libc_init_array+0x38>)
 8002924:	4c0d      	ldr	r4, [pc, #52]	; (800295c <__libc_init_array+0x3c>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	2600      	movs	r6, #0
 800292c:	42a6      	cmp	r6, r4
 800292e:	d109      	bne.n	8002944 <__libc_init_array+0x24>
 8002930:	4d0b      	ldr	r5, [pc, #44]	; (8002960 <__libc_init_array+0x40>)
 8002932:	4c0c      	ldr	r4, [pc, #48]	; (8002964 <__libc_init_array+0x44>)
 8002934:	f000 fca6 	bl	8003284 <_init>
 8002938:	1b64      	subs	r4, r4, r5
 800293a:	10a4      	asrs	r4, r4, #2
 800293c:	2600      	movs	r6, #0
 800293e:	42a6      	cmp	r6, r4
 8002940:	d105      	bne.n	800294e <__libc_init_array+0x2e>
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	f855 3b04 	ldr.w	r3, [r5], #4
 8002948:	4798      	blx	r3
 800294a:	3601      	adds	r6, #1
 800294c:	e7ee      	b.n	800292c <__libc_init_array+0xc>
 800294e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002952:	4798      	blx	r3
 8002954:	3601      	adds	r6, #1
 8002956:	e7f2      	b.n	800293e <__libc_init_array+0x1e>
 8002958:	08003494 	.word	0x08003494
 800295c:	08003494 	.word	0x08003494
 8002960:	08003494 	.word	0x08003494
 8002964:	08003498 	.word	0x08003498

08002968 <malloc>:
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <malloc+0xc>)
 800296a:	4601      	mov	r1, r0
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f000 b877 	b.w	8002a60 <_malloc_r>
 8002972:	bf00      	nop
 8002974:	20000014 	.word	0x20000014

08002978 <memset>:
 8002978:	4402      	add	r2, r0
 800297a:	4603      	mov	r3, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	d100      	bne.n	8002982 <memset+0xa>
 8002980:	4770      	bx	lr
 8002982:	f803 1b01 	strb.w	r1, [r3], #1
 8002986:	e7f9      	b.n	800297c <memset+0x4>

08002988 <_free_r>:
 8002988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800298a:	2900      	cmp	r1, #0
 800298c:	d044      	beq.n	8002a18 <_free_r+0x90>
 800298e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002992:	9001      	str	r0, [sp, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f1a1 0404 	sub.w	r4, r1, #4
 800299a:	bfb8      	it	lt
 800299c:	18e4      	addlt	r4, r4, r3
 800299e:	f000 f913 	bl	8002bc8 <__malloc_lock>
 80029a2:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <_free_r+0x94>)
 80029a4:	9801      	ldr	r0, [sp, #4]
 80029a6:	6813      	ldr	r3, [r2, #0]
 80029a8:	b933      	cbnz	r3, 80029b8 <_free_r+0x30>
 80029aa:	6063      	str	r3, [r4, #4]
 80029ac:	6014      	str	r4, [r2, #0]
 80029ae:	b003      	add	sp, #12
 80029b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029b4:	f000 b90e 	b.w	8002bd4 <__malloc_unlock>
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	d908      	bls.n	80029ce <_free_r+0x46>
 80029bc:	6825      	ldr	r5, [r4, #0]
 80029be:	1961      	adds	r1, r4, r5
 80029c0:	428b      	cmp	r3, r1
 80029c2:	bf01      	itttt	eq
 80029c4:	6819      	ldreq	r1, [r3, #0]
 80029c6:	685b      	ldreq	r3, [r3, #4]
 80029c8:	1949      	addeq	r1, r1, r5
 80029ca:	6021      	streq	r1, [r4, #0]
 80029cc:	e7ed      	b.n	80029aa <_free_r+0x22>
 80029ce:	461a      	mov	r2, r3
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b10b      	cbz	r3, 80029d8 <_free_r+0x50>
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	d9fa      	bls.n	80029ce <_free_r+0x46>
 80029d8:	6811      	ldr	r1, [r2, #0]
 80029da:	1855      	adds	r5, r2, r1
 80029dc:	42a5      	cmp	r5, r4
 80029de:	d10b      	bne.n	80029f8 <_free_r+0x70>
 80029e0:	6824      	ldr	r4, [r4, #0]
 80029e2:	4421      	add	r1, r4
 80029e4:	1854      	adds	r4, r2, r1
 80029e6:	42a3      	cmp	r3, r4
 80029e8:	6011      	str	r1, [r2, #0]
 80029ea:	d1e0      	bne.n	80029ae <_free_r+0x26>
 80029ec:	681c      	ldr	r4, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	6053      	str	r3, [r2, #4]
 80029f2:	4421      	add	r1, r4
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	e7da      	b.n	80029ae <_free_r+0x26>
 80029f8:	d902      	bls.n	8002a00 <_free_r+0x78>
 80029fa:	230c      	movs	r3, #12
 80029fc:	6003      	str	r3, [r0, #0]
 80029fe:	e7d6      	b.n	80029ae <_free_r+0x26>
 8002a00:	6825      	ldr	r5, [r4, #0]
 8002a02:	1961      	adds	r1, r4, r5
 8002a04:	428b      	cmp	r3, r1
 8002a06:	bf04      	itt	eq
 8002a08:	6819      	ldreq	r1, [r3, #0]
 8002a0a:	685b      	ldreq	r3, [r3, #4]
 8002a0c:	6063      	str	r3, [r4, #4]
 8002a0e:	bf04      	itt	eq
 8002a10:	1949      	addeq	r1, r1, r5
 8002a12:	6021      	streq	r1, [r4, #0]
 8002a14:	6054      	str	r4, [r2, #4]
 8002a16:	e7ca      	b.n	80029ae <_free_r+0x26>
 8002a18:	b003      	add	sp, #12
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	200000c0 	.word	0x200000c0

08002a20 <sbrk_aligned>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4e0e      	ldr	r6, [pc, #56]	; (8002a5c <sbrk_aligned+0x3c>)
 8002a24:	460c      	mov	r4, r1
 8002a26:	6831      	ldr	r1, [r6, #0]
 8002a28:	4605      	mov	r5, r0
 8002a2a:	b911      	cbnz	r1, 8002a32 <sbrk_aligned+0x12>
 8002a2c:	f000 f88c 	bl	8002b48 <_sbrk_r>
 8002a30:	6030      	str	r0, [r6, #0]
 8002a32:	4621      	mov	r1, r4
 8002a34:	4628      	mov	r0, r5
 8002a36:	f000 f887 	bl	8002b48 <_sbrk_r>
 8002a3a:	1c43      	adds	r3, r0, #1
 8002a3c:	d00a      	beq.n	8002a54 <sbrk_aligned+0x34>
 8002a3e:	1cc4      	adds	r4, r0, #3
 8002a40:	f024 0403 	bic.w	r4, r4, #3
 8002a44:	42a0      	cmp	r0, r4
 8002a46:	d007      	beq.n	8002a58 <sbrk_aligned+0x38>
 8002a48:	1a21      	subs	r1, r4, r0
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f000 f87c 	bl	8002b48 <_sbrk_r>
 8002a50:	3001      	adds	r0, #1
 8002a52:	d101      	bne.n	8002a58 <sbrk_aligned+0x38>
 8002a54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a58:	4620      	mov	r0, r4
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	200000c4 	.word	0x200000c4

08002a60 <_malloc_r>:
 8002a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a64:	1ccd      	adds	r5, r1, #3
 8002a66:	f025 0503 	bic.w	r5, r5, #3
 8002a6a:	3508      	adds	r5, #8
 8002a6c:	2d0c      	cmp	r5, #12
 8002a6e:	bf38      	it	cc
 8002a70:	250c      	movcc	r5, #12
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	4607      	mov	r7, r0
 8002a76:	db01      	blt.n	8002a7c <_malloc_r+0x1c>
 8002a78:	42a9      	cmp	r1, r5
 8002a7a:	d905      	bls.n	8002a88 <_malloc_r+0x28>
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	2600      	movs	r6, #0
 8002a82:	4630      	mov	r0, r6
 8002a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a88:	4e2e      	ldr	r6, [pc, #184]	; (8002b44 <_malloc_r+0xe4>)
 8002a8a:	f000 f89d 	bl	8002bc8 <__malloc_lock>
 8002a8e:	6833      	ldr	r3, [r6, #0]
 8002a90:	461c      	mov	r4, r3
 8002a92:	bb34      	cbnz	r4, 8002ae2 <_malloc_r+0x82>
 8002a94:	4629      	mov	r1, r5
 8002a96:	4638      	mov	r0, r7
 8002a98:	f7ff ffc2 	bl	8002a20 <sbrk_aligned>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	d14d      	bne.n	8002b3e <_malloc_r+0xde>
 8002aa2:	6834      	ldr	r4, [r6, #0]
 8002aa4:	4626      	mov	r6, r4
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d140      	bne.n	8002b2c <_malloc_r+0xcc>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	4631      	mov	r1, r6
 8002aae:	4638      	mov	r0, r7
 8002ab0:	eb04 0803 	add.w	r8, r4, r3
 8002ab4:	f000 f848 	bl	8002b48 <_sbrk_r>
 8002ab8:	4580      	cmp	r8, r0
 8002aba:	d13a      	bne.n	8002b32 <_malloc_r+0xd2>
 8002abc:	6821      	ldr	r1, [r4, #0]
 8002abe:	3503      	adds	r5, #3
 8002ac0:	1a6d      	subs	r5, r5, r1
 8002ac2:	f025 0503 	bic.w	r5, r5, #3
 8002ac6:	3508      	adds	r5, #8
 8002ac8:	2d0c      	cmp	r5, #12
 8002aca:	bf38      	it	cc
 8002acc:	250c      	movcc	r5, #12
 8002ace:	4629      	mov	r1, r5
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	f7ff ffa5 	bl	8002a20 <sbrk_aligned>
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	d02b      	beq.n	8002b32 <_malloc_r+0xd2>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	442b      	add	r3, r5
 8002ade:	6023      	str	r3, [r4, #0]
 8002ae0:	e00e      	b.n	8002b00 <_malloc_r+0xa0>
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	1b52      	subs	r2, r2, r5
 8002ae6:	d41e      	bmi.n	8002b26 <_malloc_r+0xc6>
 8002ae8:	2a0b      	cmp	r2, #11
 8002aea:	d916      	bls.n	8002b1a <_malloc_r+0xba>
 8002aec:	1961      	adds	r1, r4, r5
 8002aee:	42a3      	cmp	r3, r4
 8002af0:	6025      	str	r5, [r4, #0]
 8002af2:	bf18      	it	ne
 8002af4:	6059      	strne	r1, [r3, #4]
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	bf08      	it	eq
 8002afa:	6031      	streq	r1, [r6, #0]
 8002afc:	5162      	str	r2, [r4, r5]
 8002afe:	604b      	str	r3, [r1, #4]
 8002b00:	4638      	mov	r0, r7
 8002b02:	f104 060b 	add.w	r6, r4, #11
 8002b06:	f000 f865 	bl	8002bd4 <__malloc_unlock>
 8002b0a:	f026 0607 	bic.w	r6, r6, #7
 8002b0e:	1d23      	adds	r3, r4, #4
 8002b10:	1af2      	subs	r2, r6, r3
 8002b12:	d0b6      	beq.n	8002a82 <_malloc_r+0x22>
 8002b14:	1b9b      	subs	r3, r3, r6
 8002b16:	50a3      	str	r3, [r4, r2]
 8002b18:	e7b3      	b.n	8002a82 <_malloc_r+0x22>
 8002b1a:	6862      	ldr	r2, [r4, #4]
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	bf0c      	ite	eq
 8002b20:	6032      	streq	r2, [r6, #0]
 8002b22:	605a      	strne	r2, [r3, #4]
 8002b24:	e7ec      	b.n	8002b00 <_malloc_r+0xa0>
 8002b26:	4623      	mov	r3, r4
 8002b28:	6864      	ldr	r4, [r4, #4]
 8002b2a:	e7b2      	b.n	8002a92 <_malloc_r+0x32>
 8002b2c:	4634      	mov	r4, r6
 8002b2e:	6876      	ldr	r6, [r6, #4]
 8002b30:	e7b9      	b.n	8002aa6 <_malloc_r+0x46>
 8002b32:	230c      	movs	r3, #12
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4638      	mov	r0, r7
 8002b38:	f000 f84c 	bl	8002bd4 <__malloc_unlock>
 8002b3c:	e7a1      	b.n	8002a82 <_malloc_r+0x22>
 8002b3e:	6025      	str	r5, [r4, #0]
 8002b40:	e7de      	b.n	8002b00 <_malloc_r+0xa0>
 8002b42:	bf00      	nop
 8002b44:	200000c0 	.word	0x200000c0

08002b48 <_sbrk_r>:
 8002b48:	b538      	push	{r3, r4, r5, lr}
 8002b4a:	4d06      	ldr	r5, [pc, #24]	; (8002b64 <_sbrk_r+0x1c>)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	f7fe fef2 	bl	800193c <_sbrk>
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	d102      	bne.n	8002b62 <_sbrk_r+0x1a>
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	b103      	cbz	r3, 8002b62 <_sbrk_r+0x1a>
 8002b60:	6023      	str	r3, [r4, #0]
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	200000c8 	.word	0x200000c8

08002b68 <siprintf>:
 8002b68:	b40e      	push	{r1, r2, r3}
 8002b6a:	b500      	push	{lr}
 8002b6c:	b09c      	sub	sp, #112	; 0x70
 8002b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9006      	str	r0, [sp, #24]
 8002b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <siprintf+0x38>)
 8002b7a:	9107      	str	r1, [sp, #28]
 8002b7c:	9104      	str	r1, [sp, #16]
 8002b7e:	4909      	ldr	r1, [pc, #36]	; (8002ba4 <siprintf+0x3c>)
 8002b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b84:	9105      	str	r1, [sp, #20]
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	a902      	add	r1, sp, #8
 8002b8c:	f000 f884 	bl	8002c98 <_svfiprintf_r>
 8002b90:	9b02      	ldr	r3, [sp, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	b01c      	add	sp, #112	; 0x70
 8002b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b9c:	b003      	add	sp, #12
 8002b9e:	4770      	bx	lr
 8002ba0:	20000014 	.word	0x20000014
 8002ba4:	ffff0208 	.word	0xffff0208

08002ba8 <strcat>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4602      	mov	r2, r0
 8002bac:	7814      	ldrb	r4, [r2, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	3201      	adds	r2, #1
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d1fa      	bne.n	8002bac <strcat+0x4>
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <strcat+0x10>
 8002bc4:	bd10      	pop	{r4, pc}
	...

08002bc8 <__malloc_lock>:
 8002bc8:	4801      	ldr	r0, [pc, #4]	; (8002bd0 <__malloc_lock+0x8>)
 8002bca:	f000 baf9 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 8002bce:	bf00      	nop
 8002bd0:	200000cc 	.word	0x200000cc

08002bd4 <__malloc_unlock>:
 8002bd4:	4801      	ldr	r0, [pc, #4]	; (8002bdc <__malloc_unlock+0x8>)
 8002bd6:	f000 baf4 	b.w	80031c2 <__retarget_lock_release_recursive>
 8002bda:	bf00      	nop
 8002bdc:	200000cc 	.word	0x200000cc

08002be0 <__ssputs_r>:
 8002be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	688e      	ldr	r6, [r1, #8]
 8002be6:	429e      	cmp	r6, r3
 8002be8:	4682      	mov	sl, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4690      	mov	r8, r2
 8002bee:	461f      	mov	r7, r3
 8002bf0:	d838      	bhi.n	8002c64 <__ssputs_r+0x84>
 8002bf2:	898a      	ldrh	r2, [r1, #12]
 8002bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bf8:	d032      	beq.n	8002c60 <__ssputs_r+0x80>
 8002bfa:	6825      	ldr	r5, [r4, #0]
 8002bfc:	6909      	ldr	r1, [r1, #16]
 8002bfe:	eba5 0901 	sub.w	r9, r5, r1
 8002c02:	6965      	ldr	r5, [r4, #20]
 8002c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	444b      	add	r3, r9
 8002c10:	106d      	asrs	r5, r5, #1
 8002c12:	429d      	cmp	r5, r3
 8002c14:	bf38      	it	cc
 8002c16:	461d      	movcc	r5, r3
 8002c18:	0553      	lsls	r3, r2, #21
 8002c1a:	d531      	bpl.n	8002c80 <__ssputs_r+0xa0>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7ff ff1f 	bl	8002a60 <_malloc_r>
 8002c22:	4606      	mov	r6, r0
 8002c24:	b950      	cbnz	r0, 8002c3c <__ssputs_r+0x5c>
 8002c26:	230c      	movs	r3, #12
 8002c28:	f8ca 3000 	str.w	r3, [sl]
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3c:	6921      	ldr	r1, [r4, #16]
 8002c3e:	464a      	mov	r2, r9
 8002c40:	f000 fac0 	bl	80031c4 <memcpy>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	81a3      	strh	r3, [r4, #12]
 8002c50:	6126      	str	r6, [r4, #16]
 8002c52:	6165      	str	r5, [r4, #20]
 8002c54:	444e      	add	r6, r9
 8002c56:	eba5 0509 	sub.w	r5, r5, r9
 8002c5a:	6026      	str	r6, [r4, #0]
 8002c5c:	60a5      	str	r5, [r4, #8]
 8002c5e:	463e      	mov	r6, r7
 8002c60:	42be      	cmp	r6, r7
 8002c62:	d900      	bls.n	8002c66 <__ssputs_r+0x86>
 8002c64:	463e      	mov	r6, r7
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	4632      	mov	r2, r6
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	f000 fab8 	bl	80031e0 <memmove>
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	1b9b      	subs	r3, r3, r6
 8002c74:	60a3      	str	r3, [r4, #8]
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	4433      	add	r3, r6
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e7db      	b.n	8002c38 <__ssputs_r+0x58>
 8002c80:	462a      	mov	r2, r5
 8002c82:	f000 fac7 	bl	8003214 <_realloc_r>
 8002c86:	4606      	mov	r6, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d1e1      	bne.n	8002c50 <__ssputs_r+0x70>
 8002c8c:	6921      	ldr	r1, [r4, #16]
 8002c8e:	4650      	mov	r0, sl
 8002c90:	f7ff fe7a 	bl	8002988 <_free_r>
 8002c94:	e7c7      	b.n	8002c26 <__ssputs_r+0x46>
	...

08002c98 <_svfiprintf_r>:
 8002c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9c:	4698      	mov	r8, r3
 8002c9e:	898b      	ldrh	r3, [r1, #12]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	b09d      	sub	sp, #116	; 0x74
 8002ca4:	4607      	mov	r7, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	d50e      	bpl.n	8002cca <_svfiprintf_r+0x32>
 8002cac:	690b      	ldr	r3, [r1, #16]
 8002cae:	b963      	cbnz	r3, 8002cca <_svfiprintf_r+0x32>
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	f7ff fed5 	bl	8002a60 <_malloc_r>
 8002cb6:	6028      	str	r0, [r5, #0]
 8002cb8:	6128      	str	r0, [r5, #16]
 8002cba:	b920      	cbnz	r0, 8002cc6 <_svfiprintf_r+0x2e>
 8002cbc:	230c      	movs	r3, #12
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc4:	e0d1      	b.n	8002e6a <_svfiprintf_r+0x1d2>
 8002cc6:	2340      	movs	r3, #64	; 0x40
 8002cc8:	616b      	str	r3, [r5, #20]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cce:	2320      	movs	r3, #32
 8002cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd8:	2330      	movs	r3, #48	; 0x30
 8002cda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e84 <_svfiprintf_r+0x1ec>
 8002cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ce2:	f04f 0901 	mov.w	r9, #1
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	469a      	mov	sl, r3
 8002cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cee:	b10a      	cbz	r2, 8002cf4 <_svfiprintf_r+0x5c>
 8002cf0:	2a25      	cmp	r2, #37	; 0x25
 8002cf2:	d1f9      	bne.n	8002ce8 <_svfiprintf_r+0x50>
 8002cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8002cf8:	d00b      	beq.n	8002d12 <_svfiprintf_r+0x7a>
 8002cfa:	465b      	mov	r3, fp
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	4638      	mov	r0, r7
 8002d02:	f7ff ff6d 	bl	8002be0 <__ssputs_r>
 8002d06:	3001      	adds	r0, #1
 8002d08:	f000 80aa 	beq.w	8002e60 <_svfiprintf_r+0x1c8>
 8002d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d0e:	445a      	add	r2, fp
 8002d10:	9209      	str	r2, [sp, #36]	; 0x24
 8002d12:	f89a 3000 	ldrb.w	r3, [sl]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a2 	beq.w	8002e60 <_svfiprintf_r+0x1c8>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d26:	f10a 0a01 	add.w	sl, sl, #1
 8002d2a:	9304      	str	r3, [sp, #16]
 8002d2c:	9307      	str	r3, [sp, #28]
 8002d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d32:	931a      	str	r3, [sp, #104]	; 0x68
 8002d34:	4654      	mov	r4, sl
 8002d36:	2205      	movs	r2, #5
 8002d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3c:	4851      	ldr	r0, [pc, #324]	; (8002e84 <_svfiprintf_r+0x1ec>)
 8002d3e:	f7fd fa47 	bl	80001d0 <memchr>
 8002d42:	9a04      	ldr	r2, [sp, #16]
 8002d44:	b9d8      	cbnz	r0, 8002d7e <_svfiprintf_r+0xe6>
 8002d46:	06d0      	lsls	r0, r2, #27
 8002d48:	bf44      	itt	mi
 8002d4a:	2320      	movmi	r3, #32
 8002d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d50:	0711      	lsls	r1, r2, #28
 8002d52:	bf44      	itt	mi
 8002d54:	232b      	movmi	r3, #43	; 0x2b
 8002d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d60:	d015      	beq.n	8002d8e <_svfiprintf_r+0xf6>
 8002d62:	9a07      	ldr	r2, [sp, #28]
 8002d64:	4654      	mov	r4, sl
 8002d66:	2000      	movs	r0, #0
 8002d68:	f04f 0c0a 	mov.w	ip, #10
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d72:	3b30      	subs	r3, #48	; 0x30
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d94e      	bls.n	8002e16 <_svfiprintf_r+0x17e>
 8002d78:	b1b0      	cbz	r0, 8002da8 <_svfiprintf_r+0x110>
 8002d7a:	9207      	str	r2, [sp, #28]
 8002d7c:	e014      	b.n	8002da8 <_svfiprintf_r+0x110>
 8002d7e:	eba0 0308 	sub.w	r3, r0, r8
 8002d82:	fa09 f303 	lsl.w	r3, r9, r3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	9304      	str	r3, [sp, #16]
 8002d8a:	46a2      	mov	sl, r4
 8002d8c:	e7d2      	b.n	8002d34 <_svfiprintf_r+0x9c>
 8002d8e:	9b03      	ldr	r3, [sp, #12]
 8002d90:	1d19      	adds	r1, r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	9103      	str	r1, [sp, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bfbb      	ittet	lt
 8002d9a:	425b      	neglt	r3, r3
 8002d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8002da0:	9307      	strge	r3, [sp, #28]
 8002da2:	9307      	strlt	r3, [sp, #28]
 8002da4:	bfb8      	it	lt
 8002da6:	9204      	strlt	r2, [sp, #16]
 8002da8:	7823      	ldrb	r3, [r4, #0]
 8002daa:	2b2e      	cmp	r3, #46	; 0x2e
 8002dac:	d10c      	bne.n	8002dc8 <_svfiprintf_r+0x130>
 8002dae:	7863      	ldrb	r3, [r4, #1]
 8002db0:	2b2a      	cmp	r3, #42	; 0x2a
 8002db2:	d135      	bne.n	8002e20 <_svfiprintf_r+0x188>
 8002db4:	9b03      	ldr	r3, [sp, #12]
 8002db6:	1d1a      	adds	r2, r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	9203      	str	r2, [sp, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bfb8      	it	lt
 8002dc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dc4:	3402      	adds	r4, #2
 8002dc6:	9305      	str	r3, [sp, #20]
 8002dc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e94 <_svfiprintf_r+0x1fc>
 8002dcc:	7821      	ldrb	r1, [r4, #0]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4650      	mov	r0, sl
 8002dd2:	f7fd f9fd 	bl	80001d0 <memchr>
 8002dd6:	b140      	cbz	r0, 8002dea <_svfiprintf_r+0x152>
 8002dd8:	2340      	movs	r3, #64	; 0x40
 8002dda:	eba0 000a 	sub.w	r0, r0, sl
 8002dde:	fa03 f000 	lsl.w	r0, r3, r0
 8002de2:	9b04      	ldr	r3, [sp, #16]
 8002de4:	4303      	orrs	r3, r0
 8002de6:	3401      	adds	r4, #1
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dee:	4826      	ldr	r0, [pc, #152]	; (8002e88 <_svfiprintf_r+0x1f0>)
 8002df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002df4:	2206      	movs	r2, #6
 8002df6:	f7fd f9eb 	bl	80001d0 <memchr>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d038      	beq.n	8002e70 <_svfiprintf_r+0x1d8>
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <_svfiprintf_r+0x1f4>)
 8002e00:	bb1b      	cbnz	r3, 8002e4a <_svfiprintf_r+0x1b2>
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	3307      	adds	r3, #7
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e10:	4433      	add	r3, r6
 8002e12:	9309      	str	r3, [sp, #36]	; 0x24
 8002e14:	e767      	b.n	8002ce6 <_svfiprintf_r+0x4e>
 8002e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	e7a5      	b.n	8002d6c <_svfiprintf_r+0xd4>
 8002e20:	2300      	movs	r3, #0
 8002e22:	3401      	adds	r4, #1
 8002e24:	9305      	str	r3, [sp, #20]
 8002e26:	4619      	mov	r1, r3
 8002e28:	f04f 0c0a 	mov.w	ip, #10
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e32:	3a30      	subs	r2, #48	; 0x30
 8002e34:	2a09      	cmp	r2, #9
 8002e36:	d903      	bls.n	8002e40 <_svfiprintf_r+0x1a8>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0c5      	beq.n	8002dc8 <_svfiprintf_r+0x130>
 8002e3c:	9105      	str	r1, [sp, #20]
 8002e3e:	e7c3      	b.n	8002dc8 <_svfiprintf_r+0x130>
 8002e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e44:	4604      	mov	r4, r0
 8002e46:	2301      	movs	r3, #1
 8002e48:	e7f0      	b.n	8002e2c <_svfiprintf_r+0x194>
 8002e4a:	ab03      	add	r3, sp, #12
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	462a      	mov	r2, r5
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <_svfiprintf_r+0x1f8>)
 8002e52:	a904      	add	r1, sp, #16
 8002e54:	4638      	mov	r0, r7
 8002e56:	f3af 8000 	nop.w
 8002e5a:	1c42      	adds	r2, r0, #1
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	d1d6      	bne.n	8002e0e <_svfiprintf_r+0x176>
 8002e60:	89ab      	ldrh	r3, [r5, #12]
 8002e62:	065b      	lsls	r3, r3, #25
 8002e64:	f53f af2c 	bmi.w	8002cc0 <_svfiprintf_r+0x28>
 8002e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e6a:	b01d      	add	sp, #116	; 0x74
 8002e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e70:	ab03      	add	r3, sp, #12
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	462a      	mov	r2, r5
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <_svfiprintf_r+0x1f8>)
 8002e78:	a904      	add	r1, sp, #16
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f000 f87a 	bl	8002f74 <_printf_i>
 8002e80:	e7eb      	b.n	8002e5a <_svfiprintf_r+0x1c2>
 8002e82:	bf00      	nop
 8002e84:	08003458 	.word	0x08003458
 8002e88:	08003462 	.word	0x08003462
 8002e8c:	00000000 	.word	0x00000000
 8002e90:	08002be1 	.word	0x08002be1
 8002e94:	0800345e 	.word	0x0800345e

08002e98 <_printf_common>:
 8002e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	688a      	ldr	r2, [r1, #8]
 8002ea2:	690b      	ldr	r3, [r1, #16]
 8002ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bfb8      	it	lt
 8002eac:	4613      	movlt	r3, r2
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	b10a      	cbz	r2, 8002ebe <_printf_common+0x26>
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	0699      	lsls	r1, r3, #26
 8002ec2:	bf42      	ittt	mi
 8002ec4:	6833      	ldrmi	r3, [r6, #0]
 8002ec6:	3302      	addmi	r3, #2
 8002ec8:	6033      	strmi	r3, [r6, #0]
 8002eca:	6825      	ldr	r5, [r4, #0]
 8002ecc:	f015 0506 	ands.w	r5, r5, #6
 8002ed0:	d106      	bne.n	8002ee0 <_printf_common+0x48>
 8002ed2:	f104 0a19 	add.w	sl, r4, #25
 8002ed6:	68e3      	ldr	r3, [r4, #12]
 8002ed8:	6832      	ldr	r2, [r6, #0]
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	42ab      	cmp	r3, r5
 8002ede:	dc26      	bgt.n	8002f2e <_printf_common+0x96>
 8002ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ee4:	1e13      	subs	r3, r2, #0
 8002ee6:	6822      	ldr	r2, [r4, #0]
 8002ee8:	bf18      	it	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	0692      	lsls	r2, r2, #26
 8002eee:	d42b      	bmi.n	8002f48 <_printf_common+0xb0>
 8002ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d01e      	beq.n	8002f3c <_printf_common+0xa4>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	68e5      	ldr	r5, [r4, #12]
 8002f02:	6832      	ldr	r2, [r6, #0]
 8002f04:	f003 0306 	and.w	r3, r3, #6
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	bf08      	it	eq
 8002f0c:	1aad      	subeq	r5, r5, r2
 8002f0e:	68a3      	ldr	r3, [r4, #8]
 8002f10:	6922      	ldr	r2, [r4, #16]
 8002f12:	bf0c      	ite	eq
 8002f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f18:	2500      	movne	r5, #0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfc4      	itt	gt
 8002f1e:	1a9b      	subgt	r3, r3, r2
 8002f20:	18ed      	addgt	r5, r5, r3
 8002f22:	2600      	movs	r6, #0
 8002f24:	341a      	adds	r4, #26
 8002f26:	42b5      	cmp	r5, r6
 8002f28:	d11a      	bne.n	8002f60 <_printf_common+0xc8>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e008      	b.n	8002f40 <_printf_common+0xa8>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4652      	mov	r2, sl
 8002f32:	4649      	mov	r1, r9
 8002f34:	4638      	mov	r0, r7
 8002f36:	47c0      	blx	r8
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d103      	bne.n	8002f44 <_printf_common+0xac>
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f44:	3501      	adds	r5, #1
 8002f46:	e7c6      	b.n	8002ed6 <_printf_common+0x3e>
 8002f48:	18e1      	adds	r1, r4, r3
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	2030      	movs	r0, #48	; 0x30
 8002f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f52:	4422      	add	r2, r4
 8002f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	e7c7      	b.n	8002ef0 <_printf_common+0x58>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4622      	mov	r2, r4
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0e6      	beq.n	8002f3c <_printf_common+0xa4>
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7d9      	b.n	8002f26 <_printf_common+0x8e>
	...

08002f74 <_printf_i>:
 8002f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	7e0f      	ldrb	r7, [r1, #24]
 8002f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f7c:	2f78      	cmp	r7, #120	; 0x78
 8002f7e:	4691      	mov	r9, r2
 8002f80:	4680      	mov	r8, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	469a      	mov	sl, r3
 8002f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f8a:	d807      	bhi.n	8002f9c <_printf_i+0x28>
 8002f8c:	2f62      	cmp	r7, #98	; 0x62
 8002f8e:	d80a      	bhi.n	8002fa6 <_printf_i+0x32>
 8002f90:	2f00      	cmp	r7, #0
 8002f92:	f000 80d8 	beq.w	8003146 <_printf_i+0x1d2>
 8002f96:	2f58      	cmp	r7, #88	; 0x58
 8002f98:	f000 80a3 	beq.w	80030e2 <_printf_i+0x16e>
 8002f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fa4:	e03a      	b.n	800301c <_printf_i+0xa8>
 8002fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002faa:	2b15      	cmp	r3, #21
 8002fac:	d8f6      	bhi.n	8002f9c <_printf_i+0x28>
 8002fae:	a101      	add	r1, pc, #4	; (adr r1, 8002fb4 <_printf_i+0x40>)
 8002fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	08003021 	.word	0x08003021
 8002fbc:	08002f9d 	.word	0x08002f9d
 8002fc0:	08002f9d 	.word	0x08002f9d
 8002fc4:	08002f9d 	.word	0x08002f9d
 8002fc8:	08002f9d 	.word	0x08002f9d
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08002f9d 	.word	0x08002f9d
 8002fd4:	08002f9d 	.word	0x08002f9d
 8002fd8:	08002f9d 	.word	0x08002f9d
 8002fdc:	08002f9d 	.word	0x08002f9d
 8002fe0:	0800312d 	.word	0x0800312d
 8002fe4:	08003051 	.word	0x08003051
 8002fe8:	0800310f 	.word	0x0800310f
 8002fec:	08002f9d 	.word	0x08002f9d
 8002ff0:	08002f9d 	.word	0x08002f9d
 8002ff4:	0800314f 	.word	0x0800314f
 8002ff8:	08002f9d 	.word	0x08002f9d
 8002ffc:	08003051 	.word	0x08003051
 8003000:	08002f9d 	.word	0x08002f9d
 8003004:	08002f9d 	.word	0x08002f9d
 8003008:	08003117 	.word	0x08003117
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	602a      	str	r2, [r5, #0]
 8003014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800301c:	2301      	movs	r3, #1
 800301e:	e0a3      	b.n	8003168 <_printf_i+0x1f4>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	6829      	ldr	r1, [r5, #0]
 8003024:	0606      	lsls	r6, r0, #24
 8003026:	f101 0304 	add.w	r3, r1, #4
 800302a:	d50a      	bpl.n	8003042 <_printf_i+0xce>
 800302c:	680e      	ldr	r6, [r1, #0]
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	2e00      	cmp	r6, #0
 8003032:	da03      	bge.n	800303c <_printf_i+0xc8>
 8003034:	232d      	movs	r3, #45	; 0x2d
 8003036:	4276      	negs	r6, r6
 8003038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800303c:	485e      	ldr	r0, [pc, #376]	; (80031b8 <_printf_i+0x244>)
 800303e:	230a      	movs	r3, #10
 8003040:	e019      	b.n	8003076 <_printf_i+0x102>
 8003042:	680e      	ldr	r6, [r1, #0]
 8003044:	602b      	str	r3, [r5, #0]
 8003046:	f010 0f40 	tst.w	r0, #64	; 0x40
 800304a:	bf18      	it	ne
 800304c:	b236      	sxthne	r6, r6
 800304e:	e7ef      	b.n	8003030 <_printf_i+0xbc>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	1d19      	adds	r1, r3, #4
 8003056:	6029      	str	r1, [r5, #0]
 8003058:	0601      	lsls	r1, r0, #24
 800305a:	d501      	bpl.n	8003060 <_printf_i+0xec>
 800305c:	681e      	ldr	r6, [r3, #0]
 800305e:	e002      	b.n	8003066 <_printf_i+0xf2>
 8003060:	0646      	lsls	r6, r0, #25
 8003062:	d5fb      	bpl.n	800305c <_printf_i+0xe8>
 8003064:	881e      	ldrh	r6, [r3, #0]
 8003066:	4854      	ldr	r0, [pc, #336]	; (80031b8 <_printf_i+0x244>)
 8003068:	2f6f      	cmp	r7, #111	; 0x6f
 800306a:	bf0c      	ite	eq
 800306c:	2308      	moveq	r3, #8
 800306e:	230a      	movne	r3, #10
 8003070:	2100      	movs	r1, #0
 8003072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003076:	6865      	ldr	r5, [r4, #4]
 8003078:	60a5      	str	r5, [r4, #8]
 800307a:	2d00      	cmp	r5, #0
 800307c:	bfa2      	ittt	ge
 800307e:	6821      	ldrge	r1, [r4, #0]
 8003080:	f021 0104 	bicge.w	r1, r1, #4
 8003084:	6021      	strge	r1, [r4, #0]
 8003086:	b90e      	cbnz	r6, 800308c <_printf_i+0x118>
 8003088:	2d00      	cmp	r5, #0
 800308a:	d04d      	beq.n	8003128 <_printf_i+0x1b4>
 800308c:	4615      	mov	r5, r2
 800308e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003092:	fb03 6711 	mls	r7, r3, r1, r6
 8003096:	5dc7      	ldrb	r7, [r0, r7]
 8003098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800309c:	4637      	mov	r7, r6
 800309e:	42bb      	cmp	r3, r7
 80030a0:	460e      	mov	r6, r1
 80030a2:	d9f4      	bls.n	800308e <_printf_i+0x11a>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d10b      	bne.n	80030c0 <_printf_i+0x14c>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	07de      	lsls	r6, r3, #31
 80030ac:	d508      	bpl.n	80030c0 <_printf_i+0x14c>
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	6861      	ldr	r1, [r4, #4]
 80030b2:	4299      	cmp	r1, r3
 80030b4:	bfde      	ittt	le
 80030b6:	2330      	movle	r3, #48	; 0x30
 80030b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030c0:	1b52      	subs	r2, r2, r5
 80030c2:	6122      	str	r2, [r4, #16]
 80030c4:	f8cd a000 	str.w	sl, [sp]
 80030c8:	464b      	mov	r3, r9
 80030ca:	aa03      	add	r2, sp, #12
 80030cc:	4621      	mov	r1, r4
 80030ce:	4640      	mov	r0, r8
 80030d0:	f7ff fee2 	bl	8002e98 <_printf_common>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d14c      	bne.n	8003172 <_printf_i+0x1fe>
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030dc:	b004      	add	sp, #16
 80030de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e2:	4835      	ldr	r0, [pc, #212]	; (80031b8 <_printf_i+0x244>)
 80030e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030e8:	6829      	ldr	r1, [r5, #0]
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80030f0:	6029      	str	r1, [r5, #0]
 80030f2:	061d      	lsls	r5, r3, #24
 80030f4:	d514      	bpl.n	8003120 <_printf_i+0x1ac>
 80030f6:	07df      	lsls	r7, r3, #31
 80030f8:	bf44      	itt	mi
 80030fa:	f043 0320 	orrmi.w	r3, r3, #32
 80030fe:	6023      	strmi	r3, [r4, #0]
 8003100:	b91e      	cbnz	r6, 800310a <_printf_i+0x196>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	f023 0320 	bic.w	r3, r3, #32
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	2310      	movs	r3, #16
 800310c:	e7b0      	b.n	8003070 <_printf_i+0xfc>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	f043 0320 	orr.w	r3, r3, #32
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	2378      	movs	r3, #120	; 0x78
 8003118:	4828      	ldr	r0, [pc, #160]	; (80031bc <_printf_i+0x248>)
 800311a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800311e:	e7e3      	b.n	80030e8 <_printf_i+0x174>
 8003120:	0659      	lsls	r1, r3, #25
 8003122:	bf48      	it	mi
 8003124:	b2b6      	uxthmi	r6, r6
 8003126:	e7e6      	b.n	80030f6 <_printf_i+0x182>
 8003128:	4615      	mov	r5, r2
 800312a:	e7bb      	b.n	80030a4 <_printf_i+0x130>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	6826      	ldr	r6, [r4, #0]
 8003130:	6961      	ldr	r1, [r4, #20]
 8003132:	1d18      	adds	r0, r3, #4
 8003134:	6028      	str	r0, [r5, #0]
 8003136:	0635      	lsls	r5, r6, #24
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	d501      	bpl.n	8003140 <_printf_i+0x1cc>
 800313c:	6019      	str	r1, [r3, #0]
 800313e:	e002      	b.n	8003146 <_printf_i+0x1d2>
 8003140:	0670      	lsls	r0, r6, #25
 8003142:	d5fb      	bpl.n	800313c <_printf_i+0x1c8>
 8003144:	8019      	strh	r1, [r3, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	6123      	str	r3, [r4, #16]
 800314a:	4615      	mov	r5, r2
 800314c:	e7ba      	b.n	80030c4 <_printf_i+0x150>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	1d1a      	adds	r2, r3, #4
 8003152:	602a      	str	r2, [r5, #0]
 8003154:	681d      	ldr	r5, [r3, #0]
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	2100      	movs	r1, #0
 800315a:	4628      	mov	r0, r5
 800315c:	f7fd f838 	bl	80001d0 <memchr>
 8003160:	b108      	cbz	r0, 8003166 <_printf_i+0x1f2>
 8003162:	1b40      	subs	r0, r0, r5
 8003164:	6060      	str	r0, [r4, #4]
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	6123      	str	r3, [r4, #16]
 800316a:	2300      	movs	r3, #0
 800316c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003170:	e7a8      	b.n	80030c4 <_printf_i+0x150>
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	462a      	mov	r2, r5
 8003176:	4649      	mov	r1, r9
 8003178:	4640      	mov	r0, r8
 800317a:	47d0      	blx	sl
 800317c:	3001      	adds	r0, #1
 800317e:	d0ab      	beq.n	80030d8 <_printf_i+0x164>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	079b      	lsls	r3, r3, #30
 8003184:	d413      	bmi.n	80031ae <_printf_i+0x23a>
 8003186:	68e0      	ldr	r0, [r4, #12]
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	4298      	cmp	r0, r3
 800318c:	bfb8      	it	lt
 800318e:	4618      	movlt	r0, r3
 8003190:	e7a4      	b.n	80030dc <_printf_i+0x168>
 8003192:	2301      	movs	r3, #1
 8003194:	4632      	mov	r2, r6
 8003196:	4649      	mov	r1, r9
 8003198:	4640      	mov	r0, r8
 800319a:	47d0      	blx	sl
 800319c:	3001      	adds	r0, #1
 800319e:	d09b      	beq.n	80030d8 <_printf_i+0x164>
 80031a0:	3501      	adds	r5, #1
 80031a2:	68e3      	ldr	r3, [r4, #12]
 80031a4:	9903      	ldr	r1, [sp, #12]
 80031a6:	1a5b      	subs	r3, r3, r1
 80031a8:	42ab      	cmp	r3, r5
 80031aa:	dcf2      	bgt.n	8003192 <_printf_i+0x21e>
 80031ac:	e7eb      	b.n	8003186 <_printf_i+0x212>
 80031ae:	2500      	movs	r5, #0
 80031b0:	f104 0619 	add.w	r6, r4, #25
 80031b4:	e7f5      	b.n	80031a2 <_printf_i+0x22e>
 80031b6:	bf00      	nop
 80031b8:	08003469 	.word	0x08003469
 80031bc:	0800347a 	.word	0x0800347a

080031c0 <__retarget_lock_acquire_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <__retarget_lock_release_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <memcpy>:
 80031c4:	440a      	add	r2, r1
 80031c6:	4291      	cmp	r1, r2
 80031c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80031cc:	d100      	bne.n	80031d0 <memcpy+0xc>
 80031ce:	4770      	bx	lr
 80031d0:	b510      	push	{r4, lr}
 80031d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031da:	4291      	cmp	r1, r2
 80031dc:	d1f9      	bne.n	80031d2 <memcpy+0xe>
 80031de:	bd10      	pop	{r4, pc}

080031e0 <memmove>:
 80031e0:	4288      	cmp	r0, r1
 80031e2:	b510      	push	{r4, lr}
 80031e4:	eb01 0402 	add.w	r4, r1, r2
 80031e8:	d902      	bls.n	80031f0 <memmove+0x10>
 80031ea:	4284      	cmp	r4, r0
 80031ec:	4623      	mov	r3, r4
 80031ee:	d807      	bhi.n	8003200 <memmove+0x20>
 80031f0:	1e43      	subs	r3, r0, #1
 80031f2:	42a1      	cmp	r1, r4
 80031f4:	d008      	beq.n	8003208 <memmove+0x28>
 80031f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031fe:	e7f8      	b.n	80031f2 <memmove+0x12>
 8003200:	4402      	add	r2, r0
 8003202:	4601      	mov	r1, r0
 8003204:	428a      	cmp	r2, r1
 8003206:	d100      	bne.n	800320a <memmove+0x2a>
 8003208:	bd10      	pop	{r4, pc}
 800320a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800320e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003212:	e7f7      	b.n	8003204 <memmove+0x24>

08003214 <_realloc_r>:
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	4680      	mov	r8, r0
 800321a:	4614      	mov	r4, r2
 800321c:	460e      	mov	r6, r1
 800321e:	b921      	cbnz	r1, 800322a <_realloc_r+0x16>
 8003220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003224:	4611      	mov	r1, r2
 8003226:	f7ff bc1b 	b.w	8002a60 <_malloc_r>
 800322a:	b92a      	cbnz	r2, 8003238 <_realloc_r+0x24>
 800322c:	f7ff fbac 	bl	8002988 <_free_r>
 8003230:	4625      	mov	r5, r4
 8003232:	4628      	mov	r0, r5
 8003234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003238:	f000 f81b 	bl	8003272 <_malloc_usable_size_r>
 800323c:	4284      	cmp	r4, r0
 800323e:	4607      	mov	r7, r0
 8003240:	d802      	bhi.n	8003248 <_realloc_r+0x34>
 8003242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003246:	d812      	bhi.n	800326e <_realloc_r+0x5a>
 8003248:	4621      	mov	r1, r4
 800324a:	4640      	mov	r0, r8
 800324c:	f7ff fc08 	bl	8002a60 <_malloc_r>
 8003250:	4605      	mov	r5, r0
 8003252:	2800      	cmp	r0, #0
 8003254:	d0ed      	beq.n	8003232 <_realloc_r+0x1e>
 8003256:	42bc      	cmp	r4, r7
 8003258:	4622      	mov	r2, r4
 800325a:	4631      	mov	r1, r6
 800325c:	bf28      	it	cs
 800325e:	463a      	movcs	r2, r7
 8003260:	f7ff ffb0 	bl	80031c4 <memcpy>
 8003264:	4631      	mov	r1, r6
 8003266:	4640      	mov	r0, r8
 8003268:	f7ff fb8e 	bl	8002988 <_free_r>
 800326c:	e7e1      	b.n	8003232 <_realloc_r+0x1e>
 800326e:	4635      	mov	r5, r6
 8003270:	e7df      	b.n	8003232 <_realloc_r+0x1e>

08003272 <_malloc_usable_size_r>:
 8003272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003276:	1f18      	subs	r0, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfbc      	itt	lt
 800327c:	580b      	ldrlt	r3, [r1, r0]
 800327e:	18c0      	addlt	r0, r0, r3
 8003280:	4770      	bx	lr
	...

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
