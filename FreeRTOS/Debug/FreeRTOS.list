
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000046f0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004770  20004770  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179dc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003903  00000000  00000000  00037a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001138  00000000  00000000  0003c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002480c  00000000  00000000  0003d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015260  00000000  00000000  00061f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c3e  00000000  00000000  000771dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149e1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fc4  00000000  00000000  00149e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068fc 	.word	0x080068fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080068fc 	.word	0x080068fc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SendMessage>:
	GPIOB->AFR[1] |= (7U << GPIO_AFRH_AFSEL11_Pos);
}


/*--- Transmit LIN Message ---*/
void SendMessage(LINMSG* msg, int master){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	if (master == 1){
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d107      	bne.n	80004f4 <SendMessage+0x20>
		SendHeader(msg->ID);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f807 	bl	80004fc <SendHeader>
		SendResponse(msg);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f813 	bl	800051a <SendResponse>
	}
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <SendHeader>:
		checksum = ResponseToRequest(msg); //process it
	}while(checksum == 1);
	NVIC_EnableIRQ(USART3_IRQn); //Enable back the int
}

static void SendHeader(uint8_t ID){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	sync_break();
 8000506:	f000 f829 	bl	800055c <sync_break>
	UART_PutChar(ID);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f8c3 	bl	8000698 <UART_PutChar>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <SendResponse>:

static void SendResponse(LINMSG* msg){
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<(msg->length);i++){
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e00a      	b.n	800053e <SendResponse+0x24>
		UART_PutChar(msg->data[i]);
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	3302      	adds	r3, #2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f8b0 	bl	8000698 <UART_PutChar>
	for (int i = 0; i<(msg->length);i++){
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4293      	cmp	r3, r2
 8000548:	dbee      	blt.n	8000528 <SendResponse+0xe>
	}
	UART_PutChar(msg->checksum);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7b1b      	ldrb	r3, [r3, #12]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f8a2 	bl	8000698 <UART_PutChar>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <sync_break>:
}


/*--- Send sync field and break ---*/

void sync_break(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	USART3->CR1 |= USART_CR1_SBK;  // Set SBK bit to send break bits
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <sync_break+0x38>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <sync_break+0x38>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	60d3      	str	r3, [r2, #12]
	while (USART3->CR1 & USART_CR1_SBK); //Wait for the break to be over
 800056c:	bf00      	nop
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <sync_break+0x38>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f9      	bne.n	800056e <sync_break+0x12>
	while(!(USART3->SR & USART_SR_TC_Msk)); //wait for the transmission to be complete
 800057a:	bf00      	nop
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <sync_break+0x38>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <sync_break+0x20>

	UART_PutChar(0x55);
 8000588:	2055      	movs	r0, #85	; 0x55
 800058a:	f000 f885 	bl	8000698 <UART_PutChar>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40004800 	.word	0x40004800

08000598 <slave_response>:
 * This function is called at each interrupt
 * It's used when the card is in slave mode
 * It's role is to generate a response to the request of the master
 * TODO implement a way to handle error while comparing checksum
 * */
int slave_response(void){
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
	//sync_counter is used to determine whether we recived the sync byte or not
	if (slave_data_counter > -1){
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <slave_response+0xec>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db33      	blt.n	800060e <slave_response+0x76>
		if (slave_data_counter <3){ //We predefined a message with 3 data field
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <slave_response+0xec>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	dc0d      	bgt.n	80005ca <slave_response+0x32>
			salve_rx_msg.data[slave_data_counter++] = USART3->DR;
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <slave_response+0xf0>)
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <slave_response+0xec>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	4932      	ldr	r1, [pc, #200]	; (8000684 <slave_response+0xec>)
 80005ba:	600a      	str	r2, [r1, #0]
 80005bc:	b2c1      	uxtb	r1, r0
 80005be:	4a33      	ldr	r2, [pc, #204]	; (800068c <slave_response+0xf4>)
 80005c0:	4413      	add	r3, r2
 80005c2:	460a      	mov	r2, r1
 80005c4:	709a      	strb	r2, [r3, #2]
			return 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e057      	b.n	800067a <slave_response+0xe2>
		}else{
			salve_rx_msg.checksum = USART3->DR;
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <slave_response+0xf0>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <slave_response+0xf4>)
 80005d2:	731a      	strb	r2, [r3, #12]
			salve_rx_msg.length = slave_data_counter;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <slave_response+0xec>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <slave_response+0xf4>)
 80005dc:	705a      	strb	r2, [r3, #1]
			slave_data_counter = -1; //reseting the counter
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <slave_response+0xec>)
 80005e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e4:	601a      	str	r2, [r3, #0]
			if (checksum(salve_rx_msg.length,salve_rx_msg.data) == salve_rx_msg.checksum){
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <slave_response+0xf4>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	4929      	ldr	r1, [pc, #164]	; (8000690 <slave_response+0xf8>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f873 	bl	80006d8 <checksum>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <slave_response+0xf4>)
 80005f8:	7b1b      	ldrb	r3, [r3, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d104      	bne.n	8000608 <slave_response+0x70>
				Send_LIN_To_CAN(&salve_rx_msg);
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <slave_response+0xf4>)
 8000600:	f000 f904 	bl	800080c <Send_LIN_To_CAN>
				return 1;
 8000604:	2301      	movs	r3, #1
 8000606:	e038      	b.n	800067a <slave_response+0xe2>
			}else{
				return -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	e035      	b.n	800067a <slave_response+0xe2>
			}
		}
	}
	if(sync_counter == -1){
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <slave_response+0xfc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000616:	d10b      	bne.n	8000630 <slave_response+0x98>
		if(USART3->DR == 0x55){ //Check it is the sync byte (value 0x55)
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <slave_response+0xf0>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b55      	cmp	r3, #85	; 0x55
 800061e:	d104      	bne.n	800062a <slave_response+0x92>
			sync_counter = 0;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <slave_response+0xfc>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
			return 1;
 8000626:	2301      	movs	r3, #1
 8000628:	e027      	b.n	800067a <slave_response+0xe2>
	    }else{
			return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062e:	e024      	b.n	800067a <slave_response+0xe2>
	    }
	}
	if(sync_counter == 0){ //We received the sync byte
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <slave_response+0xfc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d120      	bne.n	800067a <slave_response+0xe2>
		//TODO
		if (USART3->DR == SLAVE_ADDR_WRITE){ //If we recied a request for the RTC
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <slave_response+0xf0>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b73      	cmp	r3, #115	; 0x73
 800063e:	d113      	bne.n	8000668 <slave_response+0xd0>
			LINMSG frame;
			frame = Make_RTC_LIN_Frame();
 8000640:	463b      	mov	r3, r7
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f874 	bl	8000730 <Make_RTC_LIN_Frame>
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	463c      	mov	r4, r7
 800064e:	6820      	ldr	r0, [r4, #0]
 8000650:	6861      	ldr	r1, [r4, #4]
 8000652:	68a2      	ldr	r2, [r4, #8]
 8000654:	c307      	stmia	r3!, {r0, r1, r2}
 8000656:	7b22      	ldrb	r2, [r4, #12]
 8000658:	701a      	strb	r2, [r3, #0]
			SendResponse(&frame);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff5b 	bl	800051a <SendResponse>
			return 1;
 8000664:	2301      	movs	r3, #1
 8000666:	e008      	b.n	800067a <slave_response+0xe2>
		}else if (USART3->DR == SLAVE_ADDR_READ){
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <slave_response+0xf0>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b72      	cmp	r3, #114	; 0x72
 800066e:	d104      	bne.n	800067a <slave_response+0xe2>
			slave_data_counter = 0; //This will make us fetch the lin data
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <slave_response+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
			return 1;
 8000676:	2301      	movs	r3, #1
 8000678:	e7ff      	b.n	800067a <slave_response+0xe2>
		}
		//ADD the different behavior as a slave based on the address
	}
}
 800067a:	4618      	mov	r0, r3
 800067c:	3724      	adds	r7, #36	; 0x24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	40004800 	.word	0x40004800
 800068c:	2000009c 	.word	0x2000009c
 8000690:	2000009e 	.word	0x2000009e
 8000694:	20000000 	.word	0x20000000

08000698 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART3->DR = data;
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <UART_PutChar+0x3c>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 80006a8:	bf00      	nop
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <UART_PutChar+0x3c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <UART_PutChar+0x12>
	while(!(USART3->SR & 0x00000040));
 80006b6:	bf00      	nop
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <UART_PutChar+0x3c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f9      	beq.n	80006b8 <UART_PutChar+0x20>
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40004800 	.word	0x40004800

080006d8 <checksum>:

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data){
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
	uint8_t ix;
	uint16_t check_sum = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	81bb      	strh	r3, [r7, #12]

	for(ix = 0; ix < length-1; ix++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e010      	b.n	8000710 <checksum+0x38>
		check_sum += data[ix];
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	89bb      	ldrh	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	81bb      	strh	r3, [r7, #12]
		if(check_sum >= 256){
 80006fe:	89bb      	ldrh	r3, [r7, #12]
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d902      	bls.n	800070a <checksum+0x32>
			check_sum -= 255;
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	3bff      	subs	r3, #255	; 0xff
 8000708:	81bb      	strh	r3, [r7, #12]
	for(ix = 0; ix < length-1; ix++){
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	7bfa      	ldrb	r2, [r7, #15]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	3b01      	subs	r3, #1
 8000716:	429a      	cmp	r2, r3
 8000718:	dbe9      	blt.n	80006ee <checksum+0x16>
		}
	}
	return (uint8_t)(0xff - check_sum);
 800071a:	89bb      	ldrh	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	b2db      	uxtb	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <Make_RTC_LIN_Frame>:

/*
 * THis function read the time from the rtc (it assume you already init it in the main)
 * And then it generate a LIN frame containing the inforamation
 * */
LINMSG Make_RTC_LIN_Frame(){
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	// Read date and time registers
	uint32_t time_tmp_reg = RTC->TR;
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <Make_RTC_LIN_Frame+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t date_tmp_reg = RTC->DR;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <Make_RTC_LIN_Frame+0xd8>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	623b      	str	r3, [r7, #32]

		// Extract values from saved register values
	uint8_t day = bcd_to_int((date_tmp_reg & (RTC_DR_DU | RTC_DR_DT)) >> RTC_DR_DU_Pos);
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff83 	bl	800165a <bcd_to_int>
 8000754:	4603      	mov	r3, r0
 8000756:	77fb      	strb	r3, [r7, #31]
	uint8_t month = bcd_to_int((date_tmp_reg & (RTC_DR_MU | RTC_DR_MT)) >> RTC_DR_MU_Pos);
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 031f 	and.w	r3, r3, #31
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff78 	bl	800165a <bcd_to_int>
 800076a:	4603      	mov	r3, r0
 800076c:	77bb      	strb	r3, [r7, #30]
	uint8_t year = bcd_to_int((date_tmp_reg & (RTC_DR_YU | RTC_DR_YT)) >> RTC_DR_YU_Pos);
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	f000 ff70 	bl	800165a <bcd_to_int>
 800077a:	4603      	mov	r3, r0
 800077c:	777b      	strb	r3, [r7, #29]
	uint8_t hour = bcd_to_int((time_tmp_reg & (RTC_TR_HU | RTC_TR_HT)) >> RTC_TR_HU_Pos);
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ff65 	bl	800165a <bcd_to_int>
 8000790:	4603      	mov	r3, r0
 8000792:	773b      	strb	r3, [r7, #28]
	uint8_t min = bcd_to_int((time_tmp_reg & (RTC_TR_MNU | RTC_TR_MNT)) >> RTC_TR_MNU_Pos);
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 ff5a 	bl	800165a <bcd_to_int>
 80007a6:	4603      	mov	r3, r0
 80007a8:	76fb      	strb	r3, [r7, #27]
	uint8_t sec = bcd_to_int((time_tmp_reg & (RTC_TR_SU | RTC_TR_ST)) >> RTC_TR_SU_Pos);
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ff50 	bl	800165a <bcd_to_int>
 80007ba:	4603      	mov	r3, r0
 80007bc:	76bb      	strb	r3, [r7, #26]

	LINMSG response;
	response.length = 6;
 80007be:	2306      	movs	r3, #6
 80007c0:	737b      	strb	r3, [r7, #13]
	response.data[0] = hour;
 80007c2:	7f3b      	ldrb	r3, [r7, #28]
 80007c4:	73bb      	strb	r3, [r7, #14]
	response.data[1] = min;
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	73fb      	strb	r3, [r7, #15]
	response.data[2] = sec;
 80007ca:	7ebb      	ldrb	r3, [r7, #26]
 80007cc:	743b      	strb	r3, [r7, #16]
	response.data[3] = day;
 80007ce:	7ffb      	ldrb	r3, [r7, #31]
 80007d0:	747b      	strb	r3, [r7, #17]
	response.data[4] = month;
 80007d2:	7fbb      	ldrb	r3, [r7, #30]
 80007d4:	74bb      	strb	r3, [r7, #18]
	response.data[5] = year;
 80007d6:	7f7b      	ldrb	r3, [r7, #29]
 80007d8:	74fb      	strb	r3, [r7, #19]
	response.checksum = checksum(6,response.data);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	3302      	adds	r3, #2
 80007e0:	4619      	mov	r1, r3
 80007e2:	2006      	movs	r0, #6
 80007e4:	f7ff ff78 	bl	80006d8 <checksum>
 80007e8:	4603      	mov	r3, r0
 80007ea:	763b      	strb	r3, [r7, #24]
	return response;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	461c      	mov	r4, r3
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007f6:	6020      	str	r0, [r4, #0]
 80007f8:	6061      	str	r1, [r4, #4]
 80007fa:	60a2      	str	r2, [r4, #8]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	7323      	strb	r3, [r4, #12]
}
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	372c      	adds	r7, #44	; 0x2c
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	40002800 	.word	0x40002800

0800080c <Send_LIN_To_CAN>:


/*
 * This function takes a LIN frame, and send the same data to CAN
 * */
void Send_LIN_To_CAN(LINMSG* salve_rx_msg){
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	CAN_frame can_linframe = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
	can_linframe.IDE = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	743b      	strb	r3, [r7, #16]
	can_linframe.ID = 0x11111111; //TODO maybe find another ID
 8000826:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
 800082a:	60fb      	str	r3, [r7, #12]
	can_linframe.RTR = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	747b      	strb	r3, [r7, #17]
	can_linframe.DLC = salve_rx_msg->length;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	74bb      	strb	r3, [r7, #18]
	for (int i=0; i<salve_rx_msg->length;i++){
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e00d      	b.n	8000858 <Send_LIN_To_CAN+0x4c>
		can_linframe.data[i] = salve_rx_msg->data[i];
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	3302      	adds	r3, #2
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	f107 0213 	add.w	r2, r7, #19
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<salve_rx_msg->length;i++){
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3301      	adds	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	461a      	mov	r2, r3
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4293      	cmp	r3, r2
 8000862:	dbeb      	blt.n	800083c <Send_LIN_To_CAN+0x30>
	}
	CAN_sendFrame(can_linframe);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800086a:	f000 f9b9 	bl	8000be0 <CAN_sendFrame>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0b      	blt.n	80008a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 021f 	and.w	r2, r3, #31
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <__NVIC_EnableIRQ+0x38>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f202 	lsl.w	r2, r0, r2
 800089e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <CAN_Counter_Init>:
#include "can.h"

static GPIO_TypeDef * PB = GPIOB;
static CAN_frame Counter;

void CAN_Counter_Init(){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	Counter.ID = 0x010;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <CAN_Counter_Init+0x2c>)
 800090e:	2210      	movs	r2, #16
 8000910:	601a      	str	r2, [r3, #0]
	Counter.IDE = 0x0;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <CAN_Counter_Init+0x2c>)
 8000914:	2200      	movs	r2, #0
 8000916:	711a      	strb	r2, [r3, #4]
	Counter.RTR = 0;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <CAN_Counter_Init+0x2c>)
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]
	Counter.DLC = 1;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <CAN_Counter_Init+0x2c>)
 8000920:	2201      	movs	r2, #1
 8000922:	719a      	strb	r2, [r3, #6]
	Counter.data[0] = 0;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <CAN_Counter_Init+0x2c>)
 8000926:	2200      	movs	r2, #0
 8000928:	71da      	strb	r2, [r3, #7]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	200000ac 	.word	0x200000ac

08000938 <CAN_GPIO_Init>:

void CAN_GPIO_Init(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

	Configure_buttonInterrupt();
 800093c:	f000 f90e 	bl	8000b5c <Configure_buttonInterrupt>
	RCC->AHB1ENR |= 0x2; //gpio clock activation for can gpio B
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //for the led gpio D
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<25); // can clock activation
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <CAN_GPIO_Init+0x9c>)
 800095e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40

	PB->MODER &=  ~(GPIO_MODER_MODER8_Msk |GPIO_MODER_MODER9_Msk); // set the Moder of pin 8 & 9 to 00
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000972:	601a      	str	r2, [r3, #0]
	PB->MODER |=  (GPIO_MODER_MODER8_1 |GPIO_MODER_MODER9_1); // set the Moder of pin 8 & 9 to 10 aka Alternate fonction
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000982:	601a      	str	r2, [r3, #0]

	PB->PUPDR &= ~(GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000992:	60da      	str	r2, [r3, #12]
	PB->OSPEEDR |= 0xF << 16; //Set the pin 8 and 9 to 11 aka hight speed
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 80009a2:	609a      	str	r2, [r3, #8]

	PB->AFR[1] &= ~0xFF;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
	PB->AFR[1] |= 0x99;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <CAN_GPIO_Init+0xa0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0299 	orr.w	r2, r2, #153	; 0x99
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24

	//Config the pin as general output for the led
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <CAN_GPIO_Init+0xa4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <CAN_GPIO_Init+0xa4>)
 80009ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ce:	6013      	str	r3, [r2, #0]

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	20000008 	.word	0x20000008
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <CAN_config>:

void CAN_config(uint8_t IDE, uint8_t FBM, uint16_t Filter_ID_high, uint16_t Filter_ID_low, uint16_t Filter_Mask_high, uint16_t Filter_Mask_low){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	4603      	mov	r3, r0
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	807b      	strh	r3, [r7, #2]
	//clear sleep bit
	CAN1->MCR &= ~(0x2);
 80009fe:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <CAN_config+0x174>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <CAN_config+0x174>)
 8000a04:	f023 0302 	bic.w	r3, r3, #2
 8000a08:	6013      	str	r3, [r2, #0]
	//wait for the can to wakeup
	while(CAN1->MSR & (0x2));
 8000a0a:	bf00      	nop
 8000a0c:	4b51      	ldr	r3, [pc, #324]	; (8000b54 <CAN_config+0x174>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f9      	bne.n	8000a0c <CAN_config+0x2c>
	//Set to config mode
	CAN1->MCR |= 0x1;
 8000a18:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <CAN_config+0x174>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a4d      	ldr	r2, [pc, #308]	; (8000b54 <CAN_config+0x174>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]

	while(!(CAN1->MSR & 0x1));
 8000a24:	bf00      	nop
 8000a26:	4b4b      	ldr	r3, [pc, #300]	; (8000b54 <CAN_config+0x174>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <CAN_config+0x46>

	//Set all bit but config to 0 (maybe check it later for sleep mode ?)
	CAN1->MCR &= 0x1;
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <CAN_config+0x174>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a47      	ldr	r2, [pc, #284]	; (8000b54 <CAN_config+0x174>)
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]

	// 250kbaus, loopback mode, BRP 16 10TQ
	//CAN1->BTR = 0x0403001B;
	CAN1->BTR = 0x40250010;
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <CAN_config+0x174>)
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <CAN_config+0x178>)
 8000a42:	61da      	str	r2, [r3, #28]

	//Realase mail box (? Is it necessary (box empty ?))
	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <CAN_config+0x174>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <CAN_config+0x174>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	60d3      	str	r3, [r2, #12]

	//Enable interrupt on mailbox 0
	CAN1->IER |= 0x2;
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <CAN_config+0x174>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a3f      	ldr	r2, [pc, #252]	; (8000b54 <CAN_config+0x174>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f7ff ff28 	bl	80008b4 <__NVIC_SetPriority>
	//NVIC_SetPriority(CAN1_TX_IRQn,0);
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a64:	2014      	movs	r0, #20
 8000a66:	f7ff ff07 	bl	8000878 <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_TX_IRQn);

	//set to normal mod
	CAN1->MCR &= ~(0x1);
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <CAN_config+0x174>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <CAN_config+0x174>)
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	6013      	str	r3, [r2, #0]
	//wait for normal mod
	while((CAN1->MSR & 0x1));
 8000a76:	bf00      	nop
 8000a78:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <CAN_config+0x174>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f9      	bne.n	8000a78 <CAN_config+0x98>

	//set filter in init mode
	CAN1->FMR |= (0x1); //Mask mode
 8000a84:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <CAN_config+0x174>)
 8000a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a8a:	4a32      	ldr	r2, [pc, #200]	; (8000b54 <CAN_config+0x174>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	CAN1->FA1R |= 0x1;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <CAN_config+0x174>)
 8000a96:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000a9a:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <CAN_config+0x174>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Assign the message from filter 0 to FIFO0
	CAN1->FFA1R &= ~(0x1);
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <CAN_config+0x174>)
 8000aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <CAN_config+0x174>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	if (FBM == 0){
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <CAN_config+0xec>
		CAN1->FM1R &= ~(0x1); //Set filter 1 in mask mod
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <CAN_config+0x174>)
 8000abc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ac0:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <CAN_config+0x174>)
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000aca:	e007      	b.n	8000adc <CAN_config+0xfc>
	}else{
		CAN1->FM1R |= 0x1; //Set filter 1 in list mod
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <CAN_config+0x174>)
 8000ace:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <CAN_config+0x174>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	// configure filter mode based on IDE
	if (IDE == 0){ // standard mode
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d116      	bne.n	8000b10 <CAN_config+0x130>
		CAN1->FS1R &= ~0x1; //activating filter 0 in 16bits
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <CAN_config+0x174>)
 8000ae4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <CAN_config+0x174>)
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_Mask_low << 16 | Filter_ID_low);
 8000af2:	8bbb      	ldrh	r3, [r7, #28]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <CAN_config+0x174>)
 8000afc:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_ID_high);
 8000b00:	8b3b      	ldrh	r3, [r7, #24]
 8000b02:	041a      	lsls	r2, r3, #16
 8000b04:	88bb      	ldrh	r3, [r7, #4]
 8000b06:	431a      	orrs	r2, r3
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <CAN_config+0x174>)
 8000b0a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000b0e:	e015      	b.n	8000b3c <CAN_config+0x15c>

	}else{ // extended mode
		CAN1->FS1R |= 0x1; //activating filter 0 32bits
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <CAN_config+0x174>)
 8000b12:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <CAN_config+0x174>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 16 | Filter_ID_low);
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	041a      	lsls	r2, r3, #16
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <CAN_config+0x174>)
 8000b2a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_Mask_low);
 8000b2e:	8b3b      	ldrh	r3, [r7, #24]
 8000b30:	041a      	lsls	r2, r3, #16
 8000b32:	8bbb      	ldrh	r3, [r7, #28]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <CAN_config+0x174>)
 8000b38:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	}

	//Activate Filter 0
	CAN1->FMR &= ~(0x1);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <CAN_config+0x174>)
 8000b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <CAN_config+0x174>)
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	40006400 	.word	0x40006400
 8000b58:	40250010 	.word	0x40250010

08000b5c <Configure_buttonInterrupt>:

void Configure_buttonInterrupt() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <Configure_buttonInterrupt+0x74>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <Configure_buttonInterrupt+0x74>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <Configure_buttonInterrupt+0x74>)
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <Configure_buttonInterrupt+0x74>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b76:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PA0 as input with pull-up
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);  // Clear mode bits
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <Configure_buttonInterrupt+0x78>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <Configure_buttonInterrupt+0x78>)
 8000b7e:	f023 0303 	bic.w	r3, r3, #3
 8000b82:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);  // Clear pull-up/pull-down bits
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <Configure_buttonInterrupt+0x78>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <Configure_buttonInterrupt+0x78>)
 8000b8a:	f023 0303 	bic.w	r3, r3, #3
 8000b8e:	60d3      	str	r3, [r2, #12]
    //GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;  // Set pull-up mode

    // Connect EXTI Line 0 to PA0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <Configure_buttonInterrupt+0x7c>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <Configure_buttonInterrupt+0x7c>)
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <Configure_buttonInterrupt+0x7c>)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <Configure_buttonInterrupt+0x7c>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0 to interrupt on the rising edge
    EXTI->IMR |= EXTI_IMR_MR0;  // Enable interrupt on EXTI Line 0
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <Configure_buttonInterrupt+0x80>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <Configure_buttonInterrupt+0x80>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;  // Set falling edge trigger
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <Configure_buttonInterrupt+0x80>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <Configure_buttonInterrupt+0x80>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	60d3      	str	r3, [r2, #12]

    // Enable and set the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f7ff fe5b 	bl	8000878 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	f7ff fe75 	bl	80008b4 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40013c00 	.word	0x40013c00

08000be0 <CAN_sendFrame>:


uint8_t CAN_sendFrame(CAN_frame CAN_mess){
 8000be0:	b490      	push	{r4, r7}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	463c      	mov	r4, r7
 8000be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //Check if TxMailbox0 is empty
    if (CAN1->TSR & 0x04000000){
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d03f      	beq.n	8000c78 <CAN_sendFrame+0x98>
        //fill the mailbox
        //Writing the id and the RTR
        uint32_t id = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
        if (CAN_mess.IDE == 0) { // standard mode
 8000bfc:	793b      	ldrb	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d106      	bne.n	8000c10 <CAN_sendFrame+0x30>
            id = (CAN_mess.ID << 21) | (CAN_mess.RTR << 1);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	055b      	lsls	r3, r3, #21
 8000c06:	797a      	ldrb	r2, [r7, #5]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e007      	b.n	8000c20 <CAN_sendFrame+0x40>
        }
        else { // extended mode
            id = (CAN_mess.ID << 3) | (CAN_mess.RTR << 1) | (1 << 2);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	797a      	ldrb	r2, [r7, #5]
 8000c16:	0052      	lsls	r2, r2, #1
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
        }
        CAN1->sTxMailBox[0].TIR = id;
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        CAN1->sTxMailBox[0].TDTR = CAN_mess.DLC;
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c2c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CAN1->sTxMailBox[0].TDLR = CAN_mess.data[3] << 24 | CAN_mess.data[2] << 16 | CAN_mess.data[1] << 8 | CAN_mess.data[0];
 8000c30:	7abb      	ldrb	r3, [r7, #10]
 8000c32:	061a      	lsls	r2, r3, #24
 8000c34:	7a7b      	ldrb	r3, [r7, #9]
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	7a3b      	ldrb	r3, [r7, #8]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c46:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        CAN1->sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	061a      	lsls	r2, r3, #24
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	431a      	orrs	r2, r3
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	7afa      	ldrb	r2, [r7, #11]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c60:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        CAN1->sTxMailBox[0].TIR |= 1; //Send the message
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c66:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <CAN_sendFrame+0xa4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        return(1);
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <CAN_sendFrame+0x9a>
    }
    else return(0);
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc90      	pop	{r4, r7}
 8000c82:	4770      	bx	lr
 8000c84:	40006400 	.word	0x40006400

08000c88 <EXTI0_IRQHandler>:
        sprintf(temp, "%02X ", frame->data[i]);
        strcat(str, temp);
    }
}

void EXTI0_IRQHandler(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    if ((EXTI->PR & EXTI_PR_PR0) != 0) {
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <EXTI0_IRQHandler+0x24>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <EXTI0_IRQHandler+0x20>
        // Button is pressed
    	EXTI0_buttonpressCallback();
 8000c98:	f000 f80a 	bl	8000cb0 <EXTI0_buttonpressCallback>
        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <EXTI0_IRQHandler+0x24>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <EXTI0_IRQHandler+0x24>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6153      	str	r3, [r2, #20]

    }
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40013c00 	.word	0x40013c00

08000cb0 <EXTI0_buttonpressCallback>:

void EXTI0_buttonpressCallback(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	CAN_sendFrame(Counter);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <EXTI0_buttonpressCallback+0x1c>)
 8000cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb8:	f7ff ff92 	bl	8000be0 <CAN_sendFrame>
	Counter.data[0]+= 1;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <EXTI0_buttonpressCallback+0x1c>)
 8000cbe:	79db      	ldrb	r3, [r3, #7]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <EXTI0_buttonpressCallback+0x1c>)
 8000cc6:	71da      	strb	r2, [r3, #7]
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000ac 	.word	0x200000ac

08000cd0 <CAN_frameFetch>:

/*
 * THis function fetch the can frame from the register and returns it
 *
 * */
CAN_frame CAN_frameFetch(void){
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	CAN_frame CAN_mess;
	// read the message from the FIFO
	CAN_mess.IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) ? 1 : 0; // check if extended identifier
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000cda:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	743b      	strb	r3, [r7, #16]
	if (CAN_mess.IDE == 0) { // standard identifier
 8000cee:	7c3b      	ldrb	r3, [r7, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d107      	bne.n	8000d04 <CAN_frameFetch+0x34>
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF; //Fetch the 11bits ID
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000cf6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000cfa:	0d5b      	lsrs	r3, r3, #21
 8000cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e006      	b.n	8000d12 <CAN_frameFetch+0x42>
	}else { // extended identifier
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFF; //Fetch the 29 bit ID
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000d06:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000d10:	60fb      	str	r3, [r7, #12]
	}
	CAN_mess.RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) ? 1 : 0; //Is it a reception trame?
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000d14:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	747b      	strb	r3, [r7, #17]
	CAN_mess.DLC = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000d2a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	74bb      	strb	r3, [r7, #18]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	e010      	b.n	8000d60 <CAN_frameFetch+0x90>
		CAN_mess.data[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i*8)) & 0xFF;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <CAN_frameFetch+0xb4>)
 8000d40:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	b2d9      	uxtb	r1, r3
 8000d4e:	f107 0213 	add.w	r2, r7, #19
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	4413      	add	r3, r2
 8000d56:	460a      	mov	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	7cbb      	ldrb	r3, [r7, #18]
 8000d62:	461a      	mov	r2, r3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	dbe9      	blt.n	8000d3e <CAN_frameFetch+0x6e>
	}
	return CAN_mess;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc90      	pop	{r4, r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40006400 	.word	0x40006400

08000d88 <getNewBufferCan>:
	int readIndex;
	int writeIndex;
	int bufferLenght;
}CircularBufferLin;

CircularBufferCan* getNewBufferCan(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  CircularBufferCan* newbuffer = (CircularBufferCan*) malloc(sizeof(CircularBufferCan));
 8000d8e:	20ac      	movs	r0, #172	; 0xac
 8000d90:	f005 fc30 	bl	80065f4 <malloc>
 8000d94:	4603      	mov	r3, r0
 8000d96:	607b      	str	r3, [r7, #4]
  newbuffer->readIndex = 0;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  newbuffer->writeIndex = 0;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  newbuffer->bufferLenght = 0;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  return newbuffer;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <getNewBufferLin>:

CircularBufferLin* getNewBufferLin(void){
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0

  CircularBufferLin* newbuffer = (CircularBufferLin*) malloc(sizeof(CircularBufferLin));
 8000dc0:	2090      	movs	r0, #144	; 0x90
 8000dc2:	f005 fc17 	bl	80065f4 <malloc>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	607b      	str	r3, [r7, #4]
  newbuffer->readIndex = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  newbuffer->writeIndex = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  newbuffer->bufferLenght = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  return newbuffer;
 8000de2:	687b      	ldr	r3, [r7, #4]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <pushToBufferCan>:

int pushToBufferCan(CircularBufferCan *buffer, CAN_frame frame){
 8000dec:	b084      	sub	sp, #16
 8000dee:	b490      	push	{r4, r7}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	f107 0014 	add.w	r0, r7, #20
 8000dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(buffer->bufferLenght == 10){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	d101      	bne.n	8000e0c <pushToBufferCan+0x20>
    //Buffer plein
    return 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e024      	b.n	8000e56 <pushToBufferCan+0x6a>
  }

  buffer->frameBuffer[buffer->writeIndex] = frame;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4413      	add	r3, r2
 8000e18:	461c      	mov	r4, r3
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  buffer->bufferLenght++;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  if(buffer->writeIndex == 10){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d104      	bne.n	8000e46 <pushToBufferCan+0x5a>
    buffer->writeIndex = 0;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000e44:	e006      	b.n	8000e54 <pushToBufferCan+0x68>
  }else{
    buffer->writeIndex++;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  }
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc90      	pop	{r4, r7}
 8000e5e:	b004      	add	sp, #16
 8000e60:	4770      	bx	lr

08000e62 <pullFromBufferCan>:

int pullFromBufferCan(CircularBufferCan *buffer, CAN_frame* frame){
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  if (buffer->bufferLenght == 0){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <pullFromBufferCan+0x18>
    //Buffer vide
    return 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e01f      	b.n	8000eba <pullFromBufferCan+0x58>
  }

  frame = &buffer->frameBuffer[buffer->readIndex];
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	603b      	str	r3, [r7, #0]

  buffer->bufferLenght--;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  if(buffer->readIndex == 10){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	d104      	bne.n	8000eaa <pullFromBufferCan+0x48>
    buffer->readIndex = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000ea8:	e006      	b.n	8000eb8 <pullFromBufferCan+0x56>
  }else{
    buffer->readIndex++;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
  return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <pushToBufferLin>:


int pushToBufferLin(CircularBufferLin *buffer, LINMSG frame){
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	b490      	push	{r4, r7}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	f107 0014 	add.w	r0, r7, #20
 8000ed4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(buffer->bufferLenght == 10){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ede:	2b0a      	cmp	r3, #10
 8000ee0:	d101      	bne.n	8000ee6 <pushToBufferLin+0x20>
    //Buffer plein
    return 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e02b      	b.n	8000f3e <pushToBufferLin+0x78>
  }

  buffer->frameBuffer[buffer->writeIndex] = frame;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	461c      	mov	r4, r3
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f02:	6020      	str	r0, [r4, #0]
 8000f04:	6061      	str	r1, [r4, #4]
 8000f06:	60a2      	str	r2, [r4, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	7323      	strb	r3, [r4, #12]

  buffer->bufferLenght++;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if(buffer->writeIndex == 10){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f20:	2b0a      	cmp	r3, #10
 8000f22:	d104      	bne.n	8000f2e <pushToBufferLin+0x68>
    buffer->writeIndex = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000f2c:	e006      	b.n	8000f3c <pushToBufferLin+0x76>
  }else{
    buffer->writeIndex++;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc90      	pop	{r4, r7}
 8000f46:	b004      	add	sp, #16
 8000f48:	4770      	bx	lr

08000f4a <pullFromBufferLin>:

int pullFromBufferLin(CircularBufferLin *buffer, LINMSG* frame){
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  if (buffer->bufferLenght == 0){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <pullFromBufferLin+0x18>
    //Buffer vide
    return 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e023      	b.n	8000faa <pullFromBufferLin+0x60>
  }

  frame = &buffer->frameBuffer[buffer->readIndex];
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	603b      	str	r3, [r7, #0]

  buffer->bufferLenght--;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if(buffer->readIndex == 10){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f8c:	2b0a      	cmp	r3, #10
 8000f8e:	d104      	bne.n	8000f9a <pullFromBufferLin+0x50>
    buffer->readIndex = 0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000f98:	e006      	b.n	8000fa8 <pullFromBufferLin+0x5e>
  }else{
    buffer->readIndex++;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <vApplicationGetIdleTaskMemory+0x30>)
 8000fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200000bc 	.word	0x200000bc
 8000fe8:	20000170 	.word	0x20000170

08000fec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <vApplicationGetTimerTaskMemory+0x2c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <vApplicationGetTimerTaskMemory+0x30>)
 8001002:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000370 	.word	0x20000370
 800101c:	20000424 	.word	0x20000424

08001020 <CAN1_RX0_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrupt handler for CAN1 RX0
void CAN1_RX0_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    if (CAN1->RF0R & CAN_RF0R_FMP0) // check if there is a message in the FIFO
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <CAN1_RX0_IRQHandler+0x2c>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <CAN1_RX0_IRQHandler+0x28>
    {
    	 // clear the message from the FIFO
    	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <CAN1_RX0_IRQHandler+0x2c>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <CAN1_RX0_IRQHandler+0x2c>)
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	60d3      	str	r3, [r2, #12]

        // send a message to task
        osSignalSet(Task_can_receptHandle, 0x01);
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <CAN1_RX0_IRQHandler+0x30>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fe8c 	bl	8002d60 <osSignalSet>

    }
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40006400 	.word	0x40006400
 8001050:	20000828 	.word	0x20000828

08001054 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
		if(USART3->SR & USART_SR_RXNE || USART3->SR & USART_SR_LBD_Msk){
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <USART3_IRQHandler+0x24>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <USART3_IRQHandler+0x1c>
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <USART3_IRQHandler+0x24>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <USART3_IRQHandler+0x20>
			slave_response();
 8001070:	f7ff fa92 	bl	8000598 <slave_response>
		}

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004800 	.word	0x40004800

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b0b6      	sub	sp, #216	; 0xd8
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	CanTxBuffer = getNewBufferCan();
 8001082:	f7ff fe81 	bl	8000d88 <getNewBufferCan>
 8001086:	4603      	mov	r3, r0
 8001088:	4a78      	ldr	r2, [pc, #480]	; (800126c <main+0x1f0>)
 800108a:	6013      	str	r3, [r2, #0]
	CanRxBuffer = getNewBufferCan();
 800108c:	f7ff fe7c 	bl	8000d88 <getNewBufferCan>
 8001090:	4603      	mov	r3, r0
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <main+0x1f4>)
 8001094:	6013      	str	r3, [r2, #0]
	LinTxBuffer = getNewBufferLin();
 8001096:	f7ff fe90 	bl	8000dba <getNewBufferLin>
 800109a:	4603      	mov	r3, r0
 800109c:	4a75      	ldr	r2, [pc, #468]	; (8001274 <main+0x1f8>)
 800109e:	6013      	str	r3, [r2, #0]
	LinRxBuffer = getNewBufferLin();
 80010a0:	f7ff fe8b 	bl	8000dba <getNewBufferLin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a74      	ldr	r2, [pc, #464]	; (8001278 <main+0x1fc>)
 80010a8:	6013      	str	r3, [r2, #0]

	Ask_comodo_frame.ID = 0x10510111;
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <main+0x200>)
 80010ac:	4a74      	ldr	r2, [pc, #464]	; (8001280 <main+0x204>)
 80010ae:	601a      	str	r2, [r3, #0]
	Ask_comodo_frame.RTR = 1;
 80010b0:	4b72      	ldr	r3, [pc, #456]	; (800127c <main+0x200>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]
	Ask_comodo_frame.IDE = 1;
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <main+0x200>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	711a      	strb	r2, [r3, #4]
	Ask_comodo_frame.DLC = 0;
 80010bc:	4b6f      	ldr	r3, [pc, #444]	; (800127c <main+0x200>)
 80010be:	2200      	movs	r2, #0
 80010c0:	719a      	strb	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 fcbb 	bl	8001a3c <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN_GPIO_Init();
 80010c6:	f7ff fc37 	bl	8000938 <CAN_GPIO_Init>
  CAN_Counter_Init();
 80010ca:	f7ff fc1d 	bl	8000908 <CAN_Counter_Init>
  //2.3
  //32bit mode, list mode
  //ID = 0x010,standard ID, accept both data and request frame
  CAN_config(1,1,(0x10 << 5),0x2,(0x10 << 5),0x00); //TODO init with right ID
 80010ce:	2300      	movs	r3, #0
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2302      	movs	r3, #2
 80010da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010de:	2101      	movs	r1, #1
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fc7d 	bl	80009e0 <CAN_config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f8f1 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 f959 	bl	80013a0 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CanRxSemaphore */
  osSemaphoreDef(CanRxSemaphore);
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  CanRxSemaphoreHandle = osSemaphoreCreate(osSemaphore(CanRxSemaphore), 10);
 80010fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010fe:	210a      	movs	r1, #10
 8001100:	4618      	mov	r0, r3
 8001102:	f001 feb9 	bl	8002e78 <osSemaphoreCreate>
 8001106:	4603      	mov	r3, r0
 8001108:	4a5e      	ldr	r2, [pc, #376]	; (8001284 <main+0x208>)
 800110a:	6013      	str	r3, [r2, #0]

  /* definition and creation of CanTxSemaphore */
  osSemaphoreDef(CanTxSemaphore);
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  CanTxSemaphoreHandle = osSemaphoreCreate(osSemaphore(CanTxSemaphore), 10);
 8001118:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800111c:	210a      	movs	r1, #10
 800111e:	4618      	mov	r0, r3
 8001120:	f001 feaa 	bl	8002e78 <osSemaphoreCreate>
 8001124:	4603      	mov	r3, r0
 8001126:	4a58      	ldr	r2, [pc, #352]	; (8001288 <main+0x20c>)
 8001128:	6013      	str	r3, [r2, #0]

  /* definition and creation of LinRxSemaphore */
  osSemaphoreDef(LinRxSemaphore);
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LinRxSemaphoreHandle = osSemaphoreCreate(osSemaphore(LinRxSemaphore), 10);
 8001136:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800113a:	210a      	movs	r1, #10
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fe9b 	bl	8002e78 <osSemaphoreCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <main+0x210>)
 8001146:	6013      	str	r3, [r2, #0]

  /* definition and creation of LinTxSemaphore */
  osSemaphoreDef(LinTxSemaphore);
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  LinTxSemaphoreHandle = osSemaphoreCreate(osSemaphore(LinTxSemaphore), 10);
 8001154:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001158:	210a      	movs	r1, #10
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fe8c 	bl	8002e78 <osSemaphoreCreate>
 8001160:	4603      	mov	r3, r0
 8001162:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <main+0x214>)
 8001164:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer_Ask_comodo */
  osTimerDef(Timer_Ask_comodo, ask_comodo);
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <main+0x218>)
 8001168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  Timer_Ask_comodoHandle = osTimerCreate(osTimer(Timer_Ask_comodo), osTimerPeriodic, NULL);
 8001172:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fd78 	bl	8002c70 <osTimerCreate>
 8001180:	4603      	mov	r3, r0
 8001182:	4a45      	ldr	r2, [pc, #276]	; (8001298 <main+0x21c>)
 8001184:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001186:	4b45      	ldr	r3, [pc, #276]	; (800129c <main+0x220>)
 8001188:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800118c:	461d      	mov	r5, r3
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800119a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fd04 	bl	8002bae <osThreadCreate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <main+0x224>)
 80011aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_recept */
  osThreadDef(Task_can_recept, can_reception, osPriorityHigh, 0, 128);
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <main+0x228>)
 80011ae:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_receptHandle = osThreadCreate(osThread(Task_can_recept), NULL);
 80011c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fcf1 	bl	8002bae <osThreadCreate>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <main+0x22c>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_send */
  osThreadDef(Task_can_send, can_send, osPriorityHigh, 0, 128);
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <main+0x230>)
 80011d4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011d8:	461d      	mov	r5, r3
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_sendHandle = osThreadCreate(osThread(Task_can_send), NULL);
 80011e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fcde 	bl	8002bae <osThreadCreate>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <main+0x234>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_proces */
  osThreadDef(Task_can_proces, can_process, osPriorityNormal, 0, 128);
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <main+0x238>)
 80011fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011fe:	461d      	mov	r5, r3
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_procesHandle = osThreadCreate(osThread(Task_can_proces), NULL);
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fccb 	bl	8002bae <osThreadCreate>
 8001218:	4603      	mov	r3, r0
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <main+0x23c>)
 800121c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_lin_proces */
  osThreadDef(Task_lin_proces, lin_process, osPriorityNormal, 0, 128);
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <main+0x240>)
 8001220:	f107 041c 	add.w	r4, r7, #28
 8001224:	461d      	mov	r5, r3
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_lin_procesHandle = osThreadCreate(osThread(Task_lin_proces), NULL);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fcb8 	bl	8002bae <osThreadCreate>
 800123e:	4603      	mov	r3, r0
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <main+0x244>)
 8001242:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_lin_send */
  osThreadDef(Task_lin_send, lin_send, osPriorityHigh, 0, 128);
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <main+0x248>)
 8001246:	463c      	mov	r4, r7
 8001248:	461d      	mov	r5, r3
 800124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_lin_sendHandle = osThreadCreate(osThread(Task_lin_send), NULL);
 8001256:	463b      	mov	r3, r7
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fca7 	bl	8002bae <osThreadCreate>
 8001260:	4603      	mov	r3, r0
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <main+0x24c>)
 8001264:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001266:	f001 fc9b 	bl	8002ba0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800126a:	e7fe      	b.n	800126a <main+0x1ee>
 800126c:	20000850 	.word	0x20000850
 8001270:	20000854 	.word	0x20000854
 8001274:	20000858 	.word	0x20000858
 8001278:	2000085c 	.word	0x2000085c
 800127c:	20000860 	.word	0x20000860
 8001280:	10510111 	.word	0x10510111
 8001284:	20000840 	.word	0x20000840
 8001288:	20000844 	.word	0x20000844
 800128c:	20000848 	.word	0x20000848
 8001290:	2000084c 	.word	0x2000084c
 8001294:	08001611 	.word	0x08001611
 8001298:	2000083c 	.word	0x2000083c
 800129c:	08006970 	.word	0x08006970
 80012a0:	20000824 	.word	0x20000824
 80012a4:	0800698c 	.word	0x0800698c
 80012a8:	20000828 	.word	0x20000828
 80012ac:	080069a8 	.word	0x080069a8
 80012b0:	2000082c 	.word	0x2000082c
 80012b4:	080069c4 	.word	0x080069c4
 80012b8:	20000830 	.word	0x20000830
 80012bc:	080069e0 	.word	0x080069e0
 80012c0:	20000834 	.word	0x20000834
 80012c4:	080069fc 	.word	0x080069fc
 80012c8:	20000838 	.word	0x20000838

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	; 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 f9a0 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <SystemClock_Config+0xcc>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xd0>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800133c:	2308      	movs	r3, #8
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001340:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134a:	2307      	movs	r3, #7
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fc96 	bl	8001c84 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800135e:	f000 f977 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2105      	movs	r1, #5
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fef7 	bl	8002174 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800138c:	f000 f960 	bl	8001650 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	; 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_GPIO_Init+0x4c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f001 fc24 	bl	8002c46 <osDelay>
 80013fe:	e7fb      	b.n	80013f8 <StartDefaultTask+0x8>

08001400 <can_reception>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_reception */
void can_reception(void const * argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af02      	add	r7, sp, #8
 8001406:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN can_reception */
  /* Infinite loop */
  for(;;)
  {
	osSignalWait(0,0); //wait for the interruption to generate a signal
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fce6 	bl	8002de0 <osSignalWait>
    CAN_frame recived_frame = CAN_frameFetch(); //Fetch the frame from the DR
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc59 	bl	8000cd0 <CAN_frameFetch>
    pushToBufferCan(CanRxBuffer,recived_frame);
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <can_reception+0x3c>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142c:	f7ff fcde 	bl	8000dec <pushToBufferCan>
    osSemaphoreRelease(CanRxSemaphoreHandle); //Release the semaphore so the frame can be processed
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <can_reception+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fdad 	bl	8002f94 <osSemaphoreRelease>
  {
 800143a:	e7e5      	b.n	8001408 <can_reception+0x8>
 800143c:	20000854 	.word	0x20000854
 8001440:	20000840 	.word	0x20000840

08001444 <can_send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_send */
void can_send(void const * argument)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_send */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(CanTxSemaphoreHandle,0); //Waiting for a semaphore
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <can_send+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fd50 	bl	8002ef8 <osSemaphoreWait>
	  CAN_frame *frame;
	  pullFromBufferCan(CanTxBuffer,frame); //Fetching the frame from the buffer
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <can_send+0x30>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fcff 	bl	8000e62 <pullFromBufferCan>
	  CAN_sendFrame(*frame); //Sending the frame
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	f7ff fbba 	bl	8000be0 <CAN_sendFrame>
  {
 800146c:	e7ee      	b.n	800144c <can_send+0x8>
 800146e:	bf00      	nop
 8001470:	20000844 	.word	0x20000844
 8001474:	20000850 	.word	0x20000850

08001478 <can_process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_process */
void can_process(void const * argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
	osTimerStart (Timer_Ask_comodoHandle,500);// Activate the timer to ask the comodo every 500ms
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <can_process+0xc0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fc25 	bl	8002cd8 <osTimerStart>
  /* USER CODE BEGIN can_process */
  /* Infinite loop */
  for(;;)
  {
	  // Fetch a CAN frame from the queue
	  osSemaphoreWait(CanRxSemaphoreHandle,0); //Waiting for a semaphore
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <can_process+0xc4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fd2f 	bl	8002ef8 <osSemaphoreWait>
	  CAN_frame *frame;
	  pullFromBufferCan(CanRxBuffer,frame);
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <can_process+0xc8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69f9      	ldr	r1, [r7, #28]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fcde 	bl	8000e62 <pullFromBufferCan>
	  if(frame->ID == 0x10015111){ //If it's the response from the comodo
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <can_process+0xcc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d125      	bne.n	80014fc <can_process+0x84>
		  serial_puts("Recived a CAN frame with comodo info\r\n");
 80014b0:	4825      	ldr	r0, [pc, #148]	; (8001548 <can_process+0xd0>)
 80014b2:	f000 fa1f 	bl	80018f4 <serial_puts>
		  serial_puts("Sending a LIN frame containing the info\r\n");
 80014b6:	4825      	ldr	r0, [pc, #148]	; (800154c <can_process+0xd4>)
 80014b8:	f000 fa1c 	bl	80018f4 <serial_puts>

		  //*Sending the info via LIN*//
		  LINMSG lin_frame;
		  lin_frame.ID = 0x44;
 80014bc:	2344      	movs	r3, #68	; 0x44
 80014be:	723b      	strb	r3, [r7, #8]
		  lin_frame.length = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	727b      	strb	r3, [r7, #9]
		  lin_frame.data[0] = frame->data[0];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	79db      	ldrb	r3, [r3, #7]
 80014c8:	72bb      	strb	r3, [r7, #10]
		  lin_frame.checksum = checksum(1,lin_frame.data);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	3302      	adds	r3, #2
 80014d0:	4619      	mov	r1, r3
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff f900 	bl	80006d8 <checksum>
 80014d8:	4603      	mov	r3, r0
 80014da:	753b      	strb	r3, [r7, #20]

		  //Puting the frame in the buffer
		  pushToBufferLin(LinTxBuffer,lin_frame);
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <can_process+0xd8>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	7d3b      	ldrb	r3, [r7, #20]
 80014e2:	f88d 3000 	strb.w	r3, [sp]
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ec:	f7ff fceb 	bl	8000ec6 <pushToBufferLin>
		  //Unblocking the sendLin
		  osSemaphoreRelease(LinTxSemaphoreHandle);
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <can_process+0xdc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fd4d 	bl	8002f94 <osSemaphoreRelease>
 80014fa:	e7c8      	b.n	800148e <can_process+0x16>
	  }else if(frame->ID == 0x10015112){
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a15      	ldr	r2, [pc, #84]	; (8001558 <can_process+0xe0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d1c3      	bne.n	800148e <can_process+0x16>

		  //*Sending the info via LIN*//
		  LINMSG* lin_frame;
		  lin_frame->ID = SLAVE_ADDR_READ;
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2272      	movs	r2, #114	; 0x72
 800150a:	701a      	strb	r2, [r3, #0]
		  lin_frame->length = 1;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2201      	movs	r2, #1
 8001510:	705a      	strb	r2, [r3, #1]
		  lin_frame->data[0] = frame->data[0];
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	79da      	ldrb	r2, [r3, #7]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	709a      	strb	r2, [r3, #2]
		  lin_frame->checksum = checksum(1,lin_frame->data);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	3302      	adds	r3, #2
 800151e:	4619      	mov	r1, r3
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff f8d9 	bl	80006d8 <checksum>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	731a      	strb	r2, [r3, #12]
		  SendMessage(lin_frame,0); //Sending the message manually as it's in "slave mode"
 800152e:	2100      	movs	r1, #0
 8001530:	69b8      	ldr	r0, [r7, #24]
 8001532:	f7fe ffcf 	bl	80004d4 <SendMessage>
  {
 8001536:	e7aa      	b.n	800148e <can_process+0x16>
 8001538:	2000083c 	.word	0x2000083c
 800153c:	20000840 	.word	0x20000840
 8001540:	20000854 	.word	0x20000854
 8001544:	10015111 	.word	0x10015111
 8001548:	08006a18 	.word	0x08006a18
 800154c:	08006a40 	.word	0x08006a40
 8001550:	20000858 	.word	0x20000858
 8001554:	2000084c 	.word	0x2000084c
 8001558:	10015112 	.word	0x10015112

0800155c <lin_process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lin_process */
void lin_process(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lin_process */
  /* Infinite loop */
  for(;;){
	  osSemaphoreWait(LinRxSemaphoreHandle,0);
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <lin_process+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fcc4 	bl	8002ef8 <osSemaphoreWait>
	  LINMSG* frame;
	  pullFromBufferLin(LinRxBuffer,frame);
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <lin_process+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69f9      	ldr	r1, [r7, #28]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fce7 	bl	8000f4a <pullFromBufferLin>
	  if (frame->ID == SLAVE_ADDR_READ){
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b72      	cmp	r3, #114	; 0x72
 8001582:	d1ef      	bne.n	8001564 <lin_process+0x8>
		  serial_puts("Received a request via LIN");
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <lin_process+0x6c>)
 8001586:	f000 f9b5 	bl	80018f4 <serial_puts>
		  serial_puts("Asking the comodo via can and sending the result back");
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <lin_process+0x70>)
 800158c:	f000 f9b2 	bl	80018f4 <serial_puts>

		  CAN_frame can_frame;
		  can_frame.ID = 0x10510112;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <lin_process+0x74>)
 8001592:	60fb      	str	r3, [r7, #12]
		  can_frame.RTR = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	747b      	strb	r3, [r7, #17]
		  can_frame.IDE = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	743b      	strb	r3, [r7, #16]
		  can_frame.DLC = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	74bb      	strb	r3, [r7, #18]
		  pushToBufferCan(CanTxBuffer,can_frame);
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <lin_process+0x78>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ae:	f7ff fc1d 	bl	8000dec <pushToBufferCan>
		  osSemaphoreRelease(CanTxSemaphoreHandle);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <lin_process+0x7c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fcec 	bl	8002f94 <osSemaphoreRelease>
  for(;;){
 80015bc:	e7d2      	b.n	8001564 <lin_process+0x8>
 80015be:	bf00      	nop
 80015c0:	20000848 	.word	0x20000848
 80015c4:	2000085c 	.word	0x2000085c
 80015c8:	08006a6c 	.word	0x08006a6c
 80015cc:	08006a88 	.word	0x08006a88
 80015d0:	10510112 	.word	0x10510112
 80015d4:	20000850 	.word	0x20000850
 80015d8:	20000844 	.word	0x20000844

080015dc <lin_send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lin_send */
void lin_send(void const * argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lin_send */
	/* Infinite loop */
	for(;;){
		osSemaphoreWait(LinTxSemaphoreHandle,0); //Waiting for a semaphore
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <lin_send+0x2c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fc84 	bl	8002ef8 <osSemaphoreWait>
		LINMSG* frame;
		pullFromBufferLin(LinTxBuffer,frame);
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <lin_send+0x30>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fca7 	bl	8000f4a <pullFromBufferLin>
		SendMessage(frame,LIN_MODE);
 80015fc:	2101      	movs	r1, #1
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7fe ff68 	bl	80004d4 <SendMessage>
	for(;;){
 8001604:	e7ee      	b.n	80015e4 <lin_send+0x8>
 8001606:	bf00      	nop
 8001608:	2000084c 	.word	0x2000084c
 800160c:	20000858 	.word	0x20000858

08001610 <ask_comodo>:
  /* USER CODE END lin_send */
}

/* ask_comodo function */
void ask_comodo(void const * argument)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ask_comodo */
	CAN_sendFrame(Ask_comodo_frame);
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <ask_comodo+0x18>)
 800161a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161c:	f7ff fae0 	bl	8000be0 <CAN_sendFrame>
  /* USER CODE END ask_comodo */
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000860 	.word	0x20000860

0800162c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800163e:	f000 fa1f 	bl	8001a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40001000 	.word	0x40001000

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>

0800165a <bcd_to_int>:
  * @brief Turn an 8-bit bcd number into an 8-bit binary number
  * @param bcd the binary coded decimal number
  * @retval n the binary number
  */
uint8_t bcd_to_int(uint8_t bcd)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
	uint8_t n_t = (bcd & 0xF0) >> 4;
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	73fb      	strb	r3, [r7, #15]
	uint8_t n_u = (bcd & 0x0F);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	73bb      	strb	r3, [r7, #14]
	uint8_t n = (n_t*10 + n_u);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	461a      	mov	r2, r3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4413      	add	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	4413      	add	r3, r2
 8001682:	737b      	strb	r3, [r7, #13]
	return n;
 8001684:	7b7b      	ldrb	r3, [r7, #13]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_MspInit+0x54>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_MspInit+0x54>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_MspInit+0x54>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_MspInit+0x54>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_MspInit+0x54>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_MspInit+0x54>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	210f      	movs	r1, #15
 80016d6:	f06f 0001 	mvn.w	r0, #1
 80016da:	f000 faa9 	bl	8001c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	; 0x38
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_InitTick+0xe4>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_InitTick+0xe4>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_InitTick+0xe4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001718:	f107 0210 	add.w	r2, r7, #16
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f000 ff32 	bl	800258c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001732:	f000 ff17 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8001736:	6378      	str	r0, [r7, #52]	; 0x34
 8001738:	e004      	b.n	8001744 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800173a:	f000 ff13 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 800173e:	4603      	mov	r3, r0
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_InitTick+0xe8>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	3b01      	subs	r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_InitTick+0xec>)
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <HAL_InitTick+0xf0>)
 8001756:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_InitTick+0xec>)
 800175a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_InitTick+0xec>)
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_InitTick+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_InitTick+0xec>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_InitTick+0xec>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001778:	4817      	ldr	r0, [pc, #92]	; (80017d8 <HAL_InitTick+0xec>)
 800177a:	f000 ff39 	bl	80025f0 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11b      	bne.n	80017c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800178c:	4812      	ldr	r0, [pc, #72]	; (80017d8 <HAL_InitTick+0xec>)
 800178e:	f000 ff89 	bl	80026a4 <HAL_TIM_Base_Start_IT>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001798:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800179c:	2b00      	cmp	r3, #0
 800179e:	d111      	bne.n	80017c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a0:	2036      	movs	r0, #54	; 0x36
 80017a2:	f000 fa61 	bl	8001c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d808      	bhi.n	80017be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2036      	movs	r0, #54	; 0x36
 80017b2:	f000 fa3d 	bl	8001c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_InitTick+0xf4>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e002      	b.n	80017c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	20000870 	.word	0x20000870
 80017dc:	40001000 	.word	0x40001000
 80017e0:	20000010 	.word	0x20000010

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM6_DAC_IRQHandler+0x10>)
 8001816:	f000 ffb5 	bl	8002784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000870 	.word	0x20000870

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f004 fea2 	bl	800659c <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20020000 	.word	0x20020000
 8001884:	00000400 	.word	0x00000400
 8001888:	200008b8 	.word	0x200008b8
 800188c:	20004770 	.word	0x20004770

08001890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <serial_putc+0x3c>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 80018c4:	bf00      	nop
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <serial_putc+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f9      	beq.n	80018c6 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 80018d2:	bf00      	nop
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <serial_putc+0x3c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f9      	beq.n	80018d4 <serial_putc+0x20>
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40004400 	.word	0x40004400

080018f4 <serial_puts>:

void serial_puts( char *msg)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001900:	e009      	b.n	8001916 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ffd2 	bl	80018b4 <serial_putc>
		cnt++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ef      	bne.n	8001902 <serial_puts+0xe>
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <USART2_IRQHandler>:

	chaine[i]='\0';
	return(chaine);
}

void USART2_IRQHandler(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  // Check if the RXNE (Receive Data Register Not Empty) flag is set
  if (USART2->SR & USART_SR_RXNE) {
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <USART2_IRQHandler+0x84>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b00      	cmp	r3, #0
 800193c:	d034      	beq.n	80019a8 <USART2_IRQHandler+0x7c>
    // Read the received data
    char data = USART2->DR;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <USART2_IRQHandler+0x84>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	71fb      	strb	r3, [r7, #7]
    // Store the received character in the buffer
    rxBuffer[rxIndex] = data;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	491b      	ldr	r1, [pc, #108]	; (80019b8 <USART2_IRQHandler+0x8c>)
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	54ca      	strb	r2, [r1, r3]
    // Check for the word "trame"
    if (rxIndex > 3 && rxBuffer[rxIndex] == 'e' &&  rxBuffer[rxIndex - 1] == 'm' && rxBuffer[rxIndex - 2] == 'a' && rxBuffer[rxIndex - 3] == 'r' && rxBuffer[rxIndex - 4] == 't') {
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b03      	cmp	r3, #3
 8001954:	dd23      	ble.n	800199e <USART2_IRQHandler+0x72>
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <USART2_IRQHandler+0x8c>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	2b65      	cmp	r3, #101	; 0x65
 8001960:	d11d      	bne.n	800199e <USART2_IRQHandler+0x72>
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3b01      	subs	r3, #1
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <USART2_IRQHandler+0x8c>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2b6d      	cmp	r3, #109	; 0x6d
 800196e:	d116      	bne.n	800199e <USART2_IRQHandler+0x72>
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b02      	subs	r3, #2
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <USART2_IRQHandler+0x8c>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	2b61      	cmp	r3, #97	; 0x61
 800197c:	d10f      	bne.n	800199e <USART2_IRQHandler+0x72>
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <USART2_IRQHandler+0x88>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3b03      	subs	r3, #3
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <USART2_IRQHandler+0x8c>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	2b72      	cmp	r3, #114	; 0x72
 800198a:	d108      	bne.n	800199e <USART2_IRQHandler+0x72>
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <USART2_IRQHandler+0x88>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3b04      	subs	r3, #4
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <USART2_IRQHandler+0x8c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	2b74      	cmp	r3, #116	; 0x74
 8001998:	d101      	bne.n	800199e <USART2_IRQHandler+0x72>
    	handleTrameReceived();
 800199a:	f000 f80f 	bl	80019bc <handleTrameReceived>
    }

    // Increment the buffer index
    rxIndex += 1 % 12;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <USART2_IRQHandler+0x88>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <USART2_IRQHandler+0x88>)
 80019a6:	6013      	str	r3, [r2, #0]
  }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40004400 	.word	0x40004400
 80019b4:	200008c8 	.word	0x200008c8
 80019b8:	200008bc 	.word	0x200008bc

080019bc <handleTrameReceived>:
void handleTrameReceived(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
	CAN_frame trame;
	trame.ID = 0x010;
 80019c2:	2310      	movs	r3, #16
 80019c4:	603b      	str	r3, [r7, #0]
	trame.IDE = 0x0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	713b      	strb	r3, [r7, #4]
	trame.RTR = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	717b      	strb	r3, [r7, #5]
	trame.DLC = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71bb      	strb	r3, [r7, #6]
	trame.data[0] = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
	CAN_sendFrame(trame);
 80019d6:	463b      	mov	r3, r7
 80019d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019da:	f7ff f901 	bl	8000be0 <CAN_sendFrame>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ee:	490e      	ldr	r1, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a04:	4c0b      	ldr	r4, [pc, #44]	; (8001a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a12:	f7ff ff3d 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a16:	f004 fdc7 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1a:	f7ff fb2f 	bl	800107c <main>
  bx  lr    
 8001a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a2c:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8001a30:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a34:	20004770 	.word	0x20004770

08001a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_Init+0x40>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_Init+0x40>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x40>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f8d8 	bl	8001c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f7ff fe3e 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fe10 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	200008cc 	.word	0x200008cc

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200008cc 	.word	0x200008cc

08001ac0 <__NVIC_SetPriorityGrouping>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff4c 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c42:	f7ff ff61 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffb1 	bl	8001bb4 <NVIC_EncodePriority>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff80 	bl	8001b60 <__NVIC_SetPriority>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff54 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e267      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e242      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a75      	ldr	r2, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6f      	ldr	r2, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6c      	ldr	r2, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff feb4 	bl	8001aa8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff feb0 	bl	8001aa8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e207      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fea0 	bl	8001aa8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fe9c 	bl	8001aa8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f3      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c7      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fe55 	bl	8001aa8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fe51 	bl	8001aa8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a8      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fe34 	bl	8001aa8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fe30 	bl	8001aa8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e187      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fe14 	bl	8001aa8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fe10 	bl	8001aa8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e167      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e01b      	b.n	8001edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fdfd 	bl	8001aa8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e00e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fdf9 	bl	8001aa8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d907      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e150      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470000 	.word	0x42470000
 8001ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ea      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8097 	beq.w	8002018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a7c      	ldr	r2, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a73      	ldr	r2, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fdb9 	bl	8001aa8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7ff fdb5 	bl	8001aa8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e10c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a63      	ldr	r2, [pc, #396]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x30c>
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a5e      	ldr	r2, [pc, #376]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a5b      	ldr	r2, [pc, #364]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f90:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fd7a 	bl	8001aa8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fd76 	bl	8001aa8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0cb      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0ee      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fd64 	bl	8001aa8 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fd60 	bl	8001aa8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0b5      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a1 	beq.w	8002164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d05c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d141      	bne.n	80020ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fd34 	bl	8001aa8 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff fd30 	bl	8001aa8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e087      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	491b      	ldr	r1, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff fd09 	bl	8001aa8 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff fd05 	bl	8001aa8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e05c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x416>
 80020b8:	e054      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fcf2 	bl	8001aa8 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff fcee 	bl	8001aa8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e045      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e038      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d028      	beq.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d121      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11a      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	4293      	cmp	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fc20 	bl	8001aa8 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fc1c 	bl	8001aa8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f9e6 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08006adc 	.word	0x08006adc
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b094      	sub	sp, #80	; 0x50
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
 800234c:	2300      	movs	r3, #0
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002350:	2300      	movs	r3, #0
 8002352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b79      	ldr	r3, [pc, #484]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80e1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e0db      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002378:	e0db      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_GetSysClockFreq+0x208>)
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800237e:	e0d8      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	2200      	movs	r2, #0
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
 80023ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	6139      	str	r1, [r7, #16]
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e4:	4659      	mov	r1, fp
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4651      	mov	r1, sl
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4651      	mov	r1, sl
 80023f4:	ebb2 0801 	subs.w	r8, r2, r1
 80023f8:	4659      	mov	r1, fp
 80023fa:	eb63 0901 	sbc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	462b      	mov	r3, r5
 8002420:	eb49 0303 	adc.w	r3, r9, r3
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002432:	4629      	mov	r1, r5
 8002434:	024b      	lsls	r3, r1, #9
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800243c:	4621      	mov	r1, r4
 800243e:	024a      	lsls	r2, r1, #9
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
 800244a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800244c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002450:	f7fd febe 	bl	80001d0 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	e058      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	4618      	mov	r0, r3
 8002468:	4611      	mov	r1, r2
 800246a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248a:	0150      	lsls	r0, r2, #5
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4641      	mov	r1, r8
 8002492:	ebb2 0a01 	subs.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb63 0b01 	sbc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b0:	ebb2 040a 	subs.w	r4, r2, sl
 80024b4:	eb63 050b 	sbc.w	r5, r3, fp
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	00eb      	lsls	r3, r5, #3
 80024c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	464b      	mov	r3, r9
 80024d4:	eb45 0303 	adc.w	r3, r5, r3
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	61fa      	str	r2, [r7, #28]
 8002500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002504:	f7fd fe64 	bl	80001d0 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002534:	4618      	mov	r0, r3
 8002536:	3750      	adds	r7, #80	; 0x50
 8002538:	46bd      	mov	sp, r7
 800253a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08006aec 	.word	0x08006aec

0800258c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	220f      	movs	r2, #15
 800259a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_GetClockConfig+0x5c>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_GetClockConfig+0x5c>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_GetClockConfig+0x5c>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_GetClockConfig+0x5c>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCC_GetClockConfig+0x60>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0207 	and.w	r2, r3, #7
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e041      	b.n	8002686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f839 	bl	800268e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 f9d8 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e04e      	b.n	800275a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a23      	ldr	r2, [pc, #140]	; (8002768 <HAL_TIM_Base_Start_IT+0xc4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d022      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d01d      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_TIM_Base_Start_IT+0xc8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_TIM_Base_Start_IT+0xcc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_TIM_Base_Start_IT+0xd0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00e      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_TIM_Base_Start_IT+0xd4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_TIM_Base_Start_IT+0xd8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x80>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_TIM_Base_Start_IT+0xdc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d111      	bne.n	8002748 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b06      	cmp	r3, #6
 8002734:	d010      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002746:	e007      	b.n	8002758 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40010400 	.word	0x40010400
 800277c:	40014000 	.word	0x40014000
 8002780:	40001800 	.word	0x40001800

08002784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0202 	mvn.w	r2, #2
 80027b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8ee 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8e0 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8f1 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0204 	mvn.w	r2, #4
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8c4 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8b6 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8c7 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0208 	mvn.w	r2, #8
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2204      	movs	r2, #4
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f89a 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f88c 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f89d 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b10      	cmp	r3, #16
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0210 	mvn.w	r2, #16
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2208      	movs	r2, #8
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f870 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f862 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f873 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0201 	mvn.w	r2, #1
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe fe92 	bl	800162c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f902 	bl	8002b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f838 	bl	80029d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b20      	cmp	r3, #32
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b20      	cmp	r3, #32
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0220 	mvn.w	r2, #32
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8cc 	bl	8002b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a40      	ldr	r2, [pc, #256]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d00f      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3d      	ldr	r2, [pc, #244]	; (8002afc <TIM_Base_SetConfig+0x118>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <TIM_Base_SetConfig+0x11c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <TIM_Base_SetConfig+0x120>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d027      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <TIM_Base_SetConfig+0x118>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d023      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <TIM_Base_SetConfig+0x11c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <TIM_Base_SetConfig+0x120>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d017      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <TIM_Base_SetConfig+0x128>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <TIM_Base_SetConfig+0x12c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <TIM_Base_SetConfig+0x130>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <TIM_Base_SetConfig+0x134>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <TIM_Base_SetConfig+0x138>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <TIM_Base_SetConfig+0x13c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0xf8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40010400 	.word	0x40010400
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	40001800 	.word	0x40001800
 8002b1c:	40001c00 	.word	0x40001c00
 8002b20:	40002000 	.word	0x40002000

08002b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5e:	2b84      	cmp	r3, #132	; 0x84
 8002b60:	d005      	beq.n	8002b6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3303      	adds	r3, #3
 8002b6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b82:	f3ef 8305 	mrs	r3, IPSR
 8002b86:	607b      	str	r3, [r7, #4]
  return(result);
 8002b88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ba4:	f001 fc7a 	bl	800449c <vTaskStartScheduler>
  
  return osOK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}

08002bae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb0:	b089      	sub	sp, #36	; 0x24
 8002bb2:	af04      	add	r7, sp, #16
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <osThreadCreate+0x54>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01c      	beq.n	8002c02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685c      	ldr	r4, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681d      	ldr	r5, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691e      	ldr	r6, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffb6 	bl	8002b4c <makeFreeRtosPriority>
 8002be0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bea:	9202      	str	r2, [sp, #8]
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	9100      	str	r1, [sp, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f001 fa72 	bl	80040e0 <xTaskCreateStatic>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e01c      	b.n	8002c3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685c      	ldr	r4, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c0e:	b29e      	uxth	r6, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff98 	bl	8002b4c <makeFreeRtosPriority>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	9200      	str	r2, [sp, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	4632      	mov	r2, r6
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f001 fab4 	bl	800419a <xTaskCreate>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <osDelay+0x16>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	e000      	b.n	8002c5e <osDelay+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fbe8 	bl	8004434 <vTaskDelay>
  
  return osOK;
 8002c64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <osTimerCreate+0x20>
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	e000      	b.n	8002c92 <osTimerCreate+0x22>
 8002c90:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002c9a:	9201      	str	r2, [sp, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <osTimerCreate+0x64>)
 8002ca6:	f002 fcda 	bl	800565e <xTimerCreateStatic>
 8002caa:	4603      	mov	r3, r0
 8002cac:	e00e      	b.n	8002ccc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <osTimerCreate+0x48>
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	e000      	b.n	8002cba <osTimerCreate+0x4a>
 8002cb8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <osTimerCreate+0x64>)
 8002cc6:	f002 fca9 	bl	800561c <xTimerCreate>
 8002cca:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	08006ac0 	.word	0x08006ac0

08002cd8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <osTimerStart+0x20>
    ticks = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002cf8:	f7ff ff40 	bl	8002b7c <inHandlerMode>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01a      	beq.n	8002d38 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	2200      	movs	r2, #0
 8002d08:	9200      	str	r2, [sp, #0]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	2109      	movs	r1, #9
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f002 fd1e 	bl	8005750 <xTimerGenericCommand>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002d1a:	23ff      	movs	r3, #255	; 0xff
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e018      	b.n	8002d52 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <osTimerStart+0x7a>
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <osTimerStart+0x84>)
 8002d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	e00c      	b.n	8002d52 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	2104      	movs	r1, #4
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f002 fd04 	bl	8005750 <xTimerGenericCommand>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <osTimerStart+0x7a>
      result = osErrorOS;
 8002d4e:	23ff      	movs	r3, #255	; 0xff
 8002d50:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002d52:	697b      	ldr	r3, [r7, #20]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002d72:	f7ff ff03 	bl	8002b7c <inHandlerMode>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f002 fab3 	bl	80052f8 <xTaskGenericNotifyFromISR>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <osSignalSet+0x3e>
      return 0x80000000;
 8002d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d9c:	e019      	b.n	8002dd2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <osSignalSet+0x70>
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <osSignalSet+0x7c>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	e00c      	b.n	8002dd0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f002 f9dc 	bl	800517c <xTaskGenericNotify>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <osSignalSet+0x70>
    return 0x80000000;
 8002dca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002dce:	e000      	b.n	8002dd2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfa:	d103      	bne.n	8002e04 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e009      	b.n	8002e18 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <osSignalWait+0x38>
      ticks = 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002e18:	f7ff feb0 	bl	8002b7c <inHandlerMode>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002e22:	2382      	movs	r3, #130	; 0x82
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e01b      	b.n	8002e60 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	1d1a      	adds	r2, r3, #4
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2000      	movs	r0, #0
 8002e34:	f002 f942 	bl	80050bc <xTaskNotifyWait>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d008      	beq.n	8002e50 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <osSignalWait+0x6a>
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e00a      	b.n	8002e60 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	e007      	b.n	8002e60 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da02      	bge.n	8002e5c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002e56:	2386      	movs	r3, #134	; 0x86
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e001      	b.n	8002e60 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	461c      	mov	r4, r3
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	3724      	adds	r7, #36	; 0x24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10a      	bne.n	8002ea6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	9200      	str	r2, [sp, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f000 f9cb 	bl	8003238 <xQueueGenericCreateStatic>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	e023      	b.n	8002eee <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa93 	bl	80033da <xQueueCreateCountingSemaphoreStatic>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	e01a      	b.n	8002eee <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d110      	bne.n	8002ee0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 fa30 	bl	8003328 <xQueueGenericCreate>
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <osSemaphoreCreate+0x64>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 faea 	bl	80034b0 <xQueueGenericSend>
      return sema;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	e006      	b.n	8002eee <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 faae 	bl	8003448 <xQueueCreateCountingSemaphore>
 8002eec:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	e03a      	b.n	8002f86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1a:	d103      	bne.n	8002f24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e009      	b.n	8002f38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <osSemaphoreWait+0x40>
      ticks = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002f38:	f7ff fe20 	bl	8002b7c <inHandlerMode>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d017      	beq.n	8002f72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	461a      	mov	r2, r3
 8002f48:	2100      	movs	r1, #0
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fec2 	bl	8003cd4 <xQueueReceiveFromISR>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002f56:	23ff      	movs	r3, #255	; 0xff
 8002f58:	e015      	b.n	8002f86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d011      	beq.n	8002f84 <osSemaphoreWait+0x8c>
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <osSemaphoreWait+0x98>)
 8002f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	e008      	b.n	8002f84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fda1 	bl	8003abc <xQueueSemaphoreTake>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002f80:	23ff      	movs	r3, #255	; 0xff
 8002f82:	e000      	b.n	8002f86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002fa4:	f7ff fdea 	bl	8002b7c <inHandlerMode>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fc14 	bl	80037e2 <xQueueGiveFromISR>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002fc0:	23ff      	movs	r3, #255	; 0xff
 8002fc2:	e017      	b.n	8002ff4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d013      	beq.n	8002ff2 <osSemaphoreRelease+0x5e>
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <osSemaphoreRelease+0x68>)
 8002fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	e00a      	b.n	8002ff2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa64 	bl	80034b0 <xQueueGenericSend>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002fee:	23ff      	movs	r3, #255	; 0xff
 8002ff0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 0208 	add.w	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f103 0208 	add.w	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f103 0208 	add.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b8:	d103      	bne.n	80030c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e00c      	b.n	80030dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3308      	adds	r3, #8
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e002      	b.n	80030d0 <vListInsert+0x2e>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d2f6      	bcs.n	80030ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6892      	ldr	r2, [r2, #8]
 800312a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6852      	ldr	r2, [r2, #4]
 8003134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d103      	bne.n	8003148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	1e5a      	subs	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003192:	f002 fef7 	bl	8005f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	441a      	add	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	3b01      	subs	r3, #1
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d114      	bne.n	8003212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01a      	beq.n	8003226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3310      	adds	r3, #16
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fbe5 	bl	80049c4 <xTaskRemoveFromEventList>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <xQueueGenericReset+0xcc>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	e009      	b.n	8003226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3310      	adds	r3, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fef2 	bl	8003000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff feed 	bl	8003000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003226:	f002 fedd 	bl	8005fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800322a:	2301      	movs	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	; 0x38
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <xQueueGenericCreateStatic+0x52>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <xQueueGenericCreateStatic+0x56>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <xQueueGenericCreateStatic+0x58>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	623b      	str	r3, [r7, #32]
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <xQueueGenericCreateStatic+0x7e>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <xQueueGenericCreateStatic+0x82>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <xQueueGenericCreateStatic+0x84>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61fb      	str	r3, [r7, #28]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032d6:	2348      	movs	r3, #72	; 0x48
 80032d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b48      	cmp	r3, #72	; 0x48
 80032de:	d00a      	beq.n	80032f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61bb      	str	r3, [r7, #24]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800330a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f83f 	bl	800339c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003320:	4618      	mov	r0, r3
 8003322:	3730      	adds	r7, #48	; 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <xQueueGenericCreate+0x2a>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	613b      	str	r3, [r7, #16]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3348      	adds	r3, #72	; 0x48
 8003360:	4618      	mov	r0, r3
 8003362:	f002 ff31 	bl	80061c8 <pvPortMalloc>
 8003366:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d011      	beq.n	8003392 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3348      	adds	r3, #72	; 0x48
 8003376:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003380:	79fa      	ldrb	r2, [r7, #7]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4613      	mov	r3, r2
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f805 	bl	800339c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003392:	69bb      	ldr	r3, [r7, #24]
	}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e002      	b.n	80033be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ca:	2101      	movs	r1, #1
 80033cc:	69b8      	ldr	r0, [r7, #24]
 80033ce:	f7ff fecb 	bl	8003168 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08a      	sub	sp, #40	; 0x28
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	61bb      	str	r3, [r7, #24]
}
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90a      	bls.n	8003420 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	617b      	str	r3, [r7, #20]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ff04 	bl	8003238 <xQueueGenericCreateStatic>
 8003430:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800343e:	69fb      	ldr	r3, [r7, #28]
	}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	613b      	str	r3, [r7, #16]
}
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d90a      	bls.n	800348c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60fb      	str	r3, [r7, #12]
}
 8003488:	bf00      	nop
 800348a:	e7fe      	b.n	800348a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800348c:	2202      	movs	r2, #2
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff49 	bl	8003328 <xQueueGenericCreate>
 8003496:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80034a4:	697b      	ldr	r3, [r7, #20]
	}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <xQueueGenericSend+0x32>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d103      	bne.n	80034f0 <xQueueGenericSend+0x40>
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <xQueueGenericSend+0x44>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <xQueueGenericSend+0x46>
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <xQueueGenericSend+0x60>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800350c:	bf00      	nop
 800350e:	e7fe      	b.n	800350e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x6e>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <xQueueGenericSend+0x72>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSend+0x74>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueGenericSend+0x8e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800353e:	f001 fc01 	bl	8004d44 <xTaskGetSchedulerState>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <xQueueGenericSend+0x9e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <xQueueGenericSend+0xa2>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <xQueueGenericSend+0xa4>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericSend+0xbe>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61fb      	str	r3, [r7, #28]
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800356e:	f002 fd09 	bl	8005f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <xQueueGenericSend+0xd4>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d129      	bne.n	80035d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fc3b 	bl	8003e04 <prvCopyDataToQueue>
 800358e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fa11 	bl	80049c4 <xTaskRemoveFromEventList>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <xQueueGenericSend+0x1f8>)
 80035aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	e00a      	b.n	80035d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <xQueueGenericSend+0x1f8>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035d0:	f002 fd08 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e063      	b.n	80036a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035de:	f002 fd01 	bl	8005fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e05c      	b.n	80036a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fa49 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035fa:	f002 fcf3 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035fe:	f000 ffbd 	bl	800457c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003602:	f002 fcbf 	bl	8005f84 <vPortEnterCritical>
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800360c:	b25b      	sxtb	r3, r3
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003612:	d103      	bne.n	800361c <xQueueGenericSend+0x16c>
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003622:	b25b      	sxtb	r3, r3
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d103      	bne.n	8003632 <xQueueGenericSend+0x182>
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003632:	f002 fcd7 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003636:	1d3a      	adds	r2, r7, #4
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fa38 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d124      	bne.n	8003694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800364a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364c:	f000 fcd2 	bl	8003ff4 <prvIsQueueFull>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	3310      	adds	r3, #16
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f960 	bl	8004924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003666:	f000 fc5d 	bl	8003f24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800366a:	f000 ff95 	bl	8004598 <xTaskResumeAll>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f47f af7c 	bne.w	800356e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <xQueueGenericSend+0x1f8>)
 8003678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	e772      	b.n	800356e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800368a:	f000 fc4b 	bl	8003f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800368e:	f000 ff83 	bl	8004598 <xTaskResumeAll>
 8003692:	e76c      	b.n	800356e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003696:	f000 fc45 	bl	8003f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800369a:	f000 ff7d 	bl	8004598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800369e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3738      	adds	r7, #56	; 0x38
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b090      	sub	sp, #64	; 0x40
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <xQueueGenericSendFromISR+0x3c>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <xQueueGenericSendFromISR+0x40>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <xQueueGenericSendFromISR+0x42>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <xQueueGenericSendFromISR+0x6a>
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <xQueueGenericSendFromISR+0x6e>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericSendFromISR+0x70>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003736:	f002 fd07 	bl	8006148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800373a:	f3ef 8211 	mrs	r2, BASEPRI
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	61fa      	str	r2, [r7, #28]
 8003750:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003752:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <xQueueGenericSendFromISR+0xbc>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d12f      	bne.n	80037c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800376e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800377e:	f000 fb41 	bl	8003e04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003782:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378a:	d112      	bne.n	80037b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f913 	bl	80049c4 <xTaskRemoveFromEventList>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037b6:	3301      	adds	r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	b25a      	sxtb	r2, r3
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037c2:	2301      	movs	r3, #1
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80037c6:	e001      	b.n	80037cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3740      	adds	r7, #64	; 0x40
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08e      	sub	sp, #56	; 0x38
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	623b      	str	r3, [r7, #32]
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	61fb      	str	r3, [r7, #28]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <xQueueGiveFromISR+0x58>
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <xQueueGiveFromISR+0x5c>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueGiveFromISR+0x5e>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	61bb      	str	r3, [r7, #24]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800385a:	f002 fc75 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 800385e:	f3ef 8211 	mrs	r2, BASEPRI
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	617a      	str	r2, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003876:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003886:	429a      	cmp	r2, r3
 8003888:	d22b      	bcs.n	80038e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800389c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a4:	d112      	bne.n	80038cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	3324      	adds	r3, #36	; 0x24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f886 	bl	80049c4 <xTaskRemoveFromEventList>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e007      	b.n	80038dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d0:	3301      	adds	r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
 80038e0:	e001      	b.n	80038e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f383 8811 	msr	BASEPRI, r3
}
 80038f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3738      	adds	r7, #56	; 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <xQueueReceive+0x30>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	623b      	str	r3, [r7, #32]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <xQueueReceive+0x3e>
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueReceive+0x42>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueReceive+0x44>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueReceive+0x5e>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	61fb      	str	r3, [r7, #28]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395a:	f001 f9f3 	bl	8004d44 <xTaskGetSchedulerState>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <xQueueReceive+0x6e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xQueueReceive+0x72>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <xQueueReceive+0x74>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueReceive+0x8e>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800398a:	f002 fafb 	bl	8005f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01f      	beq.n	80039da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399e:	f000 fa9b 	bl	8003ed8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00f      	beq.n	80039d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	3310      	adds	r3, #16
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 f804 	bl	80049c4 <xTaskRemoveFromEventList>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039c2:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <xQueueReceive+0x1bc>)
 80039c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039d2:	f002 fb07 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e069      	b.n	8003aae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e0:	f002 fb00 	bl	8005fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e062      	b.n	8003aae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ee:	f107 0310 	add.w	r3, r7, #16
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f848 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fc:	f002 faf2 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a00:	f000 fdbc 	bl	800457c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a04:	f002 fabe 	bl	8005f84 <vPortEnterCritical>
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a14:	d103      	bne.n	8003a1e <xQueueReceive+0x122>
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a2a:	d103      	bne.n	8003a34 <xQueueReceive+0x138>
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a34:	f002 fad6 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a38:	1d3a      	adds	r2, r7, #4
 8003a3a:	f107 0310 	add.w	r3, r7, #16
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f837 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d123      	bne.n	8003a94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4e:	f000 fabb 	bl	8003fc8 <prvIsQueueEmpty>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	3324      	adds	r3, #36	; 0x24
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ff5f 	bl	8004924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a68:	f000 fa5c 	bl	8003f24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a6c:	f000 fd94 	bl	8004598 <xTaskResumeAll>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d189      	bne.n	800398a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <xQueueReceive+0x1bc>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	e780      	b.n	800398a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8a:	f000 fa4b 	bl	8003f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a8e:	f000 fd83 	bl	8004598 <xTaskResumeAll>
 8003a92:	e77a      	b.n	800398a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a96:	f000 fa45 	bl	8003f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9a:	f000 fd7d 	bl	8004598 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa0:	f000 fa92 	bl	8003fc8 <prvIsQueueEmpty>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f43f af6f 	beq.w	800398a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3730      	adds	r7, #48	; 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	623b      	str	r3, [r7, #32]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	61fb      	str	r3, [r7, #28]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b0c:	f001 f91a 	bl	8004d44 <xTaskGetSchedulerState>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <xQueueSemaphoreTake+0x60>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <xQueueSemaphoreTake+0x64>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <xQueueSemaphoreTake+0x66>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	61bb      	str	r3, [r7, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b3c:	f002 fa22 	bl	8005f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d024      	beq.n	8003b96 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b5c:	f001 fa9a 	bl	8005094 <pvTaskIncrementMutexHeldCount>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	3310      	adds	r3, #16
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff26 	bl	80049c4 <xTaskRemoveFromEventList>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <xQueueSemaphoreTake+0x214>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b8e:	f002 fa29 	bl	8005fe4 <vPortExitCritical>
				return pdPASS;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e097      	b.n	8003cc6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	617b      	str	r3, [r7, #20]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bb8:	f002 fa14 	bl	8005fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e082      	b.n	8003cc6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc6:	f107 030c 	add.w	r3, r7, #12
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 ff5c 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd4:	f002 fa06 	bl	8005fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd8:	f000 fcd0 	bl	800457c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bdc:	f002 f9d2 	bl	8005f84 <vPortEnterCritical>
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bec:	d103      	bne.n	8003bf6 <xQueueSemaphoreTake+0x13a>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c02:	d103      	bne.n	8003c0c <xQueueSemaphoreTake+0x150>
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	f002 f9ea 	bl	8005fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c10:	463a      	mov	r2, r7
 8003c12:	f107 030c 	add.w	r3, r7, #12
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff4b 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d132      	bne.n	8003c8a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c26:	f000 f9cf 	bl	8003fc8 <prvIsQueueEmpty>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d026      	beq.n	8003c7e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003c38:	f002 f9a4 	bl	8005f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f89d 	bl	8004d80 <xTaskPriorityInherit>
 8003c46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c48:	f002 f9cc 	bl	8005fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe65 	bl	8004924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c5c:	f000 f962 	bl	8003f24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c60:	f000 fc9a 	bl	8004598 <xTaskResumeAll>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f47f af68 	bne.w	8003b3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <xQueueSemaphoreTake+0x214>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	e75e      	b.n	8003b3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c80:	f000 f950 	bl	8003f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c84:	f000 fc88 	bl	8004598 <xTaskResumeAll>
 8003c88:	e758      	b.n	8003b3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c8c:	f000 f94a 	bl	8003f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c90:	f000 fc82 	bl	8004598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c96:	f000 f997 	bl	8003fc8 <prvIsQueueEmpty>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f43f af4d 	beq.w	8003b3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ca8:	f002 f96c 	bl	8005f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cae:	f000 f891 	bl	8003dd4 <prvGetDisinheritPriorityAfterTimeout>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f95c 	bl	8004f78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003cc0:	f002 f990 	bl	8005fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3738      	adds	r7, #56	; 0x38
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	; 0x38
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	623b      	str	r3, [r7, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <xQueueReceiveFromISR+0x3a>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xQueueReceiveFromISR+0x3e>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueReceiveFromISR+0x40>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	61fb      	str	r3, [r7, #28]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d2e:	f002 fa0b 	bl	8006148 <vPortValidateInterruptPriority>
	__asm volatile
 8003d32:	f3ef 8211 	mrs	r2, BASEPRI
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	61ba      	str	r2, [r7, #24]
 8003d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02f      	beq.n	8003dba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d68:	f000 f8b6 	bl	8003ed8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7c:	d112      	bne.n	8003da4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	3310      	adds	r3, #16
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fe1a 	bl	80049c4 <xTaskRemoveFromEventList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e007      	b.n	8003db4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da8:	3301      	adds	r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	b25a      	sxtb	r2, r3
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003db4:	2301      	movs	r3, #1
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
 8003db8:	e001      	b.n	8003dbe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f383 8811 	msr	BASEPRI, r3
}
 8003dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3738      	adds	r7, #56	; 0x38
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d006      	beq.n	8003df2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e001      	b.n	8003df6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003df6:	68fb      	ldr	r3, [r7, #12]
	}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d14d      	bne.n	8003ec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f81c 	bl	8004e6c <xTaskPriorityDisinherit>
 8003e34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e043      	b.n	8003ec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d119      	bne.n	8003e78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6858      	ldr	r0, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	f002 fbd8 	bl	8006604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d32b      	bcc.n	8003ec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e026      	b.n	8003ec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68d8      	ldr	r0, [r3, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	461a      	mov	r2, r3
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	f002 fbbe 	bl	8006604 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	425b      	negs	r3, r3
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d207      	bcs.n	8003eb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	425b      	negs	r3, r3
 8003eae:	441a      	add	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d105      	bne.n	8003ec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ece:	697b      	ldr	r3, [r7, #20]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d018      	beq.n	8003f1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d303      	bcc.n	8003f0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68d9      	ldr	r1, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	461a      	mov	r2, r3
 8003f16:	6838      	ldr	r0, [r7, #0]
 8003f18:	f002 fb74 	bl	8006604 <memcpy>
	}
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f2c:	f002 f82a 	bl	8005f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f38:	e011      	b.n	8003f5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd3c 	bl	80049c4 <xTaskRemoveFromEventList>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f52:	f000 fe11 	bl	8004b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	dce9      	bgt.n	8003f3a <prvUnlockQueue+0x16>
 8003f66:	e000      	b.n	8003f6a <prvUnlockQueue+0x46>
					break;
 8003f68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	22ff      	movs	r2, #255	; 0xff
 8003f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f72:	f002 f837 	bl	8005fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f76:	f002 f805 	bl	8005f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f82:	e011      	b.n	8003fa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3310      	adds	r3, #16
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fd17 	bl	80049c4 <xTaskRemoveFromEventList>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f9c:	f000 fdec 	bl	8004b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	dce9      	bgt.n	8003f84 <prvUnlockQueue+0x60>
 8003fb0:	e000      	b.n	8003fb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fbc:	f002 f812 	bl	8005fe4 <vPortExitCritical>
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd0:	f001 ffd8 	bl	8005f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e001      	b.n	8003fe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fe6:	f001 fffd 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ffc:	f001 ffc2 	bl	8005f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	429a      	cmp	r2, r3
 800400a:	d102      	bne.n	8004012 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e001      	b.n	8004016 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004016:	f001 ffe5 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e014      	b.n	800405e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <vQueueAddToRegistry+0x50>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004040:	490c      	ldr	r1, [pc, #48]	; (8004074 <vQueueAddToRegistry+0x50>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <vQueueAddToRegistry+0x50>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004056:	e006      	b.n	8004066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b07      	cmp	r3, #7
 8004062:	d9e7      	bls.n	8004034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	200008d0 	.word	0x200008d0

08004078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004088:	f001 ff7c 	bl	8005f84 <vPortEnterCritical>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004092:	b25b      	sxtb	r3, r3
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d103      	bne.n	80040a2 <vQueueWaitForMessageRestricted+0x2a>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ae:	d103      	bne.n	80040b8 <vQueueWaitForMessageRestricted+0x40>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b8:	f001 ff94 	bl	8005fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fc4d 	bl	800496c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ff26 	bl	8003f24 <prvUnlockQueue>
	}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xTaskCreateStatic+0x2a>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	623b      	str	r3, [r7, #32]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xTaskCreateStatic+0x46>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61fb      	str	r3, [r7, #28]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004126:	23b4      	movs	r3, #180	; 0xb4
 8004128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2bb4      	cmp	r3, #180	; 0xb4
 800412e:	d00a      	beq.n	8004146 <xTaskCreateStatic+0x66>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	61bb      	str	r3, [r7, #24]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01e      	beq.n	800418c <xTaskCreateStatic+0xac>
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2202      	movs	r2, #2
 8004162:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004166:	2300      	movs	r3, #0
 8004168:	9303      	str	r3, [sp, #12]
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	9302      	str	r3, [sp, #8]
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f850 	bl	8004224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004186:	f000 f8eb 	bl	8004360 <prvAddNewTaskToReadyList>
 800418a:	e001      	b.n	8004190 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004190:	697b      	ldr	r3, [r7, #20]
	}
 8004192:	4618      	mov	r0, r3
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800419a:	b580      	push	{r7, lr}
 800419c:	b08c      	sub	sp, #48	; 0x30
 800419e:	af04      	add	r7, sp, #16
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f80a 	bl	80061c8 <pvPortMalloc>
 80041b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041bc:	20b4      	movs	r0, #180	; 0xb4
 80041be:	f002 f803 	bl	80061c8 <pvPortMalloc>
 80041c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
 80041d0:	e005      	b.n	80041de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f002 f8c4 	bl	8006360 <vPortFree>
 80041d8:	e001      	b.n	80041de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	9302      	str	r3, [sp, #8]
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f80e 	bl	8004224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004208:	69f8      	ldr	r0, [r7, #28]
 800420a:	f000 f8a9 	bl	8004360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e002      	b.n	800421a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800421a:	69bb      	ldr	r3, [r7, #24]
	}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800423c:	3b01      	subs	r3, #1
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f023 0307 	bic.w	r3, r3, #7
 800424a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	617b      	str	r3, [r7, #20]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01f      	beq.n	80042b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e012      	b.n	800429e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	7819      	ldrb	r1, [r3, #0]
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	3334      	adds	r3, #52	; 0x34
 8004288:	460a      	mov	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d9e9      	bls.n	8004278 <prvInitialiseNewTask+0x54>
 80042a4:	e000      	b.n	80042a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80042a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b0:	e003      	b.n	80042ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d901      	bls.n	80042c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c0:	2306      	movs	r3, #6
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3304      	adds	r3, #4
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe feb0 	bl	8003040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe feab 	bl	8003040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	f1c3 0207 	rsb	r2, r3, #7
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2200      	movs	r2, #0
 800430c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	334c      	adds	r3, #76	; 0x4c
 8004314:	2260      	movs	r2, #96	; 0x60
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f002 f981 	bl	8006620 <memset>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <prvInitialiseNewTask+0x130>)
 8004322:	651a      	str	r2, [r3, #80]	; 0x50
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <prvInitialiseNewTask+0x134>)
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <prvInitialiseNewTask+0x138>)
 800432e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	69b8      	ldr	r0, [r7, #24]
 8004336:	f001 fcf5 	bl	8005d24 <pxPortInitialiseStack>
 800433a:	4602      	mov	r2, r0
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	08006b14 	.word	0x08006b14
 8004358:	08006b34 	.word	0x08006b34
 800435c:	08006af4 	.word	0x08006af4

08004360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004368:	f001 fe0c 	bl	8005f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <prvAddNewTaskToReadyList+0xb8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a29      	ldr	r2, [pc, #164]	; (8004418 <prvAddNewTaskToReadyList+0xb8>)
 8004374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <prvAddNewTaskToReadyList+0xbc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437e:	4a27      	ldr	r2, [pc, #156]	; (800441c <prvAddNewTaskToReadyList+0xbc>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <prvAddNewTaskToReadyList+0xb8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800438c:	f000 fc18 	bl	8004bc0 <prvInitialiseTaskLists>
 8004390:	e00d      	b.n	80043ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004392:	4b23      	ldr	r3, [pc, #140]	; (8004420 <prvAddNewTaskToReadyList+0xc0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <prvAddNewTaskToReadyList+0xbc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <prvAddNewTaskToReadyList+0xbc>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 80043b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7fe fe3a 	bl	800305a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043e6:	f001 fdfd 	bl	8005fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <prvAddNewTaskToReadyList+0xc0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00e      	beq.n	8004410 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvAddNewTaskToReadyList+0xbc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d207      	bcs.n	8004410 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000a10 	.word	0x20000a10
 800441c:	20000910 	.word	0x20000910
 8004420:	20000a1c 	.word	0x20000a1c
 8004424:	20000a2c 	.word	0x20000a2c
 8004428:	20000a18 	.word	0x20000a18
 800442c:	20000914 	.word	0x20000914
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <vTaskDelay+0x60>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <vTaskDelay+0x30>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60bb      	str	r3, [r7, #8]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004464:	f000 f88a 	bl	800457c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004468:	2100      	movs	r1, #0
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f001 f828 	bl	80054c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004470:	f000 f892 	bl	8004598 <xTaskResumeAll>
 8004474:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <vTaskDelay+0x64>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000a38 	.word	0x20000a38
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044aa:	463a      	mov	r2, r7
 80044ac:	1d39      	adds	r1, r7, #4
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc fd80 	bl	8000fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	9202      	str	r2, [sp, #8]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2300      	movs	r3, #0
 80044c8:	460a      	mov	r2, r1
 80044ca:	4924      	ldr	r1, [pc, #144]	; (800455c <vTaskStartScheduler+0xc0>)
 80044cc:	4824      	ldr	r0, [pc, #144]	; (8004560 <vTaskStartScheduler+0xc4>)
 80044ce:	f7ff fe07 	bl	80040e0 <xTaskCreateStatic>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <vTaskStartScheduler+0xc8>)
 80044d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <vTaskStartScheduler+0xc8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e0:	2301      	movs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e001      	b.n	80044ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044f0:	f001 f84c 	bl	800558c <xTimerCreateTimerTask>
 80044f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d11b      	bne.n	8004534 <vTaskStartScheduler+0x98>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
}
 800450e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004510:	4b15      	ldr	r3, [pc, #84]	; (8004568 <vTaskStartScheduler+0xcc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	334c      	adds	r3, #76	; 0x4c
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <vTaskStartScheduler+0xd0>)
 8004518:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <vTaskStartScheduler+0xd4>)
 800451c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004520:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <vTaskStartScheduler+0xd8>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <vTaskStartScheduler+0xdc>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800452e:	f001 fc87 	bl	8005e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004532:	e00e      	b.n	8004552 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453a:	d10a      	bne.n	8004552 <vTaskStartScheduler+0xb6>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <vTaskStartScheduler+0xb4>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	08006ac4 	.word	0x08006ac4
 8004560:	08004b91 	.word	0x08004b91
 8004564:	20000a34 	.word	0x20000a34
 8004568:	20000910 	.word	0x20000910
 800456c:	2000001c 	.word	0x2000001c
 8004570:	20000a30 	.word	0x20000a30
 8004574:	20000a1c 	.word	0x20000a1c
 8004578:	20000a14 	.word	0x20000a14

0800457c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <vTaskSuspendAll+0x18>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a03      	ldr	r2, [pc, #12]	; (8004594 <vTaskSuspendAll+0x18>)
 8004588:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000a38 	.word	0x20000a38

08004598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <xTaskResumeAll+0x114>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	603b      	str	r3, [r7, #0]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045c4:	f001 fcde 	bl	8005f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045c8:	4b38      	ldr	r3, [pc, #224]	; (80046ac <xTaskResumeAll+0x114>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4a37      	ldr	r2, [pc, #220]	; (80046ac <xTaskResumeAll+0x114>)
 80045d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <xTaskResumeAll+0x114>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d161      	bne.n	800469e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045da:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <xTaskResumeAll+0x118>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d05d      	beq.n	800469e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e2:	e02e      	b.n	8004642 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e4:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <xTaskResumeAll+0x11c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3318      	adds	r3, #24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fd8f 	bl	8003114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fd8a 	bl	8003114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <xTaskResumeAll+0x120>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <xTaskResumeAll+0x120>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a27      	ldr	r2, [pc, #156]	; (80046bc <xTaskResumeAll+0x124>)
 8004620:	441a      	add	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe fd16 	bl	800305a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <xTaskResumeAll+0x128>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800463c:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <xTaskResumeAll+0x12c>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <xTaskResumeAll+0x11c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1cc      	bne.n	80045e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004650:	f000 fb58 	bl	8004d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004654:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <xTaskResumeAll+0x130>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004660:	f000 f846 	bl	80046f0 <xTaskIncrementTick>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <xTaskResumeAll+0x12c>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f1      	bne.n	8004660 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <xTaskResumeAll+0x130>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <xTaskResumeAll+0x12c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <xTaskResumeAll+0x134>)
 8004690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800469e:	f001 fca1 	bl	8005fe4 <vPortExitCritical>

	return xAlreadyYielded;
 80046a2:	68bb      	ldr	r3, [r7, #8]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000a38 	.word	0x20000a38
 80046b0:	20000a10 	.word	0x20000a10
 80046b4:	200009d0 	.word	0x200009d0
 80046b8:	20000a18 	.word	0x20000a18
 80046bc:	20000914 	.word	0x20000914
 80046c0:	20000910 	.word	0x20000910
 80046c4:	20000a24 	.word	0x20000a24
 80046c8:	20000a20 	.word	0x20000a20
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <xTaskGetTickCount+0x1c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046dc:	687b      	ldr	r3, [r7, #4]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000a14 	.word	0x20000a14

080046f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fa:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <xTaskIncrementTick+0x144>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 808e 	bne.w	8004820 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004704:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <xTaskIncrementTick+0x148>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <xTaskIncrementTick+0x148>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d120      	bne.n	800475a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004718:	4b48      	ldr	r3, [pc, #288]	; (800483c <xTaskIncrementTick+0x14c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <xTaskIncrementTick+0x48>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	603b      	str	r3, [r7, #0]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xTaskIncrementTick+0x46>
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <xTaskIncrementTick+0x14c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	4b40      	ldr	r3, [pc, #256]	; (8004840 <xTaskIncrementTick+0x150>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3e      	ldr	r2, [pc, #248]	; (800483c <xTaskIncrementTick+0x14c>)
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <xTaskIncrementTick+0x150>)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <xTaskIncrementTick+0x154>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <xTaskIncrementTick+0x154>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f000 fad5 	bl	8004d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <xTaskIncrementTick+0x158>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d348      	bcc.n	80047f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <xTaskIncrementTick+0x14c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <xTaskIncrementTick+0x158>)
 8004770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004774:	601a      	str	r2, [r3, #0]
					break;
 8004776:	e03e      	b.n	80047f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <xTaskIncrementTick+0x14c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d203      	bcs.n	8004798 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004790:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <xTaskIncrementTick+0x158>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004796:	e02e      	b.n	80047f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fcb9 	bl	8003114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fcb0 	bl	8003114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <xTaskIncrementTick+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <xTaskIncrementTick+0x15c>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <xTaskIncrementTick+0x160>)
 80047d4:	441a      	add	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe fc3c 	bl	800305a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <xTaskIncrementTick+0x164>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3b9      	bcc.n	8004764 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f4:	e7b6      	b.n	8004764 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <xTaskIncrementTick+0x164>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	4914      	ldr	r1, [pc, #80]	; (8004850 <xTaskIncrementTick+0x160>)
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d901      	bls.n	8004812 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <xTaskIncrementTick+0x168>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e004      	b.n	800482a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <xTaskIncrementTick+0x16c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	4a0d      	ldr	r2, [pc, #52]	; (800485c <xTaskIncrementTick+0x16c>)
 8004828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000a38 	.word	0x20000a38
 8004838:	20000a14 	.word	0x20000a14
 800483c:	200009c8 	.word	0x200009c8
 8004840:	200009cc 	.word	0x200009cc
 8004844:	20000a28 	.word	0x20000a28
 8004848:	20000a30 	.word	0x20000a30
 800484c:	20000a18 	.word	0x20000a18
 8004850:	20000914 	.word	0x20000914
 8004854:	20000910 	.word	0x20000910
 8004858:	20000a24 	.word	0x20000a24
 800485c:	20000a20 	.word	0x20000a20

08004860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <vTaskSwitchContext+0xac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <vTaskSwitchContext+0xb0>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004874:	e044      	b.n	8004900 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <vTaskSwitchContext+0xb0>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <vTaskSwitchContext+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	f1c3 031f 	rsb	r3, r3, #31
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	4921      	ldr	r1, [pc, #132]	; (8004918 <vTaskSwitchContext+0xb8>)
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	607b      	str	r3, [r7, #4]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <vTaskSwitchContext+0x5a>
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <vTaskSwitchContext+0xb8>)
 80048c8:	4413      	add	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3308      	adds	r3, #8
 80048de:	429a      	cmp	r2, r3
 80048e0:	d104      	bne.n	80048ec <vTaskSwitchContext+0x8c>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <vTaskSwitchContext+0xbc>)
 80048f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <vTaskSwitchContext+0xbc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	334c      	adds	r3, #76	; 0x4c
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <vTaskSwitchContext+0xc0>)
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000a38 	.word	0x20000a38
 8004910:	20000a24 	.word	0x20000a24
 8004914:	20000a18 	.word	0x20000a18
 8004918:	20000914 	.word	0x20000914
 800491c:	20000910 	.word	0x20000910
 8004920:	2000001c 	.word	0x2000001c

08004924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60fb      	str	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <vTaskPlaceOnEventList+0x44>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3318      	adds	r3, #24
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe fba5 	bl	80030a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004958:	2101      	movs	r1, #1
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f000 fdb0 	bl	80054c0 <prvAddCurrentTaskToDelayedList>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000910 	.word	0x20000910

0800496c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	617b      	str	r3, [r7, #20]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3318      	adds	r3, #24
 800499a:	4619      	mov	r1, r3
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7fe fb5c 	bl	800305a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	68b8      	ldr	r0, [r7, #8]
 80049b2:	f000 fd85 	bl	80054c0 <prvAddCurrentTaskToDelayedList>
	}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000910 	.word	0x20000910

080049c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	3318      	adds	r3, #24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fb8d 	bl	8003114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049fa:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <xTaskRemoveFromEventList+0xac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11c      	bne.n	8004a3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fb84 	bl	8003114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <xTaskRemoveFromEventList+0xb0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <xTaskRemoveFromEventList+0xb0>)
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <xTaskRemoveFromEventList+0xb4>)
 8004a2c:	441a      	add	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fe fb10 	bl	800305a <vListInsertEnd>
 8004a3a:	e005      	b.n	8004a48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3318      	adds	r3, #24
 8004a40:	4619      	mov	r1, r3
 8004a42:	480e      	ldr	r0, [pc, #56]	; (8004a7c <xTaskRemoveFromEventList+0xb8>)
 8004a44:	f7fe fb09 	bl	800305a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <xTaskRemoveFromEventList+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d905      	bls.n	8004a62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a56:	2301      	movs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <xTaskRemoveFromEventList+0xc0>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e001      	b.n	8004a66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000a38 	.word	0x20000a38
 8004a74:	20000a18 	.word	0x20000a18
 8004a78:	20000914 	.word	0x20000914
 8004a7c:	200009d0 	.word	0x200009d0
 8004a80:	20000910 	.word	0x20000910
 8004a84:	20000a24 	.word	0x20000a24

08004a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskInternalSetTimeOutState+0x24>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <vTaskInternalSetTimeOutState+0x28>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000a28 	.word	0x20000a28
 8004ab0:	20000a14 	.word	0x20000a14

08004ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004af6:	f001 fa45 	bl	8005f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <xTaskCheckForTimeOut+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b12:	d102      	bne.n	8004b1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e023      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <xTaskCheckForTimeOut+0xc0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d007      	beq.n	8004b36 <xTaskCheckForTimeOut+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e015      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d20b      	bcs.n	8004b58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff9b 	bl	8004a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e004      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b62:	f001 fa3f 	bl	8005fe4 <vPortExitCritical>

	return xReturn;
 8004b66:	69fb      	ldr	r3, [r7, #28]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000a14 	.word	0x20000a14
 8004b74:	20000a28 	.word	0x20000a28

08004b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <vTaskMissedYield+0x14>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20000a24 	.word	0x20000a24

08004b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b98:	f000 f852 	bl	8004c40 <prvCheckTasksWaitingTermination>
		__WFI();
 8004b9c:	bf30      	wfi

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <prvIdleTask+0x28>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d9f8      	bls.n	8004b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <prvIdleTask+0x2c>)
 8004ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bb6:	e7ef      	b.n	8004b98 <prvIdleTask+0x8>
 8004bb8:	20000914 	.word	0x20000914
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	e00c      	b.n	8004be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <prvInitialiseTaskLists+0x60>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fa10 	bl	8003000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3301      	adds	r3, #1
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b06      	cmp	r3, #6
 8004bea:	d9ef      	bls.n	8004bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bec:	480d      	ldr	r0, [pc, #52]	; (8004c24 <prvInitialiseTaskLists+0x64>)
 8004bee:	f7fe fa07 	bl	8003000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bf2:	480d      	ldr	r0, [pc, #52]	; (8004c28 <prvInitialiseTaskLists+0x68>)
 8004bf4:	f7fe fa04 	bl	8003000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bf8:	480c      	ldr	r0, [pc, #48]	; (8004c2c <prvInitialiseTaskLists+0x6c>)
 8004bfa:	f7fe fa01 	bl	8003000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bfe:	480c      	ldr	r0, [pc, #48]	; (8004c30 <prvInitialiseTaskLists+0x70>)
 8004c00:	f7fe f9fe 	bl	8003000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c04:	480b      	ldr	r0, [pc, #44]	; (8004c34 <prvInitialiseTaskLists+0x74>)
 8004c06:	f7fe f9fb 	bl	8003000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvInitialiseTaskLists+0x78>)
 8004c0c:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <prvInitialiseTaskLists+0x64>)
 8004c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvInitialiseTaskLists+0x7c>)
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <prvInitialiseTaskLists+0x68>)
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000914 	.word	0x20000914
 8004c24:	200009a0 	.word	0x200009a0
 8004c28:	200009b4 	.word	0x200009b4
 8004c2c:	200009d0 	.word	0x200009d0
 8004c30:	200009e4 	.word	0x200009e4
 8004c34:	200009fc 	.word	0x200009fc
 8004c38:	200009c8 	.word	0x200009c8
 8004c3c:	200009cc 	.word	0x200009cc

08004c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c46:	e019      	b.n	8004c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c48:	f001 f99c 	bl	8005f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <prvCheckTasksWaitingTermination+0x50>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fa5b 	bl	8003114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <prvCheckTasksWaitingTermination+0x54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <prvCheckTasksWaitingTermination+0x54>)
 8004c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c72:	f001 f9b7 	bl	8005fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f810 	bl	8004c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e1      	bne.n	8004c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200009e4 	.word	0x200009e4
 8004c94:	20000a10 	.word	0x20000a10
 8004c98:	200009f8 	.word	0x200009f8

08004c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	334c      	adds	r3, #76	; 0x4c
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fdaf 	bl	800680c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fb4f 	bl	8006360 <vPortFree>
				vPortFree( pxTCB );
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fb4c 	bl	8006360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cc8:	e018      	b.n	8004cfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d103      	bne.n	8004cdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 fb43 	bl	8006360 <vPortFree>
	}
 8004cda:	e00f      	b.n	8004cfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d00a      	beq.n	8004cfc <prvDeleteTCB+0x60>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <prvDeleteTCB+0x5e>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d1c:	e008      	b.n	8004d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	200009c8 	.word	0x200009c8
 8004d40:	20000a30 	.word	0x20000a30

08004d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <xTaskGetSchedulerState+0x34>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d52:	2301      	movs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e008      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <xTaskGetSchedulerState+0x38>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d60:	2302      	movs	r3, #2
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e001      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d6a:	687b      	ldr	r3, [r7, #4]
	}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000a1c 	.word	0x20000a1c
 8004d7c:	20000a38 	.word	0x20000a38

08004d80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d05e      	beq.n	8004e54 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <xTaskPriorityInherit+0xe0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d24e      	bcs.n	8004e42 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db06      	blt.n	8004dba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dac:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <xTaskPriorityInherit+0xe0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	f1c3 0207 	rsb	r2, r3, #7
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6959      	ldr	r1, [r3, #20]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <xTaskPriorityInherit+0xe4>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d12f      	bne.n	8004e32 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe f99c 	bl	8003114 <uxListRemove>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43da      	mvns	r2, r3
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <xTaskPriorityInherit+0xe8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4013      	ands	r3, r2
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <xTaskPriorityInherit+0xe8>)
 8004df6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <xTaskPriorityInherit+0xe0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	2201      	movs	r2, #1
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <xTaskPriorityInherit+0xe8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <xTaskPriorityInherit+0xe8>)
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <xTaskPriorityInherit+0xe4>)
 8004e22:	441a      	add	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7fe f915 	bl	800305a <vListInsertEnd>
 8004e30:	e004      	b.n	8004e3c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <xTaskPriorityInherit+0xe0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e008      	b.n	8004e54 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <xTaskPriorityInherit+0xe0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d201      	bcs.n	8004e54 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e54:	68fb      	ldr	r3, [r7, #12]
	}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000910 	.word	0x20000910
 8004e64:	20000914 	.word	0x20000914
 8004e68:	20000a18 	.word	0x20000a18

08004e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06e      	beq.n	8004f60 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e82:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <xTaskPriorityDisinherit+0x100>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d00a      	beq.n	8004ea2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60bb      	str	r3, [r7, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d044      	beq.n	8004f60 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d140      	bne.n	8004f60 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe f916 	bl	8003114 <uxListRemove>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d115      	bne.n	8004f1a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	491f      	ldr	r1, [pc, #124]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xTaskPriorityDisinherit+0xae>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4013      	ands	r3, r2
 8004f16:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004f18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f1c3 0207 	rsb	r2, r3, #7
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	2201      	movs	r2, #1
 8004f34:	409a      	lsls	r2, r3
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fe f87f 	bl	800305a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f60:	697b      	ldr	r3, [r7, #20]
	}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000910 	.word	0x20000910
 8004f70:	20000914 	.word	0x20000914
 8004f74:	20000a18 	.word	0x20000a18

08004f78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d077      	beq.n	8005080 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d902      	bls.n	8004fbe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	e002      	b.n	8004fc4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d058      	beq.n	8005080 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d153      	bne.n	8005080 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10a      	bne.n	8004ff8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60bb      	str	r3, [r7, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	db04      	blt.n	8005016 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f1c3 0207 	rsb	r2, r3, #7
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	6959      	ldr	r1, [r3, #20]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005026:	4413      	add	r3, r2
 8005028:	4299      	cmp	r1, r3
 800502a:	d129      	bne.n	8005080 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	3304      	adds	r3, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe f86f 	bl	8003114 <uxListRemove>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	2201      	movs	r2, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43da      	mvns	r2, r3
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4013      	ands	r3, r2
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005050:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	2201      	movs	r2, #1
 8005058:	409a      	lsls	r2, r3
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a06      	ldr	r2, [pc, #24]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005072:	441a      	add	r2, r3
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fd ffed 	bl	800305a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005080:	bf00      	nop
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000910 	.word	0x20000910
 800508c:	20000914 	.word	0x20000914
 8005090:	20000a18 	.word	0x20000a18

08005094 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a6:	3201      	adds	r2, #1
 80050a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80050aa:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80050ac:	681b      	ldr	r3, [r3, #0]
	}
 80050ae:	4618      	mov	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000910 	.word	0x20000910

080050bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80050ca:	f000 ff5b 	bl	8005f84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <xTaskNotifyWait+0xb8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d01c      	beq.n	8005116 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <xTaskNotifyWait+0xb8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	43d2      	mvns	r2, r2
 80050e8:	400a      	ands	r2, r1
 80050ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80050ee:	4b21      	ldr	r3, [pc, #132]	; (8005174 <xTaskNotifyWait+0xb8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050fe:	2101      	movs	r1, #1
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f000 f9dd 	bl	80054c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <xTaskNotifyWait+0xbc>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005116:	f000 ff65 	bl	8005fe4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800511a:	f000 ff33 	bl	8005f84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <xTaskNotifyWait+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <xTaskNotifyWait+0xb8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d002      	beq.n	8005144 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e00a      	b.n	800515a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <xTaskNotifyWait+0xb8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	43d2      	mvns	r2, r2
 8005150:	400a      	ands	r2, r1
 8005152:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <xTaskNotifyWait+0xb8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8005164:	f000 ff3e 	bl	8005fe4 <vPortExitCritical>

		return xReturn;
 8005168:	697b      	ldr	r3, [r7, #20]
	}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000910 	.word	0x20000910
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <xTaskGenericNotify+0x30>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	61bb      	str	r3, [r7, #24]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80051b0:	f000 fee8 	bl	8005f84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80051ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d82d      	bhi.n	8005236 <xTaskGenericNotify+0xba>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <xTaskGenericNotify+0x64>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005259 	.word	0x08005259
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005207 	.word	0x08005207
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005221 	.word	0x08005221
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005204:	e02b      	b.n	800525e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005214:	e023      	b.n	800525e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800521e:	e01e      	b.n	800525e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005220:	7ffb      	ldrb	r3, [r7, #31]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d004      	beq.n	8005230 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800522e:	e016      	b.n	800525e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005234:	e013      	b.n	800525e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005240:	d00c      	beq.n	800525c <xTaskGenericNotify+0xe0>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	617b      	str	r3, [r7, #20]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xTaskGenericNotify+0xda>
					break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <xTaskGenericNotify+0xe2>

					break;
 800525c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800525e:	7ffb      	ldrb	r3, [r7, #31]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d139      	bne.n	80052d8 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fd ff53 	bl	8003114 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xTaskGenericNotify+0x16c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <xTaskGenericNotify+0x16c>)
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <xTaskGenericNotify+0x170>)
 800528e:	441a      	add	r2, r3
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fd fedf 	bl	800305a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <xTaskGenericNotify+0x13e>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	613b      	str	r3, [r7, #16]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <xTaskGenericNotify+0x174>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d907      	bls.n	80052d8 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <xTaskGenericNotify+0x178>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80052d8:	f000 fe84 	bl	8005fe4 <vPortExitCritical>

		return xReturn;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000a18 	.word	0x20000a18
 80052ec:	20000914 	.word	0x20000914
 80052f0:	20000910 	.word	0x20000910
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005308:	2301      	movs	r3, #1
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005328:	f000 ff0e 	bl	8006148 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005330:	f3ef 8211 	mrs	r2, BASEPRI
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	623a      	str	r2, [r7, #32]
 8005346:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005348:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2202      	movs	r2, #2
 800536a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d82f      	bhi.n	80053d4 <xTaskGenericNotifyFromISR+0xdc>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <xTaskGenericNotifyFromISR+0x84>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053f7 	.word	0x080053f7
 8005380:	08005391 	.word	0x08005391
 8005384:	080053a3 	.word	0x080053a3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053bd 	.word	0x080053bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	431a      	orrs	r2, r3
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80053a0:	e02c      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80053b0:	e024      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80053ba:	e01f      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80053bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d004      	beq.n	80053ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80053cc:	e016      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80053d2:	e013      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053de:	d00c      	beq.n	80053fa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61bb      	str	r3, [r7, #24]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <xTaskGenericNotifyFromISR+0x104>
					break;
 80053fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80053fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005400:	2b01      	cmp	r3, #1
 8005402:	d145      	bne.n	8005490 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	617b      	str	r3, [r7, #20]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <xTaskGenericNotifyFromISR+0x1b0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11c      	bne.n	8005464 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd fe70 	bl	8003114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	2201      	movs	r2, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <xTaskGenericNotifyFromISR+0x1b4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <xTaskGenericNotifyFromISR+0x1b4>)
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <xTaskGenericNotifyFromISR+0x1b8>)
 8005454:	441a      	add	r2, r3
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fd fdfc 	bl	800305a <vListInsertEnd>
 8005462:	e005      	b.n	8005470 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	3318      	adds	r3, #24
 8005468:	4619      	mov	r1, r3
 800546a:	4812      	ldr	r0, [pc, #72]	; (80054b4 <xTaskGenericNotifyFromISR+0x1bc>)
 800546c:	f7fd fdf5 	bl	800305a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <xTaskGenericNotifyFromISR+0x1c0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	429a      	cmp	r2, r3
 800547c:	d908      	bls.n	8005490 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800547e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <xTaskGenericNotifyFromISR+0x1c4>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f383 8811 	msr	BASEPRI, r3
}
 800549a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800549e:	4618      	mov	r0, r3
 80054a0:	3738      	adds	r7, #56	; 0x38
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000a38 	.word	0x20000a38
 80054ac:	20000a18 	.word	0x20000a18
 80054b0:	20000914 	.word	0x20000914
 80054b4:	200009d0 	.word	0x200009d0
 80054b8:	20000910 	.word	0x20000910
 80054bc:	20000a24 	.word	0x20000a24

080054c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd fe1c 	bl	8003114 <uxListRemove>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	2201      	movs	r2, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43da      	mvns	r2, r3
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4013      	ands	r3, r2
 80054f6:	4a20      	ldr	r2, [pc, #128]	; (8005578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005500:	d10a      	bne.n	8005518 <prvAddCurrentTaskToDelayedList+0x58>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	481a      	ldr	r0, [pc, #104]	; (800557c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005512:	f7fd fda2 	bl	800305a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005516:	e026      	b.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d209      	bcs.n	8005544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7fd fdb0 	bl	80030a2 <vListInsert>
}
 8005542:	e010      	b.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fd fda6 	bl	80030a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d202      	bcs.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6013      	str	r3, [r2, #0]
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000a14 	.word	0x20000a14
 8005574:	20000910 	.word	0x20000910
 8005578:	20000a18 	.word	0x20000a18
 800557c:	200009fc 	.word	0x200009fc
 8005580:	200009cc 	.word	0x200009cc
 8005584:	200009c8 	.word	0x200009c8
 8005588:	20000a30 	.word	0x20000a30

0800558c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005596:	f000 fb85 	bl	8005ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800559a:	4b1c      	ldr	r3, [pc, #112]	; (800560c <xTimerCreateTimerTask+0x80>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d021      	beq.n	80055e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055aa:	1d3a      	adds	r2, r7, #4
 80055ac:	f107 0108 	add.w	r1, r7, #8
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fb fd19 	bl	8000fec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	9202      	str	r2, [sp, #8]
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	2302      	movs	r3, #2
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	460a      	mov	r2, r1
 80055cc:	4910      	ldr	r1, [pc, #64]	; (8005610 <xTimerCreateTimerTask+0x84>)
 80055ce:	4811      	ldr	r0, [pc, #68]	; (8005614 <xTimerCreateTimerTask+0x88>)
 80055d0:	f7fe fd86 	bl	80040e0 <xTaskCreateStatic>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <xTimerCreateTimerTask+0x8c>)
 80055d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <xTimerCreateTimerTask+0x8c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	613b      	str	r3, [r7, #16]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005602:	697b      	ldr	r3, [r7, #20]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000a6c 	.word	0x20000a6c
 8005610:	08006acc 	.word	0x08006acc
 8005614:	08005885 	.word	0x08005885
 8005618:	20000a70 	.word	0x20000a70

0800561c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800562a:	2028      	movs	r0, #40	; 0x28
 800562c:	f000 fdcc 	bl	80061c8 <pvPortMalloc>
 8005630:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f843 	bl	80056da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005654:	697b      	ldr	r3, [r7, #20]
	}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800565e:	b580      	push	{r7, lr}
 8005660:	b08a      	sub	sp, #40	; 0x28
 8005662:	af02      	add	r7, sp, #8
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800566c:	2328      	movs	r3, #40	; 0x28
 800566e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b28      	cmp	r3, #40	; 0x28
 8005674:	d00a      	beq.n	800568c <xTimerCreateStatic+0x2e>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	61bb      	str	r3, [r7, #24]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800568c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xTimerCreateStatic+0x4c>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	617b      	str	r3, [r7, #20]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f805 	bl	80056da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80056d0:	69fb      	ldr	r3, [r7, #28]
	}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01e      	beq.n	8005748 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800570a:	f000 facb 	bl	8005ca4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fc88 	bl	8003040 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800573c:	f043 0304 	orr.w	r3, r3, #4
 8005740:	b2da      	uxtb	r2, r3
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	623b      	str	r3, [r7, #32]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <xTimerGenericCommand+0x98>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d02a      	beq.n	80057dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b05      	cmp	r3, #5
 8005796:	dc18      	bgt.n	80057ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005798:	f7ff fad4 	bl	8004d44 <xTaskGetSchedulerState>
 800579c:	4603      	mov	r3, r0
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d109      	bne.n	80057b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <xTimerGenericCommand+0x98>)
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f107 0114 	add.w	r1, r7, #20
 80057aa:	2300      	movs	r3, #0
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	f7fd fe7f 	bl	80034b0 <xQueueGenericSend>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24
 80057b4:	e012      	b.n	80057dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <xTimerGenericCommand+0x98>)
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f107 0114 	add.w	r1, r7, #20
 80057be:	2300      	movs	r3, #0
 80057c0:	2200      	movs	r2, #0
 80057c2:	f7fd fe75 	bl	80034b0 <xQueueGenericSend>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24
 80057c8:	e008      	b.n	80057dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <xTimerGenericCommand+0x98>)
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f107 0114 	add.w	r1, r7, #20
 80057d2:	2300      	movs	r3, #0
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	f7fd ff69 	bl	80036ac <xQueueGenericSendFromISR>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	; 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000a6c 	.word	0x20000a6c

080057ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <prvProcessExpiredTimer+0x94>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7fd fc85 	bl	8003114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d022      	beq.n	800585e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	18d1      	adds	r1, r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	6978      	ldr	r0, [r7, #20]
 8005826:	f000 f8d1 	bl	80059cc <prvInsertTimerInActiveList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01f      	beq.n	8005870 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005830:	2300      	movs	r3, #0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	2100      	movs	r1, #0
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f7ff ff88 	bl	8005750 <xTimerGenericCommand>
 8005840:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	b2da      	uxtb	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	6978      	ldr	r0, [r7, #20]
 8005876:	4798      	blx	r3
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000a64 	.word	0x20000a64

08005884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f857 	bl	8005944 <prvGetNextExpireTime>
 8005896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4619      	mov	r1, r3
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f803 	bl	80058a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058a2:	f000 f8d5 	bl	8005a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058a6:	e7f1      	b.n	800588c <prvTimerTask+0x8>

080058a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058b2:	f7fe fe63 	bl	800457c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f866 	bl	800598c <prvSampleTimeNow>
 80058c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d130      	bne.n	800592a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <prvProcessTimerOrBlockTask+0x3c>
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d806      	bhi.n	80058e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058d6:	f7fe fe5f 	bl	8004598 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff85 	bl	80057ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058e2:	e024      	b.n	800592e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <prvProcessTimerOrBlockTask+0x90>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <prvProcessTimerOrBlockTask+0x50>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <prvProcessTimerOrBlockTask+0x52>
 80058f8:	2300      	movs	r3, #0
 80058fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <prvProcessTimerOrBlockTask+0x94>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	f7fe fbb5 	bl	8004078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800590e:	f7fe fe43 	bl	8004598 <xTaskResumeAll>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <prvProcessTimerOrBlockTask+0x98>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
}
 8005928:	e001      	b.n	800592e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800592a:	f7fe fe35 	bl	8004598 <xTaskResumeAll>
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000a68 	.word	0x20000a68
 800593c:	20000a6c 	.word	0x20000a6c
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <prvGetNextExpireTime+0x44>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <prvGetNextExpireTime+0x16>
 8005956:	2201      	movs	r2, #1
 8005958:	e000      	b.n	800595c <prvGetNextExpireTime+0x18>
 800595a:	2200      	movs	r2, #0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <prvGetNextExpireTime+0x44>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e001      	b.n	8005978 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000a64 	.word	0x20000a64

0800598c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005994:	f7fe fe9c 	bl	80046d0 <xTaskGetTickCount>
 8005998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <prvSampleTimeNow+0x3c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d205      	bcs.n	80059b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059a4:	f000 f91a 	bl	8005bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <prvSampleTimeNow+0x3c>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000a74 	.word	0x20000a74

080059cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d812      	bhi.n	8005a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e01b      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <prvInsertTimerInActiveList+0x7c>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7fd fb46 	bl	80030a2 <vListInsert>
 8005a16:	e012      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d206      	bcs.n	8005a2e <prvInsertTimerInActiveList+0x62>
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e007      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <prvInsertTimerInActiveList+0x80>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fd fb32 	bl	80030a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a3e:	697b      	ldr	r3, [r7, #20]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000a68 	.word	0x20000a68
 8005a4c:	20000a64 	.word	0x20000a64

08005a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a56:	e0ae      	b.n	8005bb6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f2c0 80aa 	blt.w	8005bb4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fd fb4f 	bl	8003114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff ff87 	bl	800598c <prvSampleTimeNow>
 8005a7e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b09      	cmp	r3, #9
 8005a84:	f200 8097 	bhi.w	8005bb6 <prvProcessReceivedCommands+0x166>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <prvProcessReceivedCommands+0x40>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab9 	.word	0x08005ab9
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005b2d 	.word	0x08005b2d
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b8b 	.word	0x08005b8b
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005ab9 	.word	0x08005ab9
 8005ab0:	08005b2d 	.word	0x08005b2d
 8005ab4:	08005b41 	.word	0x08005b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	18d1      	adds	r1, r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ad8:	f7ff ff78 	bl	80059cc <prvInsertTimerInActiveList>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d069      	beq.n	8005bb6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05e      	beq.n	8005bb6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	441a      	add	r2, r3
 8005b00:	2300      	movs	r3, #0
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	2100      	movs	r1, #0
 8005b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b0a:	f7ff fe21 	bl	8005750 <xTimerGenericCommand>
 8005b0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d14f      	bne.n	8005bb6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	61bb      	str	r3, [r7, #24]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005b3e:	e03a      	b.n	8005bb6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	617b      	str	r3, [r7, #20]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	18d1      	adds	r1, r2, r3
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b84:	f7ff ff22 	bl	80059cc <prvInsertTimerInActiveList>
					break;
 8005b88:	e015      	b.n	8005bb6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9a:	f000 fbe1 	bl	8006360 <vPortFree>
 8005b9e:	e00a      	b.n	8005bb6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bb2:	e000      	b.n	8005bb6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bb6:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <prvProcessReceivedCommands+0x188>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f107 0108 	add.w	r1, r7, #8
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd fe9b 	bl	80038fc <xQueueReceive>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f47f af45 	bne.w	8005a58 <prvProcessReceivedCommands+0x8>
	}
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	3728      	adds	r7, #40	; 0x28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000a6c 	.word	0x20000a6c

08005bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005be2:	e048      	b.n	8005c76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005be4:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bee:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fd fa89 	bl	8003114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02e      	beq.n	8005c76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d90e      	bls.n	8005c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fd fa2e 	bl	80030a2 <vListInsert>
 8005c46:	e016      	b.n	8005c76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	2100      	movs	r1, #0
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fd7c 	bl	8005750 <xTimerGenericCommand>
 8005c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	603b      	str	r3, [r7, #0]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1b1      	bne.n	8005be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <prvSwitchTimerLists+0xc4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <prvSwitchTimerLists+0xc0>)
 8005c8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <prvSwitchTimerLists+0xc4>)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	6013      	str	r3, [r2, #0]
}
 8005c94:	bf00      	nop
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000a64 	.word	0x20000a64
 8005ca0:	20000a68 	.word	0x20000a68

08005ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005caa:	f000 f96b 	bl	8005f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <prvCheckForValidListAndQueue+0x60>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d120      	bne.n	8005cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cb6:	4814      	ldr	r0, [pc, #80]	; (8005d08 <prvCheckForValidListAndQueue+0x64>)
 8005cb8:	f7fd f9a2 	bl	8003000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005cbc:	4813      	ldr	r0, [pc, #76]	; (8005d0c <prvCheckForValidListAndQueue+0x68>)
 8005cbe:	f7fd f99f 	bl	8003000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <prvCheckForValidListAndQueue+0x6c>)
 8005cc4:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <prvCheckForValidListAndQueue+0x64>)
 8005cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <prvCheckForValidListAndQueue+0x70>)
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <prvCheckForValidListAndQueue+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <prvCheckForValidListAndQueue+0x74>)
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <prvCheckForValidListAndQueue+0x78>)
 8005cd6:	210c      	movs	r1, #12
 8005cd8:	200a      	movs	r0, #10
 8005cda:	f7fd faad 	bl	8003238 <xQueueGenericCreateStatic>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <prvCheckForValidListAndQueue+0x60>)
 8005ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <prvCheckForValidListAndQueue+0x60>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <prvCheckForValidListAndQueue+0x60>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	490b      	ldr	r1, [pc, #44]	; (8005d20 <prvCheckForValidListAndQueue+0x7c>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe f996 	bl	8004024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cf8:	f000 f974 	bl	8005fe4 <vPortExitCritical>
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000a6c 	.word	0x20000a6c
 8005d08:	20000a3c 	.word	0x20000a3c
 8005d0c:	20000a50 	.word	0x20000a50
 8005d10:	20000a64 	.word	0x20000a64
 8005d14:	20000a68 	.word	0x20000a68
 8005d18:	20000af0 	.word	0x20000af0
 8005d1c:	20000a78 	.word	0x20000a78
 8005d20:	08006ad4 	.word	0x08006ad4

08005d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3b04      	subs	r3, #4
 8005d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d54:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <pxPortInitialiseStack+0x64>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b14      	subs	r3, #20
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b04      	subs	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f06f 0202 	mvn.w	r2, #2
 8005d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3b20      	subs	r3, #32
 8005d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	08005d8d 	.word	0x08005d8d

08005d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <prvTaskExitError+0x54>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d9e:	d00a      	beq.n	8005db6 <prvTaskExitError+0x2a>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <prvTaskExitError+0x28>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60bb      	str	r3, [r7, #8]
}
 8005dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dca:	bf00      	nop
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0fc      	beq.n	8005dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000018 	.word	0x20000018
	...

08005df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	4770      	bx	lr
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst2>:
 8005e10:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e18:	4808      	ldr	r0, [pc, #32]	; (8005e3c <prvPortStartFirstTask+0x24>)
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f380 8808 	msr	MSP, r0
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8814 	msr	CONTROL, r0
 8005e2a:	b662      	cpsie	i
 8005e2c:	b661      	cpsie	f
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	df00      	svc	0
 8005e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e3a:	bf00      	nop
 8005e3c:	e000ed08 	.word	0xe000ed08

08005e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e46:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <xPortStartScheduler+0x120>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <xPortStartScheduler+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10a      	bne.n	8005e66 <xPortStartScheduler+0x26>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e66:	4b3e      	ldr	r3, [pc, #248]	; (8005f60 <xPortStartScheduler+0x120>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <xPortStartScheduler+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10a      	bne.n	8005e86 <xPortStartScheduler+0x46>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60fb      	str	r3, [r7, #12]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	22ff      	movs	r2, #255	; 0xff
 8005e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <xPortStartScheduler+0x130>)
 8005eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <xPortStartScheduler+0x134>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eb4:	e009      	b.n	8005eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <xPortStartScheduler+0x134>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <xPortStartScheduler+0x134>)
 8005ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d0ef      	beq.n	8005eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <xPortStartScheduler+0x134>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1c3 0307 	rsb	r3, r3, #7
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d00a      	beq.n	8005ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60bb      	str	r3, [r7, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <xPortStartScheduler+0x134>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f16:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f2e:	f000 f8dd 	bl	80060ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <xPortStartScheduler+0x13c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f38:	f000 f8fc 	bl	8006134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <xPortStartScheduler+0x140>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0f      	ldr	r2, [pc, #60]	; (8005f80 <xPortStartScheduler+0x140>)
 8005f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f48:	f7ff ff66 	bl	8005e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f4c:	f7fe fc88 	bl	8004860 <vTaskSwitchContext>
	prvTaskExitError();
 8005f50:	f7ff ff1c 	bl	8005d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	e000ed00 	.word	0xe000ed00
 8005f64:	410fc271 	.word	0x410fc271
 8005f68:	410fc270 	.word	0x410fc270
 8005f6c:	e000e400 	.word	0xe000e400
 8005f70:	20000b38 	.word	0x20000b38
 8005f74:	20000b3c 	.word	0x20000b3c
 8005f78:	e000ed20 	.word	0xe000ed20
 8005f7c:	20000018 	.word	0x20000018
 8005f80:	e000ef34 	.word	0xe000ef34

08005f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	607b      	str	r3, [r7, #4]
}
 8005f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <vPortEnterCritical+0x58>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <vPortEnterCritical+0x58>)
 8005fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <vPortEnterCritical+0x58>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10f      	bne.n	8005fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <vPortEnterCritical+0x5c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	603b      	str	r3, [r7, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vPortEnterCritical+0x4a>
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000018 	.word	0x20000018
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <vPortExitCritical+0x50>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <vPortExitCritical+0x24>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	607b      	str	r3, [r7, #4]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <vPortExitCritical+0x50>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <vPortExitCritical+0x50>)
 8006010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <vPortExitCritical+0x42>
 800601a:	2300      	movs	r3, #0
 800601c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f383 8811 	msr	BASEPRI, r3
}
 8006024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000018 	.word	0x20000018
	...

08006040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f01e 0f10 	tst.w	lr, #16
 8006050:	bf08      	it	eq
 8006052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006064:	f380 8811 	msr	BASEPRI, r0
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f7fe fbf6 	bl	8004860 <vTaskSwitchContext>
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f380 8811 	msr	BASEPRI, r0
 800607c:	bc09      	pop	{r0, r3}
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	6808      	ldr	r0, [r1, #0]
 8006082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006086:	f01e 0f10 	tst.w	lr, #16
 800608a:	bf08      	it	eq
 800608c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006090:	f380 8809 	msr	PSP, r0
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst>:
 80060a0:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
}
 80060c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060c2:	f7fe fb15 	bl	80046f0 <xTaskIncrementTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <SysTick_Handler+0x40>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f383 8811 	msr	BASEPRI, r3
}
 80060de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <vPortSetupTimerInterrupt+0x34>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <vPortSetupTimerInterrupt+0x38>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vPortSetupTimerInterrupt+0x3c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <vPortSetupTimerInterrupt+0x40>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <vPortSetupTimerInterrupt+0x44>)
 800610a:	3b01      	subs	r3, #1
 800610c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <vPortSetupTimerInterrupt+0x34>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000e010 	.word	0xe000e010
 8006124:	e000e018 	.word	0xe000e018
 8006128:	2000000c 	.word	0x2000000c
 800612c:	10624dd3 	.word	0x10624dd3
 8006130:	e000e014 	.word	0xe000e014

08006134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006144 <vPortEnableVFP+0x10>
 8006138:	6801      	ldr	r1, [r0, #0]
 800613a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800613e:	6001      	str	r1, [r0, #0]
 8006140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006142:	bf00      	nop
 8006144:	e000ed88 	.word	0xe000ed88

08006148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800614e:	f3ef 8305 	mrs	r3, IPSR
 8006152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d914      	bls.n	8006184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <vPortValidateInterruptPriority+0x70>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <vPortValidateInterruptPriority+0x74>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	7afa      	ldrb	r2, [r7, #11]
 800616a:	429a      	cmp	r2, r3
 800616c:	d20a      	bcs.n	8006184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <vPortValidateInterruptPriority+0x78>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <vPortValidateInterruptPriority+0x7c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d90a      	bls.n	80061aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	603b      	str	r3, [r7, #0]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <vPortValidateInterruptPriority+0x60>
	}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	e000e3f0 	.word	0xe000e3f0
 80061bc:	20000b38 	.word	0x20000b38
 80061c0:	e000ed0c 	.word	0xe000ed0c
 80061c4:	20000b3c 	.word	0x20000b3c

080061c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061d4:	f7fe f9d2 	bl	800457c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061d8:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <pvPortMalloc+0x180>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061e0:	f000 f920 	bl	8006424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <pvPortMalloc+0x184>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8093 	bne.w	8006318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01d      	beq.n	8006234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061f8:	2208      	movs	r2, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f023 0307 	bic.w	r3, r3, #7
 8006210:	3308      	adds	r3, #8
 8006212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <pvPortMalloc+0x6c>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	617b      	str	r3, [r7, #20]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d06e      	beq.n	8006318 <pvPortMalloc+0x150>
 800623a:	4b45      	ldr	r3, [pc, #276]	; (8006350 <pvPortMalloc+0x188>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d869      	bhi.n	8006318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <pvPortMalloc+0x18c>)
 8006246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006248:	4b42      	ldr	r3, [pc, #264]	; (8006354 <pvPortMalloc+0x18c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800624e:	e004      	b.n	800625a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <pvPortMalloc+0xa4>
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f1      	bne.n	8006250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800626c:	4b36      	ldr	r3, [pc, #216]	; (8006348 <pvPortMalloc+0x180>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	429a      	cmp	r2, r3
 8006274:	d050      	beq.n	8006318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2208      	movs	r2, #8
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	2308      	movs	r3, #8
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	429a      	cmp	r2, r3
 8006296:	d91f      	bls.n	80062d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <pvPortMalloc+0xf8>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	613b      	str	r3, [r7, #16]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062d2:	69b8      	ldr	r0, [r7, #24]
 80062d4:	f000 f908 	bl	80064e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <pvPortMalloc+0x188>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <pvPortMalloc+0x188>)
 80062e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <pvPortMalloc+0x188>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <pvPortMalloc+0x190>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d203      	bcs.n	80062fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062f2:	4b17      	ldr	r3, [pc, #92]	; (8006350 <pvPortMalloc+0x188>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <pvPortMalloc+0x190>)
 80062f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <pvPortMalloc+0x184>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	431a      	orrs	r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <pvPortMalloc+0x194>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <pvPortMalloc+0x194>)
 8006316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006318:	f7fe f93e 	bl	8004598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <pvPortMalloc+0x174>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <pvPortMalloc+0x172>
	return pvReturn;
 800633c:	69fb      	ldr	r3, [r7, #28]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3728      	adds	r7, #40	; 0x28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20004748 	.word	0x20004748
 800634c:	2000475c 	.word	0x2000475c
 8006350:	2000474c 	.word	0x2000474c
 8006354:	20004740 	.word	0x20004740
 8006358:	20004750 	.word	0x20004750
 800635c:	20004754 	.word	0x20004754

08006360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04d      	beq.n	800640e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006372:	2308      	movs	r3, #8
 8006374:	425b      	negs	r3, r3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <vPortFree+0xb8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <vPortFree+0x44>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <vPortFree+0x62>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60bb      	str	r3, [r7, #8]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <vPortFree+0xb8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01e      	beq.n	800640e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d11a      	bne.n	800640e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <vPortFree+0xb8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	401a      	ands	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063e8:	f7fe f8c8 	bl	800457c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <vPortFree+0xbc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4413      	add	r3, r2
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <vPortFree+0xbc>)
 80063f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 f874 	bl	80064e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <vPortFree+0xc0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a06      	ldr	r2, [pc, #24]	; (8006420 <vPortFree+0xc0>)
 8006408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800640a:	f7fe f8c5 	bl	8004598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800640e:	bf00      	nop
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	2000475c 	.word	0x2000475c
 800641c:	2000474c 	.word	0x2000474c
 8006420:	20004758 	.word	0x20004758

08006424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800642a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800642e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006430:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <prvHeapInit+0xac>)
 8006432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3307      	adds	r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <prvHeapInit+0xac>)
 8006454:	4413      	add	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800645c:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <prvHeapInit+0xb0>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006462:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <prvHeapInit+0xb0>)
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4413      	add	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006470:	2208      	movs	r2, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <prvHeapInit+0xb4>)
 8006484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <prvHeapInit+0xb4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <prvHeapInit+0xb4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <prvHeapInit+0xb4>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <prvHeapInit+0xb8>)
 80064b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <prvHeapInit+0xbc>)
 80064ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <prvHeapInit+0xc0>)
 80064be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064c2:	601a      	str	r2, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	20000b40 	.word	0x20000b40
 80064d4:	20004740 	.word	0x20004740
 80064d8:	20004748 	.word	0x20004748
 80064dc:	20004750 	.word	0x20004750
 80064e0:	2000474c 	.word	0x2000474c
 80064e4:	2000475c 	.word	0x2000475c

080064e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064f0:	4b28      	ldr	r3, [pc, #160]	; (8006594 <prvInsertBlockIntoFreeList+0xac>)
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e002      	b.n	80064fc <prvInsertBlockIntoFreeList+0x14>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d8f7      	bhi.n	80064f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d108      	bne.n	800652a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	441a      	add	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d118      	bne.n	8006570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <prvInsertBlockIntoFreeList+0xb0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d00d      	beq.n	8006566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e008      	b.n	8006578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvInsertBlockIntoFreeList+0xb0>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e003      	b.n	8006578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d002      	beq.n	8006586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20004740 	.word	0x20004740
 8006598:	20004748 	.word	0x20004748

0800659c <__errno>:
 800659c:	4b01      	ldr	r3, [pc, #4]	; (80065a4 <__errno+0x8>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000001c 	.word	0x2000001c

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2600      	movs	r6, #0
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	; (80065ec <__libc_init_array+0x44>)
 80065bc:	f000 f99e 	bl	80068fc <_init>
 80065c0:	1b64      	subs	r4, r4, r5
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2600      	movs	r6, #0
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	4798      	blx	r3
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	4798      	blx	r3
 80065dc:	3601      	adds	r6, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	08006b5c 	.word	0x08006b5c
 80065e4:	08006b5c 	.word	0x08006b5c
 80065e8:	08006b5c 	.word	0x08006b5c
 80065ec:	08006b60 	.word	0x08006b60

080065f0 <__retarget_lock_acquire_recursive>:
 80065f0:	4770      	bx	lr

080065f2 <__retarget_lock_release_recursive>:
 80065f2:	4770      	bx	lr

080065f4 <malloc>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <malloc+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f000 b885 	b.w	8006708 <_malloc_r>
 80065fe:	bf00      	nop
 8006600:	2000001c 	.word	0x2000001c

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661a:	4291      	cmp	r1, r2
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <memset>:
 8006620:	4402      	add	r2, r0
 8006622:	4603      	mov	r3, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <_free_r>:
 8006630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006632:	2900      	cmp	r1, #0
 8006634:	d044      	beq.n	80066c0 <_free_r+0x90>
 8006636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663a:	9001      	str	r0, [sp, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f1a1 0404 	sub.w	r4, r1, #4
 8006642:	bfb8      	it	lt
 8006644:	18e4      	addlt	r4, r4, r3
 8006646:	f000 f94d 	bl	80068e4 <__malloc_lock>
 800664a:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <_free_r+0x94>)
 800664c:	9801      	ldr	r0, [sp, #4]
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	b933      	cbnz	r3, 8006660 <_free_r+0x30>
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	6014      	str	r4, [r2, #0]
 8006656:	b003      	add	sp, #12
 8006658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800665c:	f000 b948 	b.w	80068f0 <__malloc_unlock>
 8006660:	42a3      	cmp	r3, r4
 8006662:	d908      	bls.n	8006676 <_free_r+0x46>
 8006664:	6825      	ldr	r5, [r4, #0]
 8006666:	1961      	adds	r1, r4, r5
 8006668:	428b      	cmp	r3, r1
 800666a:	bf01      	itttt	eq
 800666c:	6819      	ldreq	r1, [r3, #0]
 800666e:	685b      	ldreq	r3, [r3, #4]
 8006670:	1949      	addeq	r1, r1, r5
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	e7ed      	b.n	8006652 <_free_r+0x22>
 8006676:	461a      	mov	r2, r3
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b10b      	cbz	r3, 8006680 <_free_r+0x50>
 800667c:	42a3      	cmp	r3, r4
 800667e:	d9fa      	bls.n	8006676 <_free_r+0x46>
 8006680:	6811      	ldr	r1, [r2, #0]
 8006682:	1855      	adds	r5, r2, r1
 8006684:	42a5      	cmp	r5, r4
 8006686:	d10b      	bne.n	80066a0 <_free_r+0x70>
 8006688:	6824      	ldr	r4, [r4, #0]
 800668a:	4421      	add	r1, r4
 800668c:	1854      	adds	r4, r2, r1
 800668e:	42a3      	cmp	r3, r4
 8006690:	6011      	str	r1, [r2, #0]
 8006692:	d1e0      	bne.n	8006656 <_free_r+0x26>
 8006694:	681c      	ldr	r4, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	6053      	str	r3, [r2, #4]
 800669a:	4421      	add	r1, r4
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	e7da      	b.n	8006656 <_free_r+0x26>
 80066a0:	d902      	bls.n	80066a8 <_free_r+0x78>
 80066a2:	230c      	movs	r3, #12
 80066a4:	6003      	str	r3, [r0, #0]
 80066a6:	e7d6      	b.n	8006656 <_free_r+0x26>
 80066a8:	6825      	ldr	r5, [r4, #0]
 80066aa:	1961      	adds	r1, r4, r5
 80066ac:	428b      	cmp	r3, r1
 80066ae:	bf04      	itt	eq
 80066b0:	6819      	ldreq	r1, [r3, #0]
 80066b2:	685b      	ldreq	r3, [r3, #4]
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	bf04      	itt	eq
 80066b8:	1949      	addeq	r1, r1, r5
 80066ba:	6021      	streq	r1, [r4, #0]
 80066bc:	6054      	str	r4, [r2, #4]
 80066be:	e7ca      	b.n	8006656 <_free_r+0x26>
 80066c0:	b003      	add	sp, #12
 80066c2:	bd30      	pop	{r4, r5, pc}
 80066c4:	20004764 	.word	0x20004764

080066c8 <sbrk_aligned>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	4e0e      	ldr	r6, [pc, #56]	; (8006704 <sbrk_aligned+0x3c>)
 80066cc:	460c      	mov	r4, r1
 80066ce:	6831      	ldr	r1, [r6, #0]
 80066d0:	4605      	mov	r5, r0
 80066d2:	b911      	cbnz	r1, 80066da <sbrk_aligned+0x12>
 80066d4:	f000 f8f6 	bl	80068c4 <_sbrk_r>
 80066d8:	6030      	str	r0, [r6, #0]
 80066da:	4621      	mov	r1, r4
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 f8f1 	bl	80068c4 <_sbrk_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d00a      	beq.n	80066fc <sbrk_aligned+0x34>
 80066e6:	1cc4      	adds	r4, r0, #3
 80066e8:	f024 0403 	bic.w	r4, r4, #3
 80066ec:	42a0      	cmp	r0, r4
 80066ee:	d007      	beq.n	8006700 <sbrk_aligned+0x38>
 80066f0:	1a21      	subs	r1, r4, r0
 80066f2:	4628      	mov	r0, r5
 80066f4:	f000 f8e6 	bl	80068c4 <_sbrk_r>
 80066f8:	3001      	adds	r0, #1
 80066fa:	d101      	bne.n	8006700 <sbrk_aligned+0x38>
 80066fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006700:	4620      	mov	r0, r4
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	20004768 	.word	0x20004768

08006708 <_malloc_r>:
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	1ccd      	adds	r5, r1, #3
 800670e:	f025 0503 	bic.w	r5, r5, #3
 8006712:	3508      	adds	r5, #8
 8006714:	2d0c      	cmp	r5, #12
 8006716:	bf38      	it	cc
 8006718:	250c      	movcc	r5, #12
 800671a:	2d00      	cmp	r5, #0
 800671c:	4607      	mov	r7, r0
 800671e:	db01      	blt.n	8006724 <_malloc_r+0x1c>
 8006720:	42a9      	cmp	r1, r5
 8006722:	d905      	bls.n	8006730 <_malloc_r+0x28>
 8006724:	230c      	movs	r3, #12
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	2600      	movs	r6, #0
 800672a:	4630      	mov	r0, r6
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	4e2e      	ldr	r6, [pc, #184]	; (80067ec <_malloc_r+0xe4>)
 8006732:	f000 f8d7 	bl	80068e4 <__malloc_lock>
 8006736:	6833      	ldr	r3, [r6, #0]
 8006738:	461c      	mov	r4, r3
 800673a:	bb34      	cbnz	r4, 800678a <_malloc_r+0x82>
 800673c:	4629      	mov	r1, r5
 800673e:	4638      	mov	r0, r7
 8006740:	f7ff ffc2 	bl	80066c8 <sbrk_aligned>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	4604      	mov	r4, r0
 8006748:	d14d      	bne.n	80067e6 <_malloc_r+0xde>
 800674a:	6834      	ldr	r4, [r6, #0]
 800674c:	4626      	mov	r6, r4
 800674e:	2e00      	cmp	r6, #0
 8006750:	d140      	bne.n	80067d4 <_malloc_r+0xcc>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	4631      	mov	r1, r6
 8006756:	4638      	mov	r0, r7
 8006758:	eb04 0803 	add.w	r8, r4, r3
 800675c:	f000 f8b2 	bl	80068c4 <_sbrk_r>
 8006760:	4580      	cmp	r8, r0
 8006762:	d13a      	bne.n	80067da <_malloc_r+0xd2>
 8006764:	6821      	ldr	r1, [r4, #0]
 8006766:	3503      	adds	r5, #3
 8006768:	1a6d      	subs	r5, r5, r1
 800676a:	f025 0503 	bic.w	r5, r5, #3
 800676e:	3508      	adds	r5, #8
 8006770:	2d0c      	cmp	r5, #12
 8006772:	bf38      	it	cc
 8006774:	250c      	movcc	r5, #12
 8006776:	4629      	mov	r1, r5
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff ffa5 	bl	80066c8 <sbrk_aligned>
 800677e:	3001      	adds	r0, #1
 8006780:	d02b      	beq.n	80067da <_malloc_r+0xd2>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	442b      	add	r3, r5
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	e00e      	b.n	80067a8 <_malloc_r+0xa0>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	1b52      	subs	r2, r2, r5
 800678e:	d41e      	bmi.n	80067ce <_malloc_r+0xc6>
 8006790:	2a0b      	cmp	r2, #11
 8006792:	d916      	bls.n	80067c2 <_malloc_r+0xba>
 8006794:	1961      	adds	r1, r4, r5
 8006796:	42a3      	cmp	r3, r4
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	bf18      	it	ne
 800679c:	6059      	strne	r1, [r3, #4]
 800679e:	6863      	ldr	r3, [r4, #4]
 80067a0:	bf08      	it	eq
 80067a2:	6031      	streq	r1, [r6, #0]
 80067a4:	5162      	str	r2, [r4, r5]
 80067a6:	604b      	str	r3, [r1, #4]
 80067a8:	4638      	mov	r0, r7
 80067aa:	f104 060b 	add.w	r6, r4, #11
 80067ae:	f000 f89f 	bl	80068f0 <__malloc_unlock>
 80067b2:	f026 0607 	bic.w	r6, r6, #7
 80067b6:	1d23      	adds	r3, r4, #4
 80067b8:	1af2      	subs	r2, r6, r3
 80067ba:	d0b6      	beq.n	800672a <_malloc_r+0x22>
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	50a3      	str	r3, [r4, r2]
 80067c0:	e7b3      	b.n	800672a <_malloc_r+0x22>
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	bf0c      	ite	eq
 80067c8:	6032      	streq	r2, [r6, #0]
 80067ca:	605a      	strne	r2, [r3, #4]
 80067cc:	e7ec      	b.n	80067a8 <_malloc_r+0xa0>
 80067ce:	4623      	mov	r3, r4
 80067d0:	6864      	ldr	r4, [r4, #4]
 80067d2:	e7b2      	b.n	800673a <_malloc_r+0x32>
 80067d4:	4634      	mov	r4, r6
 80067d6:	6876      	ldr	r6, [r6, #4]
 80067d8:	e7b9      	b.n	800674e <_malloc_r+0x46>
 80067da:	230c      	movs	r3, #12
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4638      	mov	r0, r7
 80067e0:	f000 f886 	bl	80068f0 <__malloc_unlock>
 80067e4:	e7a1      	b.n	800672a <_malloc_r+0x22>
 80067e6:	6025      	str	r5, [r4, #0]
 80067e8:	e7de      	b.n	80067a8 <_malloc_r+0xa0>
 80067ea:	bf00      	nop
 80067ec:	20004764 	.word	0x20004764

080067f0 <cleanup_glue>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	460c      	mov	r4, r1
 80067f4:	6809      	ldr	r1, [r1, #0]
 80067f6:	4605      	mov	r5, r0
 80067f8:	b109      	cbz	r1, 80067fe <cleanup_glue+0xe>
 80067fa:	f7ff fff9 	bl	80067f0 <cleanup_glue>
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006806:	f7ff bf13 	b.w	8006630 <_free_r>
	...

0800680c <_reclaim_reent>:
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <_reclaim_reent+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4283      	cmp	r3, r0
 8006812:	b570      	push	{r4, r5, r6, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	d051      	beq.n	80068bc <_reclaim_reent+0xb0>
 8006818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800681a:	b143      	cbz	r3, 800682e <_reclaim_reent+0x22>
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d14a      	bne.n	80068b8 <_reclaim_reent+0xac>
 8006822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	b111      	cbz	r1, 800682e <_reclaim_reent+0x22>
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff ff01 	bl	8006630 <_free_r>
 800682e:	6961      	ldr	r1, [r4, #20]
 8006830:	b111      	cbz	r1, 8006838 <_reclaim_reent+0x2c>
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff fefc 	bl	8006630 <_free_r>
 8006838:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800683a:	b111      	cbz	r1, 8006842 <_reclaim_reent+0x36>
 800683c:	4620      	mov	r0, r4
 800683e:	f7ff fef7 	bl	8006630 <_free_r>
 8006842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006844:	b111      	cbz	r1, 800684c <_reclaim_reent+0x40>
 8006846:	4620      	mov	r0, r4
 8006848:	f7ff fef2 	bl	8006630 <_free_r>
 800684c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800684e:	b111      	cbz	r1, 8006856 <_reclaim_reent+0x4a>
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff feed 	bl	8006630 <_free_r>
 8006856:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006858:	b111      	cbz	r1, 8006860 <_reclaim_reent+0x54>
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff fee8 	bl	8006630 <_free_r>
 8006860:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006862:	b111      	cbz	r1, 800686a <_reclaim_reent+0x5e>
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff fee3 	bl	8006630 <_free_r>
 800686a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800686c:	b111      	cbz	r1, 8006874 <_reclaim_reent+0x68>
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fede 	bl	8006630 <_free_r>
 8006874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006876:	b111      	cbz	r1, 800687e <_reclaim_reent+0x72>
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff fed9 	bl	8006630 <_free_r>
 800687e:	69a3      	ldr	r3, [r4, #24]
 8006880:	b1e3      	cbz	r3, 80068bc <_reclaim_reent+0xb0>
 8006882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006884:	4620      	mov	r0, r4
 8006886:	4798      	blx	r3
 8006888:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800688a:	b1b9      	cbz	r1, 80068bc <_reclaim_reent+0xb0>
 800688c:	4620      	mov	r0, r4
 800688e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006892:	f7ff bfad 	b.w	80067f0 <cleanup_glue>
 8006896:	5949      	ldr	r1, [r1, r5]
 8006898:	b941      	cbnz	r1, 80068ac <_reclaim_reent+0xa0>
 800689a:	3504      	adds	r5, #4
 800689c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800689e:	2d80      	cmp	r5, #128	; 0x80
 80068a0:	68d9      	ldr	r1, [r3, #12]
 80068a2:	d1f8      	bne.n	8006896 <_reclaim_reent+0x8a>
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff fec3 	bl	8006630 <_free_r>
 80068aa:	e7ba      	b.n	8006822 <_reclaim_reent+0x16>
 80068ac:	680e      	ldr	r6, [r1, #0]
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff febe 	bl	8006630 <_free_r>
 80068b4:	4631      	mov	r1, r6
 80068b6:	e7ef      	b.n	8006898 <_reclaim_reent+0x8c>
 80068b8:	2500      	movs	r5, #0
 80068ba:	e7ef      	b.n	800689c <_reclaim_reent+0x90>
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	bf00      	nop
 80068c0:	2000001c 	.word	0x2000001c

080068c4 <_sbrk_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4d06      	ldr	r5, [pc, #24]	; (80068e0 <_sbrk_r+0x1c>)
 80068c8:	2300      	movs	r3, #0
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	f7fa ffa8 	bl	8001824 <_sbrk>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_sbrk_r+0x1a>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_sbrk_r+0x1a>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	2000476c 	.word	0x2000476c

080068e4 <__malloc_lock>:
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <__malloc_lock+0x8>)
 80068e6:	f7ff be83 	b.w	80065f0 <__retarget_lock_acquire_recursive>
 80068ea:	bf00      	nop
 80068ec:	20004760 	.word	0x20004760

080068f0 <__malloc_unlock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__malloc_unlock+0x8>)
 80068f2:	f7ff be7e 	b.w	80065f2 <__retarget_lock_release_recursive>
 80068f6:	bf00      	nop
 80068f8:	20004760 	.word	0x20004760

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
