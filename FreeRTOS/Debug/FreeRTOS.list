
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000040d4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004154  20004154  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015464  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bd  00000000  00000000  00035514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  000389d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  00039b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240e6  00000000  00000000  0003ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e6b  00000000  00000000  0005ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2163  00000000  00000000  00072a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144bfc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a08  00000000  00000000  00144c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b18 	.word	0x08004b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004b18 	.word	0x08004b18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SendResponse>:
static void SendHeader(uint8_t ID){
	sync_break();
	UART_PutChar(ID);
}

static void SendResponse(LINMSG* msg){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<(msg->length);i++){
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e00a      	b.n	80004f8 <SendResponse+0x24>
		UART_PutChar(msg->data[i]);
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4413      	add	r3, r2
 80004e8:	3302      	adds	r3, #2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f893 	bl	8000618 <UART_PutChar>
	for (int i = 0; i<(msg->length);i++){
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	785b      	ldrb	r3, [r3, #1]
 80004fc:	461a      	mov	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4293      	cmp	r3, r2
 8000502:	dbee      	blt.n	80004e2 <SendResponse+0xe>
	}
	UART_PutChar(msg->checksum);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7b1b      	ldrb	r3, [r3, #12]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f885 	bl	8000618 <UART_PutChar>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <slave_response>:
 * This function is called at each interrupt
 * It's used when the card is in slave mode
 * It's role is to generate a response to the request of the master
 * TODO implement a way to handle error while comparing checksum
 * */
int slave_response(void){
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
	//sync_counter is used to determine whether we recived the sync byte or not
	if (slave_data_counter > -1){
 800051e:	4b39      	ldr	r3, [pc, #228]	; (8000604 <slave_response+0xec>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	db33      	blt.n	800058e <slave_response+0x76>
		if (slave_data_counter <3){ //We predefined a message with 3 data field
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <slave_response+0xec>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	dc0d      	bgt.n	800054a <slave_response+0x32>
			salve_rx_msg.data[slave_data_counter++] = USART3->DR;
 800052e:	4b36      	ldr	r3, [pc, #216]	; (8000608 <slave_response+0xf0>)
 8000530:	6858      	ldr	r0, [r3, #4]
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <slave_response+0xec>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	4932      	ldr	r1, [pc, #200]	; (8000604 <slave_response+0xec>)
 800053a:	600a      	str	r2, [r1, #0]
 800053c:	b2c1      	uxtb	r1, r0
 800053e:	4a33      	ldr	r2, [pc, #204]	; (800060c <slave_response+0xf4>)
 8000540:	4413      	add	r3, r2
 8000542:	460a      	mov	r2, r1
 8000544:	709a      	strb	r2, [r3, #2]
			return 1;
 8000546:	2301      	movs	r3, #1
 8000548:	e057      	b.n	80005fa <slave_response+0xe2>
		}else{
			salve_rx_msg.checksum = USART3->DR;
 800054a:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <slave_response+0xf0>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <slave_response+0xf4>)
 8000552:	731a      	strb	r2, [r3, #12]
			salve_rx_msg.length = slave_data_counter;
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <slave_response+0xec>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <slave_response+0xf4>)
 800055c:	705a      	strb	r2, [r3, #1]
			slave_data_counter = -1; //reseting the counter
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <slave_response+0xec>)
 8000560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000564:	601a      	str	r2, [r3, #0]
			if (checksum(salve_rx_msg.length,salve_rx_msg.data) == salve_rx_msg.checksum){
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <slave_response+0xf4>)
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	4929      	ldr	r1, [pc, #164]	; (8000610 <slave_response+0xf8>)
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f873 	bl	8000658 <checksum>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <slave_response+0xf4>)
 8000578:	7b1b      	ldrb	r3, [r3, #12]
 800057a:	429a      	cmp	r2, r3
 800057c:	d104      	bne.n	8000588 <slave_response+0x70>
				Send_LIN_To_CAN(&salve_rx_msg);
 800057e:	4823      	ldr	r0, [pc, #140]	; (800060c <slave_response+0xf4>)
 8000580:	f000 f904 	bl	800078c <Send_LIN_To_CAN>
				return 1;
 8000584:	2301      	movs	r3, #1
 8000586:	e038      	b.n	80005fa <slave_response+0xe2>
			}else{
				return -1;
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	e035      	b.n	80005fa <slave_response+0xe2>
			}
		}
	}
	if(sync_counter == -1){
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <slave_response+0xfc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000596:	d10b      	bne.n	80005b0 <slave_response+0x98>
		if(USART3->DR == 0x55){ //Check it is the sync byte (value 0x55)
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <slave_response+0xf0>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b55      	cmp	r3, #85	; 0x55
 800059e:	d104      	bne.n	80005aa <slave_response+0x92>
			sync_counter = 0;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <slave_response+0xfc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			return 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e027      	b.n	80005fa <slave_response+0xe2>
	    }else{
			return -1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ae:	e024      	b.n	80005fa <slave_response+0xe2>
	    }
	}
	if(sync_counter == 0){ //We received the sync byte
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <slave_response+0xfc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d120      	bne.n	80005fa <slave_response+0xe2>
		//TODO
		if (USART3->DR == SLAVE_ADDR_WRITE){ //If we recied a request for the RTC
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <slave_response+0xf0>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b73      	cmp	r3, #115	; 0x73
 80005be:	d113      	bne.n	80005e8 <slave_response+0xd0>
			LINMSG frame;
			frame = Make_RTC_LIN_Frame();
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f874 	bl	80006b0 <Make_RTC_LIN_Frame>
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	463c      	mov	r4, r7
 80005ce:	6820      	ldr	r0, [r4, #0]
 80005d0:	6861      	ldr	r1, [r4, #4]
 80005d2:	68a2      	ldr	r2, [r4, #8]
 80005d4:	c307      	stmia	r3!, {r0, r1, r2}
 80005d6:	7b22      	ldrb	r2, [r4, #12]
 80005d8:	701a      	strb	r2, [r3, #0]
			SendResponse(&frame);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff78 	bl	80004d4 <SendResponse>
			return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e008      	b.n	80005fa <slave_response+0xe2>
		}else if (USART3->DR == SLAVE_ADDR_READ){
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <slave_response+0xf0>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	2b72      	cmp	r3, #114	; 0x72
 80005ee:	d104      	bne.n	80005fa <slave_response+0xe2>
			slave_data_counter = 0; //This will make us fetch the lin data
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <slave_response+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
			return 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e7ff      	b.n	80005fa <slave_response+0xe2>
		}
		//ADD the different behavior as a slave based on the address
	}
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3724      	adds	r7, #36	; 0x24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	40004800 	.word	0x40004800
 800060c:	2000009c 	.word	0x2000009c
 8000610:	2000009e 	.word	0x2000009e
 8000614:	20000000 	.word	0x20000000

08000618 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART3->DR = data;
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <UART_PutChar+0x3c>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 8000628:	bf00      	nop
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <UART_PutChar+0x3c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <UART_PutChar+0x12>
	while(!(USART3->SR & 0x00000040));
 8000636:	bf00      	nop
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <UART_PutChar+0x3c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f9      	beq.n	8000638 <UART_PutChar+0x20>
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40004800 	.word	0x40004800

08000658 <checksum>:

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data){
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
	uint8_t ix;
	uint16_t check_sum = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	81bb      	strh	r3, [r7, #12]

	for(ix = 0; ix < length-1; ix++){
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e010      	b.n	8000690 <checksum+0x38>
		check_sum += data[ix];
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b29a      	uxth	r2, r3
 8000678:	89bb      	ldrh	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	81bb      	strh	r3, [r7, #12]
		if(check_sum >= 256){
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d902      	bls.n	800068a <checksum+0x32>
			check_sum -= 255;
 8000684:	89bb      	ldrh	r3, [r7, #12]
 8000686:	3bff      	subs	r3, #255	; 0xff
 8000688:	81bb      	strh	r3, [r7, #12]
	for(ix = 0; ix < length-1; ix++){
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	7bfa      	ldrb	r2, [r7, #15]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3b01      	subs	r3, #1
 8000696:	429a      	cmp	r2, r3
 8000698:	dbe9      	blt.n	800066e <checksum+0x16>
		}
	}
	return (uint8_t)(0xff - check_sum);
 800069a:	89bb      	ldrh	r3, [r7, #12]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <Make_RTC_LIN_Frame>:

/*
 * THis function read the time from the rtc (it assume you already init it in the main)
 * And then it generate a LIN frame containing the inforamation
 * */
LINMSG Make_RTC_LIN_Frame(){
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	// Read date and time registers
	uint32_t time_tmp_reg = RTC->TR;
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <Make_RTC_LIN_Frame+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t date_tmp_reg = RTC->DR;
 80006be:	4b32      	ldr	r3, [pc, #200]	; (8000788 <Make_RTC_LIN_Frame+0xd8>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	623b      	str	r3, [r7, #32]

		// Extract values from saved register values
	uint8_t day = bcd_to_int((date_tmp_reg & (RTC_DR_DU | RTC_DR_DT)) >> RTC_DR_DU_Pos);
 80006c4:	6a3b      	ldr	r3, [r7, #32]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd6d 	bl	80011ae <bcd_to_int>
 80006d4:	4603      	mov	r3, r0
 80006d6:	77fb      	strb	r3, [r7, #31]
	uint8_t month = bcd_to_int((date_tmp_reg & (RTC_DR_MU | RTC_DR_MT)) >> RTC_DR_MU_Pos);
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fd62 	bl	80011ae <bcd_to_int>
 80006ea:	4603      	mov	r3, r0
 80006ec:	77bb      	strb	r3, [r7, #30]
	uint8_t year = bcd_to_int((date_tmp_reg & (RTC_DR_YU | RTC_DR_YT)) >> RTC_DR_YU_Pos);
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fd5a 	bl	80011ae <bcd_to_int>
 80006fa:	4603      	mov	r3, r0
 80006fc:	777b      	strb	r3, [r7, #29]
	uint8_t hour = bcd_to_int((time_tmp_reg & (RTC_TR_HU | RTC_TR_HT)) >> RTC_TR_HU_Pos);
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	0c1b      	lsrs	r3, r3, #16
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fd4f 	bl	80011ae <bcd_to_int>
 8000710:	4603      	mov	r3, r0
 8000712:	773b      	strb	r3, [r7, #28]
	uint8_t min = bcd_to_int((time_tmp_reg & (RTC_TR_MNU | RTC_TR_MNT)) >> RTC_TR_MNU_Pos);
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fd44 	bl	80011ae <bcd_to_int>
 8000726:	4603      	mov	r3, r0
 8000728:	76fb      	strb	r3, [r7, #27]
	uint8_t sec = bcd_to_int((time_tmp_reg & (RTC_TR_SU | RTC_TR_ST)) >> RTC_TR_SU_Pos);
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fd3a 	bl	80011ae <bcd_to_int>
 800073a:	4603      	mov	r3, r0
 800073c:	76bb      	strb	r3, [r7, #26]

	LINMSG response;
	response.length = 6;
 800073e:	2306      	movs	r3, #6
 8000740:	737b      	strb	r3, [r7, #13]
	response.data[0] = hour;
 8000742:	7f3b      	ldrb	r3, [r7, #28]
 8000744:	73bb      	strb	r3, [r7, #14]
	response.data[1] = min;
 8000746:	7efb      	ldrb	r3, [r7, #27]
 8000748:	73fb      	strb	r3, [r7, #15]
	response.data[2] = sec;
 800074a:	7ebb      	ldrb	r3, [r7, #26]
 800074c:	743b      	strb	r3, [r7, #16]
	response.data[3] = day;
 800074e:	7ffb      	ldrb	r3, [r7, #31]
 8000750:	747b      	strb	r3, [r7, #17]
	response.data[4] = month;
 8000752:	7fbb      	ldrb	r3, [r7, #30]
 8000754:	74bb      	strb	r3, [r7, #18]
	response.data[5] = year;
 8000756:	7f7b      	ldrb	r3, [r7, #29]
 8000758:	74fb      	strb	r3, [r7, #19]
	response.checksum = checksum(6,response.data);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	3302      	adds	r3, #2
 8000760:	4619      	mov	r1, r3
 8000762:	2006      	movs	r0, #6
 8000764:	f7ff ff78 	bl	8000658 <checksum>
 8000768:	4603      	mov	r3, r0
 800076a:	763b      	strb	r3, [r7, #24]
	return response;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	461c      	mov	r4, r3
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000776:	6020      	str	r0, [r4, #0]
 8000778:	6061      	str	r1, [r4, #4]
 800077a:	60a2      	str	r2, [r4, #8]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7323      	strb	r3, [r4, #12]
}
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	372c      	adds	r7, #44	; 0x2c
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40002800 	.word	0x40002800

0800078c <Send_LIN_To_CAN>:


/*
 * This function takes a LIN frame, and send the same data to CAN
 * */
void Send_LIN_To_CAN(LINMSG* salve_rx_msg){
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	CAN_frame can_linframe = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
	can_linframe.IDE = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	743b      	strb	r3, [r7, #16]
	can_linframe.ID = 0x11111111; //TODO maybe find another ID
 80007a6:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
 80007aa:	60fb      	str	r3, [r7, #12]
	can_linframe.RTR = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	747b      	strb	r3, [r7, #17]
	can_linframe.DLC = salve_rx_msg->length;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	74bb      	strb	r3, [r7, #18]
	for (int i=0; i<salve_rx_msg->length;i++){
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e00d      	b.n	80007d8 <Send_LIN_To_CAN+0x4c>
		can_linframe.data[i] = salve_rx_msg->data[i];
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	4413      	add	r3, r2
 80007c2:	3302      	adds	r3, #2
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	f107 0213 	add.w	r2, r7, #19
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	4413      	add	r3, r2
 80007ce:	460a      	mov	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<salve_rx_msg->length;i++){
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	461a      	mov	r2, r3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	dbeb      	blt.n	80007bc <Send_LIN_To_CAN+0x30>
	}
	CAN_sendFrame(can_linframe);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ea:	f000 f9b9 	bl	8000b60 <CAN_sendFrame>

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <__NVIC_EnableIRQ+0x38>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <CAN_Counter_Init>:
#include "can.h"

static GPIO_TypeDef * PB = GPIOB;
static CAN_frame Counter;

void CAN_Counter_Init(){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	Counter.ID = 0x010;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <CAN_Counter_Init+0x2c>)
 800088e:	2210      	movs	r2, #16
 8000890:	601a      	str	r2, [r3, #0]
	Counter.IDE = 0x0;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <CAN_Counter_Init+0x2c>)
 8000894:	2200      	movs	r2, #0
 8000896:	711a      	strb	r2, [r3, #4]
	Counter.RTR = 0;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <CAN_Counter_Init+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	715a      	strb	r2, [r3, #5]
	Counter.DLC = 1;
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <CAN_Counter_Init+0x2c>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	719a      	strb	r2, [r3, #6]
	Counter.data[0] = 0;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <CAN_Counter_Init+0x2c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	71da      	strb	r2, [r3, #7]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	200000ac 	.word	0x200000ac

080008b8 <CAN_GPIO_Init>:

void CAN_GPIO_Init(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

	Configure_buttonInterrupt();
 80008bc:	f000 f90e 	bl	8000adc <Configure_buttonInterrupt>
	RCC->AHB1ENR |= 0x2; //gpio clock activation for can gpio B
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a23      	ldr	r2, [pc, #140]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //for the led gpio D
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0x1<<25); // can clock activation
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <CAN_GPIO_Init+0x9c>)
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40

	PB->MODER &=  ~(GPIO_MODER_MODER8_Msk |GPIO_MODER_MODER9_Msk); // set the Moder of pin 8 & 9 to 00
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <CAN_GPIO_Init+0xa0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <CAN_GPIO_Init+0xa0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80008f2:	601a      	str	r2, [r3, #0]
	PB->MODER |=  (GPIO_MODER_MODER8_1 |GPIO_MODER_MODER9_1); // set the Moder of pin 8 & 9 to 10 aka Alternate fonction
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <CAN_GPIO_Init+0xa0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <CAN_GPIO_Init+0xa0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000902:	601a      	str	r2, [r3, #0]

	PB->PUPDR &= ~(GPIO_PUPDR_PUPD8_Msk | GPIO_PUPDR_PUPD9_Msk);
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <CAN_GPIO_Init+0xa0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <CAN_GPIO_Init+0xa0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000912:	60da      	str	r2, [r3, #12]
	PB->OSPEEDR |= 0xF << 16; //Set the pin 8 and 9 to 11 aka hight speed
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <CAN_GPIO_Init+0xa0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <CAN_GPIO_Init+0xa0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8000922:	609a      	str	r2, [r3, #8]

	PB->AFR[1] &= ~0xFF;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <CAN_GPIO_Init+0xa0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <CAN_GPIO_Init+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
	PB->AFR[1] |= 0x99;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <CAN_GPIO_Init+0xa0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <CAN_GPIO_Init+0xa0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0299 	orr.w	r2, r2, #153	; 0x99
 8000942:	625a      	str	r2, [r3, #36]	; 0x24

	//Config the pin as general output for the led
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <CAN_GPIO_Init+0xa4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <CAN_GPIO_Init+0xa4>)
 800094a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800094e:	6013      	str	r3, [r2, #0]

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	20000008 	.word	0x20000008
 800095c:	40020c00 	.word	0x40020c00

08000960 <CAN_config>:

void CAN_config(uint8_t IDE, uint8_t FBM, uint16_t Filter_ID_high, uint16_t Filter_ID_low, uint16_t Filter_Mask_high, uint16_t Filter_Mask_low){
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4604      	mov	r4, r0
 8000968:	4608      	mov	r0, r1
 800096a:	4611      	mov	r1, r2
 800096c:	461a      	mov	r2, r3
 800096e:	4623      	mov	r3, r4
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	4603      	mov	r3, r0
 8000974:	71bb      	strb	r3, [r7, #6]
 8000976:	460b      	mov	r3, r1
 8000978:	80bb      	strh	r3, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	807b      	strh	r3, [r7, #2]
	//clear sleep bit
	CAN1->MCR &= ~(0x2);
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <CAN_config+0x174>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a54      	ldr	r2, [pc, #336]	; (8000ad4 <CAN_config+0x174>)
 8000984:	f023 0302 	bic.w	r3, r3, #2
 8000988:	6013      	str	r3, [r2, #0]
	//wait for the can to wakeup
	while(CAN1->MSR & (0x2));
 800098a:	bf00      	nop
 800098c:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <CAN_config+0x174>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f9      	bne.n	800098c <CAN_config+0x2c>
	//Set to config mode
	CAN1->MCR |= 0x1;
 8000998:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <CAN_config+0x174>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a4d      	ldr	r2, [pc, #308]	; (8000ad4 <CAN_config+0x174>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

	while(!(CAN1->MSR & 0x1));
 80009a4:	bf00      	nop
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <CAN_config+0x174>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f9      	beq.n	80009a6 <CAN_config+0x46>

	//Set all bit but config to 0 (maybe check it later for sleep mode ?)
	CAN1->MCR &= 0x1;
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <CAN_config+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <CAN_config+0x174>)
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]

	// 250kbaus, loopback mode, BRP 16 10TQ
	//CAN1->BTR = 0x0403001B;
	CAN1->BTR = 0x40250010;
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <CAN_config+0x174>)
 80009c0:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <CAN_config+0x178>)
 80009c2:	61da      	str	r2, [r3, #28]

	//Realase mail box (? Is it necessary (box empty ?))
	CAN1->RF0R |= CAN_RF0R_RFOM0;
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <CAN_config+0x174>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a42      	ldr	r2, [pc, #264]	; (8000ad4 <CAN_config+0x174>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	60d3      	str	r3, [r2, #12]

	//Enable interrupt on mailbox 0
	CAN1->IER |= 0x2;
 80009d0:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <CAN_config+0x174>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <CAN_config+0x174>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	6153      	str	r3, [r2, #20]

	NVIC_SetPriority(CAN1_RX0_IRQn,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2014      	movs	r0, #20
 80009e0:	f7ff ff28 	bl	8000834 <__NVIC_SetPriority>
	//NVIC_SetPriority(CAN1_TX_IRQn,0);
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009e4:	2014      	movs	r0, #20
 80009e6:	f7ff ff07 	bl	80007f8 <__NVIC_EnableIRQ>
	//NVIC_EnableIRQ(CAN1_TX_IRQn);

	//set to normal mod
	CAN1->MCR &= ~(0x1);
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <CAN_config+0x174>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a39      	ldr	r2, [pc, #228]	; (8000ad4 <CAN_config+0x174>)
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	6013      	str	r3, [r2, #0]
	//wait for normal mod
	while((CAN1->MSR & 0x1));
 80009f6:	bf00      	nop
 80009f8:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <CAN_config+0x174>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f9      	bne.n	80009f8 <CAN_config+0x98>

	//set filter in init mode
	CAN1->FMR |= (0x1); //Mask mode
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <CAN_config+0x174>)
 8000a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a0a:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <CAN_config+0x174>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	CAN1->FA1R |= 0x1;
 8000a14:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <CAN_config+0x174>)
 8000a16:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000a1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <CAN_config+0x174>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Assign the message from filter 0 to FIFO0
	CAN1->FFA1R &= ~(0x1);
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <CAN_config+0x174>)
 8000a26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <CAN_config+0x174>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	if (FBM == 0){
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d108      	bne.n	8000a4c <CAN_config+0xec>
		CAN1->FM1R &= ~(0x1); //Set filter 1 in mask mod
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <CAN_config+0x174>)
 8000a3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a40:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <CAN_config+0x174>)
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000a4a:	e007      	b.n	8000a5c <CAN_config+0xfc>
	}else{
		CAN1->FM1R |= 0x1; //Set filter 1 in list mod
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <CAN_config+0x174>)
 8000a4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a52:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <CAN_config+0x174>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	// configure filter mode based on IDE
	if (IDE == 0){ // standard mode
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d116      	bne.n	8000a90 <CAN_config+0x130>
		CAN1->FS1R &= ~0x1; //activating filter 0 in 16bits
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <CAN_config+0x174>)
 8000a64:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <CAN_config+0x174>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_Mask_low << 16 | Filter_ID_low);
 8000a72:	8bbb      	ldrh	r3, [r7, #28]
 8000a74:	041a      	lsls	r2, r3, #16
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <CAN_config+0x174>)
 8000a7c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_ID_high);
 8000a80:	8b3b      	ldrh	r3, [r7, #24]
 8000a82:	041a      	lsls	r2, r3, #16
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	431a      	orrs	r2, r3
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <CAN_config+0x174>)
 8000a8a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000a8e:	e015      	b.n	8000abc <CAN_config+0x15c>

	}else{ // extended mode
		CAN1->FS1R |= 0x1; //activating filter 0 32bits
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <CAN_config+0x174>)
 8000a92:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <CAN_config+0x174>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 16 | Filter_ID_low);
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	041a      	lsls	r2, r3, #16
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <CAN_config+0x174>)
 8000aaa:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 16 | Filter_Mask_low);
 8000aae:	8b3b      	ldrh	r3, [r7, #24]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	8bbb      	ldrh	r3, [r7, #28]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <CAN_config+0x174>)
 8000ab8:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	}

	//Activate Filter 0
	CAN1->FMR &= ~(0x1);
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <CAN_config+0x174>)
 8000abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <CAN_config+0x174>)
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40006400 	.word	0x40006400
 8000ad8:	40250010 	.word	0x40250010

08000adc <Configure_buttonInterrupt>:

void Configure_buttonInterrupt() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <Configure_buttonInterrupt+0x74>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <Configure_buttonInterrupt+0x74>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <Configure_buttonInterrupt+0x74>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <Configure_buttonInterrupt+0x74>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure PA0 as input with pull-up
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);  // Clear mode bits
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <Configure_buttonInterrupt+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <Configure_buttonInterrupt+0x78>)
 8000afe:	f023 0303 	bic.w	r3, r3, #3
 8000b02:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);  // Clear pull-up/pull-down bits
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <Configure_buttonInterrupt+0x78>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <Configure_buttonInterrupt+0x78>)
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	60d3      	str	r3, [r2, #12]
    //GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;  // Set pull-up mode

    // Connect EXTI Line 0 to PA0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <Configure_buttonInterrupt+0x7c>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <Configure_buttonInterrupt+0x7c>)
 8000b16:	f023 030f 	bic.w	r3, r3, #15
 8000b1a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <Configure_buttonInterrupt+0x7c>)
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <Configure_buttonInterrupt+0x7c>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0 to interrupt on the rising edge
    EXTI->IMR |= EXTI_IMR_MR0;  // Enable interrupt on EXTI Line 0
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <Configure_buttonInterrupt+0x80>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <Configure_buttonInterrupt+0x80>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;  // Set falling edge trigger
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <Configure_buttonInterrupt+0x80>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <Configure_buttonInterrupt+0x80>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	60d3      	str	r3, [r2, #12]

    // Enable and set the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000b3c:	2006      	movs	r0, #6
 8000b3e:	f7ff fe5b 	bl	80007f8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2006      	movs	r0, #6
 8000b46:	f7ff fe75 	bl	8000834 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40013c00 	.word	0x40013c00

08000b60 <CAN_sendFrame>:


uint8_t CAN_sendFrame(CAN_frame CAN_mess){
 8000b60:	b490      	push	{r4, r7}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	463c      	mov	r4, r7
 8000b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //Check if TxMailbox0 is empty
    if (CAN1->TSR & 0x04000000){
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d03f      	beq.n	8000bf8 <CAN_sendFrame+0x98>
        //fill the mailbox
        //Writing the id and the RTR
        uint32_t id = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
        if (CAN_mess.IDE == 0) { // standard mode
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d106      	bne.n	8000b90 <CAN_sendFrame+0x30>
            id = (CAN_mess.ID << 21) | (CAN_mess.RTR << 1);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	055b      	lsls	r3, r3, #21
 8000b86:	797a      	ldrb	r2, [r7, #5]
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e007      	b.n	8000ba0 <CAN_sendFrame+0x40>
        }
        else { // extended mode
            id = (CAN_mess.ID << 3) | (CAN_mess.RTR << 1) | (1 << 2);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	797a      	ldrb	r2, [r7, #5]
 8000b96:	0052      	lsls	r2, r2, #1
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
        }
        CAN1->sTxMailBox[0].TIR = id;
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        CAN1->sTxMailBox[0].TDTR = CAN_mess.DLC;
 8000ba8:	79ba      	ldrb	r2, [r7, #6]
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000bac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        CAN1->sTxMailBox[0].TDLR = CAN_mess.data[3] << 24 | CAN_mess.data[2] << 16 | CAN_mess.data[1] << 8 | CAN_mess.data[0];
 8000bb0:	7abb      	ldrb	r3, [r7, #10]
 8000bb2:	061a      	lsls	r2, r3, #24
 8000bb4:	7a7b      	ldrb	r3, [r7, #9]
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	7a3b      	ldrb	r3, [r7, #8]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000bc6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        CAN1->sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	061a      	lsls	r2, r3, #24
 8000bce:	7b7b      	ldrb	r3, [r7, #13]
 8000bd0:	041b      	lsls	r3, r3, #16
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	7b3b      	ldrb	r3, [r7, #12]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	7afa      	ldrb	r2, [r7, #11]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000be0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        CAN1->sTxMailBox[0].TIR |= 1; //Send the message
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000be6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <CAN_sendFrame+0xa4>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        return(1);
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <CAN_sendFrame+0x9a>
    }
    else return(0);
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc90      	pop	{r4, r7}
 8000c02:	4770      	bx	lr
 8000c04:	40006400 	.word	0x40006400

08000c08 <EXTI0_IRQHandler>:
        sprintf(temp, "%02X ", frame->data[i]);
        strcat(str, temp);
    }
}

void EXTI0_IRQHandler(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    if ((EXTI->PR & EXTI_PR_PR0) != 0) {
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <EXTI0_IRQHandler+0x24>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <EXTI0_IRQHandler+0x20>
        // Button is pressed
    	EXTI0_buttonpressCallback();
 8000c18:	f000 f80a 	bl	8000c30 <EXTI0_buttonpressCallback>
        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <EXTI0_IRQHandler+0x24>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4a02      	ldr	r2, [pc, #8]	; (8000c2c <EXTI0_IRQHandler+0x24>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6153      	str	r3, [r2, #20]

    }
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013c00 	.word	0x40013c00

08000c30 <EXTI0_buttonpressCallback>:

void EXTI0_buttonpressCallback(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	CAN_sendFrame(Counter);
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <EXTI0_buttonpressCallback+0x1c>)
 8000c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c38:	f7ff ff92 	bl	8000b60 <CAN_sendFrame>
	Counter.data[0]+= 1;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <EXTI0_buttonpressCallback+0x1c>)
 8000c3e:	79db      	ldrb	r3, [r3, #7]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b01      	ldr	r3, [pc, #4]	; (8000c4c <EXTI0_buttonpressCallback+0x1c>)
 8000c46:	71da      	strb	r2, [r3, #7]
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000ac 	.word	0x200000ac

08000c50 <CAN_frameFetch>:

/*
 * THis function fetch the can frame from the register and returns it
 *
 * */
CAN_frame CAN_frameFetch(void){
 8000c50:	b490      	push	{r4, r7}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	CAN_frame CAN_mess;
	// read the message from the FIFO
	CAN_mess.IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) ? 1 : 0; // check if extended identifier
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000c5a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	743b      	strb	r3, [r7, #16]
	if (CAN_mess.IDE == 0) { // standard identifier
 8000c6e:	7c3b      	ldrb	r3, [r7, #16]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d107      	bne.n	8000c84 <CAN_frameFetch+0x34>
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF; //Fetch the 11bits ID
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000c76:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000c7a:	0d5b      	lsrs	r3, r3, #21
 8000c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e006      	b.n	8000c92 <CAN_frameFetch+0x42>
	}else { // extended identifier
		CAN_mess.ID = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFF; //Fetch the 29 bit ID
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000c86:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000c90:	60fb      	str	r3, [r7, #12]
	}
	CAN_mess.RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) ? 1 : 0; //Is it a reception trame?
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000c94:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	747b      	strb	r3, [r7, #17]
	CAN_mess.DLC = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000caa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	74bb      	strb	r3, [r7, #18]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	e010      	b.n	8000ce0 <CAN_frameFetch+0x90>
		CAN_mess.data[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i*8)) & 0xFF;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <CAN_frameFetch+0xb4>)
 8000cc0:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	b2d9      	uxtb	r1, r3
 8000cce:	f107 0213 	add.w	r2, r7, #19
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_mess.DLC; i++){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	7cbb      	ldrb	r3, [r7, #18]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	dbe9      	blt.n	8000cbe <CAN_frameFetch+0x6e>
	}
	return CAN_mess;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	461c      	mov	r4, r3
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc90      	pop	{r4, r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40006400 	.word	0x40006400

08000d08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200000bc 	.word	0x200000bc
 8000d38:	20000170 	.word	0x20000170

08000d3c <CAN1_RX0_IRQHandler>:

#include "int.h"

// Interrupt handler for CAN1 RX0
void CAN1_RX0_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    if (CAN1->RF0R & CAN_RF0R_FMP0) // check if there is a message in the FIFO
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <CAN1_RX0_IRQHandler+0x30>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00c      	beq.n	8000d66 <CAN1_RX0_IRQHandler+0x2a>
    {
    	 // clear the message from the FIFO
    	CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <CAN1_RX0_IRQHandler+0x30>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <CAN1_RX0_IRQHandler+0x30>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	60d3      	str	r3, [r2, #12]

        // send a message to task
        osSignalSet(osThreadGetId(), 0x01);
 8000d58:	f001 fcad 	bl	80026b6 <osThreadGetId>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fcc3 	bl	80026ec <osSignalSet>

    }
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40006400 	.word	0x40006400

08000d70 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
		if(USART3->SR & USART_SR_RXNE || USART3->SR & USART_SR_LBD_Msk){
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <USART3_IRQHandler+0x24>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <USART3_IRQHandler+0x1c>
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <USART3_IRQHandler+0x24>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <USART3_IRQHandler+0x20>
			slave_response();
 8000d8c:	f7ff fbc4 	bl	8000518 <slave_response>
		}

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004800 	.word	0x40004800

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b0c4      	sub	sp, #272	; 0x110
 8000d9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fb85 	bl	80014ac <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN_GPIO_Init();
 8000da2:	f7ff fd89 	bl	80008b8 <CAN_GPIO_Init>
  CAN_Counter_Init();
 8000da6:	f7ff fd6f 	bl	8000888 <CAN_Counter_Init>
  //2.3
  //32bit mode, list mode
  //ID = 0x010,standard ID, accept both data and request frame
  CAN_config(1,1,(0x10 << 5),0x2,(0x10 << 5),0x00);
 8000daa:	2300      	movs	r3, #0
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2302      	movs	r3, #2
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fdcf 	bl	8000960 <CAN_config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f8f1 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 f959 	bl	800107c <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of canFrameReceptionQueue */
  osMessageQDef(canFrameReceptionQueue, 16, CAN_frame);
 8000dca:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <main+0x1c0>)
 8000dcc:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8000dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canFrameReceptionQueueHandle = osMessageCreate(osMessageQ(canFrameReceptionQueue), NULL);
 8000dd6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fcc5 	bl	800276c <osMessageCreate>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a5d      	ldr	r2, [pc, #372]	; (8000f5c <main+0x1c4>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* definition and creation of canFrameSendQueue */
  osMessageQDef(canFrameSendQueue, 16, CAN_frame);
 8000de8:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <main+0x1c0>)
 8000dea:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canFrameSendQueueHandle = osMessageCreate(osMessageQ(canFrameSendQueue), NULL);
 8000df4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fcb6 	bl	800276c <osMessageCreate>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a57      	ldr	r2, [pc, #348]	; (8000f60 <main+0x1c8>)
 8000e04:	6013      	str	r3, [r2, #0]

  /* definition and creation of linFrameSendQueue */
  osMessageQDef(linFrameSendQueue, 16, LINMSG);
 8000e06:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <main+0x1cc>)
 8000e08:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linFrameSendQueueHandle = osMessageCreate(osMessageQ(linFrameSendQueue), NULL);
 8000e12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fca7 	bl	800276c <osMessageCreate>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <main+0x1d0>)
 8000e22:	6013      	str	r3, [r2, #0]

  /* definition and creation of linFrameReceptionQueue */
  osMessageQDef(linFrameReceptionQueue, 16, LINMSG);
 8000e24:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <main+0x1cc>)
 8000e26:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linFrameReceptionQueueHandle = osMessageCreate(osMessageQ(linFrameReceptionQueue), NULL);
 8000e30:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fc98 	bl	800276c <osMessageCreate>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <main+0x1d4>)
 8000e40:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <main+0x1d8>)
 8000e44:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000e48:	461d      	mov	r5, r3
 8000e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fbde 	bl	800261e <osThreadCreate>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <main+0x1dc>)
 8000e66:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_recept */
  osThreadDef(Task_can_recept, can_reception, osPriorityHigh, 0, 128);
 8000e68:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <main+0x1e0>)
 8000e6a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000e6e:	461d      	mov	r5, r3
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_receptHandle = osThreadCreate(osThread(Task_can_recept), NULL);
 8000e7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fbcb 	bl	800261e <osThreadCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <main+0x1e4>)
 8000e8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_send */
  osThreadDef(Task_can_send, can_send, osPriorityHigh, 0, 128);
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <main+0x1e8>)
 8000e90:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_sendHandle = osThreadCreate(osThread(Task_can_send), NULL);
 8000ea2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fbb8 	bl	800261e <osThreadCreate>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <main+0x1ec>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_can_proces */
  osThreadDef(Task_can_proces, can_process, osPriorityNormal, 0, 128);
 8000eb4:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <main+0x1f0>)
 8000eb6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_can_procesHandle = osThreadCreate(osThread(Task_can_proces), NULL);
 8000ec8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fba5 	bl	800261e <osThreadCreate>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <main+0x1f4>)
 8000ed8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_lin_recept */
  osThreadDef(Task_lin_recept, lin_reception, osPriorityHigh, 0, 128);
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <main+0x1f8>)
 8000edc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ee0:	461d      	mov	r5, r3
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_lin_receptHandle = osThreadCreate(osThread(Task_lin_recept), NULL);
 8000eee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fb92 	bl	800261e <osThreadCreate>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <main+0x1fc>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_lin_proces */
  osThreadDef(Task_lin_proces, lin_process, osPriorityNormal, 0, 128);
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <main+0x200>)
 8000f02:	f107 0420 	add.w	r4, r7, #32
 8000f06:	461d      	mov	r5, r3
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_lin_procesHandle = osThreadCreate(osThread(Task_lin_proces), NULL);
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fb7f 	bl	800261e <osThreadCreate>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <main+0x204>)
 8000f24:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_lin_send */
  osThreadDef(Task_lin_send, lin_send, osPriorityHigh, 0, 128);
 8000f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <main+0x208>)
 8000f30:	461c      	mov	r4, r3
 8000f32:	4615      	mov	r5, r2
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_lin_sendHandle = osThreadCreate(osThread(Task_lin_send), NULL);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fb6a 	bl	800261e <osThreadCreate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <main+0x20c>)
 8000f4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f50:	f001 fb5e 	bl	8002610 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x1bc>
 8000f56:	bf00      	nop
 8000f58:	08004b9c 	.word	0x08004b9c
 8000f5c:	2000038c 	.word	0x2000038c
 8000f60:	20000390 	.word	0x20000390
 8000f64:	08004bac 	.word	0x08004bac
 8000f68:	20000394 	.word	0x20000394
 8000f6c:	20000398 	.word	0x20000398
 8000f70:	08004bbc 	.word	0x08004bbc
 8000f74:	20000370 	.word	0x20000370
 8000f78:	08004bd8 	.word	0x08004bd8
 8000f7c:	20000374 	.word	0x20000374
 8000f80:	08004bf4 	.word	0x08004bf4
 8000f84:	20000378 	.word	0x20000378
 8000f88:	08004c10 	.word	0x08004c10
 8000f8c:	2000037c 	.word	0x2000037c
 8000f90:	08004c2c 	.word	0x08004c2c
 8000f94:	20000380 	.word	0x20000380
 8000f98:	08004c48 	.word	0x08004c48
 8000f9c:	20000384 	.word	0x20000384
 8000fa0:	08004c64 	.word	0x08004c64
 8000fa4:	20000388 	.word	0x20000388

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fce4 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001018:	2308      	movs	r3, #8
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fb60 	bl	80016f4 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 f8b3 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fdc1 	bl	8001be4 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 f89c 	bl	80011a4 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_GPIO_Init+0x4c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <MX_GPIO_Init+0x4c>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_GPIO_Init+0x4c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_GPIO_Init+0x4c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <MX_GPIO_Init+0x4c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_GPIO_Init+0x4c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f001 faf5 	bl	80026c4 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <StartDefaultTask+0x8>

080010dc <can_reception>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_reception */
void can_reception(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_reception */
  /* Infinite loop */
  for(;;)
  {
    CAN_frame recived_frame = CAN_frameFetch();//Fetch the frame from the DR
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fdb1 	bl	8000c50 <CAN_frameFetch>
  {
 80010ee:	e7f9      	b.n	80010e4 <can_reception+0x8>

080010f0 <can_send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_send */
void can_send(void const * argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_send */
  /* Infinite loop */
  for(;;)
  {
	  osEvent event = osMessageGet(canFrameSendQueueHandle, osWaitForever);
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <can_send+0x30>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fb59 	bl	80027bc <osMessageGet>
	 	  if (event.status == osEventMessage)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b10      	cmp	r3, #16
 800110e:	d1f3      	bne.n	80010f8 <can_send+0x8>
	 	  {
	 		  // Extract the CAN frame from the event message
	 		  CAN_frame *frame = (CAN_frame *)(event.value.p); //TODO check if the queue needs to be emptied
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	617b      	str	r3, [r7, #20]
	 		  CAN_sendFrame(*frame);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001118:	f7ff fd22 	bl	8000b60 <CAN_sendFrame>
  {
 800111c:	e7ec      	b.n	80010f8 <can_send+0x8>
 800111e:	bf00      	nop
 8001120:	20000390 	.word	0x20000390

08001124 <can_process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_process */
void can_process(void const * argument)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_process */
  /* Infinite loop */
  for(;;)
  {
	  // Fetch a CAN frame from the queue
	  osEvent event = osMessageGet(canFrameReceptionQueueHandle, osWaitForever);
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <can_process+0x28>)
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb3f 	bl	80027bc <osMessageGet>
	  if (event.status == osEventMessage)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b10      	cmp	r3, #16
 8001142:	d1f3      	bne.n	800112c <can_process+0x8>
	  {
		  // Extract the CAN frame from the event message
		  CAN_frame *receivedFrame = (CAN_frame *)(event.value.p);//TODO check if the queue needs to be emptied
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	617b      	str	r3, [r7, #20]
  {
 8001148:	e7f0      	b.n	800112c <can_process+0x8>
 800114a:	bf00      	nop
 800114c:	2000038c 	.word	0x2000038c

08001150 <lin_reception>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lin_reception */
void lin_reception(void const * argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lin_reception */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f001 fab3 	bl	80026c4 <osDelay>
 800115e:	e7fb      	b.n	8001158 <lin_reception+0x8>

08001160 <lin_process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lin_process */
void lin_process(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lin_process */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f001 faab 	bl	80026c4 <osDelay>
 800116e:	e7fb      	b.n	8001168 <lin_process+0x8>

08001170 <lin_send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lin_send */
void lin_send(void const * argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lin_send */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f001 faa3 	bl	80026c4 <osDelay>
 800117e:	e7fb      	b.n	8001178 <lin_send+0x8>

08001180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001192:	f000 f9ad 	bl	80014f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40001000 	.word	0x40001000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>

080011ae <bcd_to_int>:
  * @brief Turn an 8-bit bcd number into an 8-bit binary number
  * @param bcd the binary coded decimal number
  * @retval n the binary number
  */
uint8_t bcd_to_int(uint8_t bcd)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
	uint8_t n_t = (bcd & 0xF0) >> 4;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	73fb      	strb	r3, [r7, #15]
	uint8_t n_u = (bcd & 0x0F);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	73bb      	strb	r3, [r7, #14]
	uint8_t n = (n_t*10 + n_u);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	461a      	mov	r2, r3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	4413      	add	r3, r2
 80011d6:	737b      	strb	r3, [r7, #13]
	return n;
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_MspInit+0x54>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_MspInit+0x54>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x54>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_MspInit+0x54>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_MspInit+0x54>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_MspInit+0x54>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	f06f 0001 	mvn.w	r0, #1
 800122e:	f000 fa37 	bl	80016a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_InitTick+0xe4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_InitTick+0xe4>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_InitTick+0xe4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126c:	f107 0210 	add.w	r2, r7, #16
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fec0 	bl	8001ffc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001286:	f000 fea5 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 800128a:	6378      	str	r0, [r7, #52]	; 0x34
 800128c:	e004      	b.n	8001298 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800128e:	f000 fea1 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8001292:	4603      	mov	r3, r0
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_InitTick+0xe8>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	3b01      	subs	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <HAL_InitTick+0xec>)
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_InitTick+0xf0>)
 80012aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_InitTick+0xec>)
 80012ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_InitTick+0xec>)
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_InitTick+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_InitTick+0xec>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_InitTick+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012cc:	4817      	ldr	r0, [pc, #92]	; (800132c <HAL_InitTick+0xec>)
 80012ce:	f000 fec7 	bl	8002060 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d11b      	bne.n	8001318 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <HAL_InitTick+0xec>)
 80012e2:	f000 ff17 	bl	8002114 <HAL_TIM_Base_Start_IT>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f4:	2036      	movs	r0, #54	; 0x36
 80012f6:	f000 f9ef 	bl	80016d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d808      	bhi.n	8001312 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2036      	movs	r0, #54	; 0x36
 8001306:	f000 f9cb 	bl	80016a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_InitTick+0xf4>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e002      	b.n	8001318 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001318:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800131c:	4618      	mov	r0, r3
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	431bde83 	.word	0x431bde83
 800132c:	2000039c 	.word	0x2000039c
 8001330:	40001000 	.word	0x40001000
 8001334:	20000010 	.word	0x20000010

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM6_DAC_IRQHandler+0x10>)
 800136a:	f000 ff43 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000039c 	.word	0x2000039c

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <USART2_IRQHandler>:

	chaine[i]='\0';
	return(chaine);
}

void USART2_IRQHandler(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  // Check if the RXNE (Receive Data Register Not Empty) flag is set
  if (USART2->SR & USART_SR_RXNE) {
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <USART2_IRQHandler+0x84>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d034      	beq.n	8001418 <USART2_IRQHandler+0x7c>
    // Read the received data
    char data = USART2->DR;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <USART2_IRQHandler+0x84>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	71fb      	strb	r3, [r7, #7]
    // Store the received character in the buffer
    rxBuffer[rxIndex] = data;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <USART2_IRQHandler+0x88>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	491b      	ldr	r1, [pc, #108]	; (8001428 <USART2_IRQHandler+0x8c>)
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	54ca      	strb	r2, [r1, r3]
    // Check for the word "trame"
    if (rxIndex > 3 && rxBuffer[rxIndex] == 'e' &&  rxBuffer[rxIndex - 1] == 'm' && rxBuffer[rxIndex - 2] == 'a' && rxBuffer[rxIndex - 3] == 'r' && rxBuffer[rxIndex - 4] == 't') {
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <USART2_IRQHandler+0x88>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	dd23      	ble.n	800140e <USART2_IRQHandler+0x72>
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <USART2_IRQHandler+0x88>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <USART2_IRQHandler+0x8c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	2b65      	cmp	r3, #101	; 0x65
 80013d0:	d11d      	bne.n	800140e <USART2_IRQHandler+0x72>
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <USART2_IRQHandler+0x88>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <USART2_IRQHandler+0x8c>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	2b6d      	cmp	r3, #109	; 0x6d
 80013de:	d116      	bne.n	800140e <USART2_IRQHandler+0x72>
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <USART2_IRQHandler+0x88>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3b02      	subs	r3, #2
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <USART2_IRQHandler+0x8c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	2b61      	cmp	r3, #97	; 0x61
 80013ec:	d10f      	bne.n	800140e <USART2_IRQHandler+0x72>
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <USART2_IRQHandler+0x88>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3b03      	subs	r3, #3
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <USART2_IRQHandler+0x8c>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	2b72      	cmp	r3, #114	; 0x72
 80013fa:	d108      	bne.n	800140e <USART2_IRQHandler+0x72>
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <USART2_IRQHandler+0x88>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b04      	subs	r3, #4
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <USART2_IRQHandler+0x8c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	2b74      	cmp	r3, #116	; 0x74
 8001408:	d101      	bne.n	800140e <USART2_IRQHandler+0x72>
    	handleTrameReceived();
 800140a:	f000 f80f 	bl	800142c <handleTrameReceived>
    }

    // Increment the buffer index
    rxIndex += 1 % 12;
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <USART2_IRQHandler+0x88>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <USART2_IRQHandler+0x88>)
 8001416:	6013      	str	r3, [r2, #0]
  }
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40004400 	.word	0x40004400
 8001424:	200003f0 	.word	0x200003f0
 8001428:	200003e4 	.word	0x200003e4

0800142c <handleTrameReceived>:
void handleTrameReceived(){
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
	CAN_frame trame;
	trame.ID = 0x010;
 8001432:	2310      	movs	r3, #16
 8001434:	603b      	str	r3, [r7, #0]
	trame.IDE = 0x0;
 8001436:	2300      	movs	r3, #0
 8001438:	713b      	strb	r3, [r7, #4]
	trame.RTR = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	717b      	strb	r3, [r7, #5]
	trame.DLC = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	71bb      	strb	r3, [r7, #6]
	trame.data[0] = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]
	CAN_sendFrame(trame);
 8001446:	463b      	mov	r3, r7
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	f7ff fb89 	bl	8000b60 <CAN_sendFrame>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001482:	f7ff ff79 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f003 fa49 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff fc85 	bl	8000d98 <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800149c:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 80014a0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014a4:	20004154 	.word	0x20004154

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>
	...

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_Init+0x40>)
 80014b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_Init+0x40>)
 80014c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x40>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f8d8 	bl	800168a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	200f      	movs	r0, #15
 80014dc:	f7ff feb0 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fe82 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000014 	.word	0x20000014
 8001514:	200003f4 	.word	0x200003f4

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200003f4 	.word	0x200003f4

08001530 <__NVIC_SetPriorityGrouping>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff4c 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b2:	f7ff ff61 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7ff ffb1 	bl	8001624 <NVIC_EncodePriority>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff80 	bl	80015d0 <__NVIC_SetPriority>
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff54 	bl	8001594 <__NVIC_EnableIRQ>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e267      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d075      	beq.n	80017fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	4b88      	ldr	r3, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d00c      	beq.n	8001738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b85      	ldr	r3, [pc, #532]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001726:	2b08      	cmp	r3, #8
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001736:	d10b      	bne.n	8001750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	4b7e      	ldr	r3, [pc, #504]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d05b      	beq.n	80017fc <HAL_RCC_OscConfig+0x108>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d157      	bne.n	80017fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e242      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x74>
 800175a:	4b76      	ldr	r3, [pc, #472]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a75      	ldr	r2, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b70      	ldr	r3, [pc, #448]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6c      	ldr	r2, [pc, #432]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 800178c:	4b69      	ldr	r3, [pc, #420]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a68      	ldr	r2, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b66      	ldr	r3, [pc, #408]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a65      	ldr	r2, [pc, #404]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff feb4 	bl	8001518 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff feb0 	bl	8001518 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e207      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xc0>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fea0 	bl	8001518 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fe9c 	bl	8001518 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1f3      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0xe8>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x152>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c7      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x244>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fe55 	bl	8001518 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fe51 	bl	8001518 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a8      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4925      	ldr	r1, [pc, #148]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x244>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fe34 	bl	8001518 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fe30 	bl	8001518 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e187      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d036      	beq.n	800194c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x248>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fe14 	bl	8001518 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fe10 	bl	8001518 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e167      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_OscConfig+0x240>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x200>
 8001912:	e01b      	b.n	800194c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_OscConfig+0x248>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fdfd 	bl	8001518 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	e00e      	b.n	8001940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff fdf9 	bl	8001518 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d907      	bls.n	8001940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e150      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
 8001934:	40023800 	.word	0x40023800
 8001938:	42470000 	.word	0x42470000
 800193c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ea      	bne.n	8001922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8097 	beq.w	8001a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a7c      	ldr	r2, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x474>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b74      	ldr	r3, [pc, #464]	; (8001b68 <HAL_RCC_OscConfig+0x474>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a73      	ldr	r2, [pc, #460]	; (8001b68 <HAL_RCC_OscConfig+0x474>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fdb9 	bl	8001518 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fdb5 	bl	8001518 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e10c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x474>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x2ea>
 80019d0:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x324>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x30c>
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a5e      	ldr	r2, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a5b      	ldr	r2, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0x324>
 8001a00:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	4b55      	ldr	r3, [pc, #340]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a54      	ldr	r2, [pc, #336]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 0304 	bic.w	r3, r3, #4
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fd7a 	bl	8001518 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff fd76 	bl	8001518 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0cb      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ee      	beq.n	8001a28 <HAL_RCC_OscConfig+0x334>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fd64 	bl	8001518 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fd60 	bl	8001518 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0b5      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ee      	bne.n	8001a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a1 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d05c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d141      	bne.n	8001b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fd34 	bl	8001518 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fd30 	bl	8001518 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e087      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	019b      	lsls	r3, r3, #6
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	3b01      	subs	r3, #1
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	491b      	ldr	r1, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fd09 	bl	8001518 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fd05 	bl	8001518 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e05c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x416>
 8001b28:	e054      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fcf2 	bl	8001518 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff fcee 	bl	8001518 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e045      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x444>
 8001b56:	e03d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e038      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x4ec>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d028      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d121      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d11a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0cc      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d90c      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	494d      	ldr	r1, [pc, #308]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d044      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d119      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e067      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4934      	ldr	r1, [pc, #208]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fc20 	bl	8001518 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff fc1c 	bl	8001518 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e04f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d20c      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e032      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4916      	ldr	r1, [pc, #88]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6a:	f000 f821 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490a      	ldr	r1, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa58 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00
 8001da0:	40023800 	.word	0x40023800
 8001da4:	08004c88 	.word	0x08004c88
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000010 	.word	0x20000010

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db4:	b094      	sub	sp, #80	; 0x50
 8001db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc8:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d00d      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	f200 80e1 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x3a>
 8001de2:	e0db      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001de8:	e0db      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dee:	e0d8      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e22:	4622      	mov	r2, r4
 8001e24:	462b      	mov	r3, r5
 8001e26:	f04f 0000 	mov.w	r0, #0
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	0159      	lsls	r1, r3, #5
 8001e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e34:	0150      	lsls	r0, r2, #5
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	1a51      	subs	r1, r2, r1
 8001e3e:	6139      	str	r1, [r7, #16]
 8001e40:	4629      	mov	r1, r5
 8001e42:	eb63 0301 	sbc.w	r3, r3, r1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e54:	4659      	mov	r1, fp
 8001e56:	018b      	lsls	r3, r1, #6
 8001e58:	4651      	mov	r1, sl
 8001e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5e:	4651      	mov	r1, sl
 8001e60:	018a      	lsls	r2, r1, #6
 8001e62:	4651      	mov	r1, sl
 8001e64:	ebb2 0801 	subs.w	r8, r2, r1
 8001e68:	4659      	mov	r1, fp
 8001e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e82:	4690      	mov	r8, r2
 8001e84:	4699      	mov	r9, r3
 8001e86:	4623      	mov	r3, r4
 8001e88:	eb18 0303 	adds.w	r3, r8, r3
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	462b      	mov	r3, r5
 8001e90:	eb49 0303 	adc.w	r3, r9, r3
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	024b      	lsls	r3, r1, #9
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eac:	4621      	mov	r1, r4
 8001eae:	024a      	lsls	r2, r1, #9
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ec0:	f7fe f986 	bl	80001d0 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ecc:	e058      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4611      	mov	r1, r2
 8001eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ee8:	4642      	mov	r2, r8
 8001eea:	464b      	mov	r3, r9
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f04f 0100 	mov.w	r1, #0
 8001ef4:	0159      	lsls	r1, r3, #5
 8001ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efa:	0150      	lsls	r0, r2, #5
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4641      	mov	r1, r8
 8001f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f06:	4649      	mov	r1, r9
 8001f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f20:	ebb2 040a 	subs.w	r4, r2, sl
 8001f24:	eb63 050b 	sbc.w	r5, r3, fp
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	00eb      	lsls	r3, r5, #3
 8001f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f36:	00e2      	lsls	r2, r4, #3
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	4643      	mov	r3, r8
 8001f3e:	18e3      	adds	r3, r4, r3
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	464b      	mov	r3, r9
 8001f44:	eb45 0303 	adc.w	r3, r5, r3
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f60:	4621      	mov	r1, r4
 8001f62:	028a      	lsls	r2, r1, #10
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	61fa      	str	r2, [r7, #28]
 8001f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f74:	f7fe f92c 	bl	80001d0 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3750      	adds	r7, #80	; 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff0 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	08004c98 	.word	0x08004c98

08001ffc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	220f      	movs	r2, #15
 800200a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCC_GetClockConfig+0x60>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e041      	b.n	80020f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f839 	bl	80020fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3304      	adds	r3, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 f9d8 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04e      	b.n	80021ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d01d      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_TIM_Base_Start_IT+0xc8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x80>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40001800 	.word	0x40001800

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8ee 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8e0 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8f1 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8c4 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8b6 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8c7 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f89a 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f88c 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f89d 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f870 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f862 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f873 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe ff04 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f902 	bl	80025a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f838 	bl	8002440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0220 	mvn.w	r2, #32
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8cc 	bl	8002594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a40      	ldr	r2, [pc, #256]	; (8002568 <TIM_Base_SetConfig+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d00f      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	; (800256c <TIM_Base_SetConfig+0x118>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00b      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <TIM_Base_SetConfig+0x11c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <TIM_Base_SetConfig+0x120>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d003      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <TIM_Base_SetConfig+0x124>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <TIM_Base_SetConfig+0x114>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b4:	d027      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2c      	ldr	r2, [pc, #176]	; (800256c <TIM_Base_SetConfig+0x118>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d023      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <TIM_Base_SetConfig+0x11c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <TIM_Base_SetConfig+0x120>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a29      	ldr	r2, [pc, #164]	; (8002578 <TIM_Base_SetConfig+0x124>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d017      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <TIM_Base_SetConfig+0x128>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <TIM_Base_SetConfig+0x12c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00f      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <TIM_Base_SetConfig+0x130>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <TIM_Base_SetConfig+0x134>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <TIM_Base_SetConfig+0x138>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <TIM_Base_SetConfig+0x13c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <TIM_Base_SetConfig+0x114>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0xf8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <TIM_Base_SetConfig+0x124>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800
 8002588:	40001800 	.word	0x40001800
 800258c:	40001c00 	.word	0x40001c00
 8002590:	40002000 	.word	0x40002000

08002594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ce:	2b84      	cmp	r3, #132	; 0x84
 80025d0:	d005      	beq.n	80025de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80025d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	3303      	adds	r3, #3
 80025dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f2:	f3ef 8305 	mrs	r3, IPSR
 80025f6:	607b      	str	r3, [r7, #4]
  return(result);
 80025f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002614:	f000 ff00 	bl	8003418 <vTaskStartScheduler>
  
  return osOK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}

0800261e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800261e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002620:	b089      	sub	sp, #36	; 0x24
 8002622:	af04      	add	r7, sp, #16
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <osThreadCreate+0x54>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685c      	ldr	r4, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681d      	ldr	r5, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691e      	ldr	r6, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ffb6 	bl	80025bc <makeFreeRtosPriority>
 8002650:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800265a:	9202      	str	r2, [sp, #8]
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9100      	str	r1, [sp, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4632      	mov	r2, r6
 8002664:	4629      	mov	r1, r5
 8002666:	4620      	mov	r0, r4
 8002668:	f000 fcf8 	bl	800305c <xTaskCreateStatic>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e01c      	b.n	80026ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685c      	ldr	r4, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800267e:	b29e      	uxth	r6, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff98 	bl	80025bc <makeFreeRtosPriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4632      	mov	r2, r6
 800269a:	4629      	mov	r1, r5
 800269c:	4620      	mov	r0, r4
 800269e:	f000 fd3a 	bl	8003116 <xTaskCreate>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026b6 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80026ba:	f001 fabf 	bl	8003c3c <xTaskGetCurrentTaskHandle>
 80026be:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <osDelay+0x16>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	e000      	b.n	80026dc <osDelay+0x18>
 80026da:	2301      	movs	r3, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fe67 	bl	80033b0 <vTaskDelay>
  
  return osOK;
 80026e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80026fe:	f7ff ff75 	bl	80025ec <inHandlerMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01c      	beq.n	8002742 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	f107 0208 	add.w	r2, r7, #8
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	2201      	movs	r2, #1
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f001 fb7b 	bl	8003e14 <xTaskGenericNotifyFromISR>
 800271e:	4603      	mov	r3, r0
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <osSignalSet+0x3e>
      return 0x80000000;
 8002724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002728:	e019      	b.n	800275e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <osSignalSet+0x70>
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <osSignalSet+0x7c>)
 8002732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	e00c      	b.n	800275c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002742:	6839      	ldr	r1, [r7, #0]
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	2201      	movs	r2, #1
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f001 faa4 	bl	8003c98 <xTaskGenericNotify>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d002      	beq.n	800275c <osSignalSet+0x70>
    return 0x80000000;
 8002756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800275a:	e000      	b.n	800275e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800275c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <osMessageCreate+0x36>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2400      	movs	r4, #0
 8002798:	9400      	str	r4, [sp, #0]
 800279a:	f000 f99f 	bl	8002adc <xQueueGenericCreateStatic>
 800279e:	4603      	mov	r3, r0
 80027a0:	e008      	b.n	80027b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	f000 fa0d 	bl	8002bcc <xQueueGenericCreate>
 80027b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}

080027bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	617b      	str	r3, [r7, #20]
    return event;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	461c      	mov	r4, r3
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027ea:	e054      	b.n	8002896 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d103      	bne.n	8002804 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e009      	b.n	8002818 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <osMessageGet+0x5c>
      ticks = 1;
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002818:	f7ff fee8 	bl	80025ec <inHandlerMode>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01c      	beq.n	800285c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002822:	f107 0220 	add.w	r2, r7, #32
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	68b8      	ldr	r0, [r7, #8]
 8002830:	f000 fb06 	bl	8002e40 <xQueueReceiveFromISR>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800283a:	2310      	movs	r3, #16
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e001      	b.n	8002844 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <osMessageGet+0xca>
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <osMessageGet+0xe4>)
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	e014      	b.n	8002886 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	3304      	adds	r3, #4
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	68b8      	ldr	r0, [r7, #8]
 8002868:	f000 fa0a 	bl	8002c80 <xQueueReceive>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002872:	2310      	movs	r3, #16
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e006      	b.n	8002886 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <osMessageGet+0xc6>
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <osMessageGet+0xc8>
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	461c      	mov	r4, r3
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002892:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	372c      	adds	r7, #44	; 0x2c
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0208 	add.w	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f103 0208 	add.w	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d103      	bne.n	8002966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e00c      	b.n	8002980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3308      	adds	r3, #8
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e002      	b.n	8002974 <vListInsert+0x2e>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d2f6      	bcs.n	800296e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d103      	bne.n	80029ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a36:	f001 fc65 	bl	8004304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	3b01      	subs	r3, #1
 8002a68:	68f9      	ldr	r1, [r7, #12]
 8002a6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	441a      	add	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	22ff      	movs	r2, #255	; 0xff
 8002a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	22ff      	movs	r2, #255	; 0xff
 8002a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d114      	bne.n	8002ab6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01a      	beq.n	8002aca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3310      	adds	r3, #16
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ff0f 	bl	80038bc <xTaskRemoveFromEventList>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <xQueueGenericReset+0xcc>)
 8002aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	e009      	b.n	8002aca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3310      	adds	r3, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fef2 	bl	80028a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3324      	adds	r3, #36	; 0x24
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff feed 	bl	80028a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aca:	f001 fc4b 	bl	8004364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <xQueueGenericCreateStatic+0x52>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <xQueueGenericCreateStatic+0x56>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <xQueueGenericCreateStatic+0x58>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	623b      	str	r3, [r7, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <xQueueGenericCreateStatic+0x7e>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericCreateStatic+0x82>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericCreateStatic+0x84>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61fb      	str	r3, [r7, #28]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b7a:	2348      	movs	r3, #72	; 0x48
 8002b7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b48      	cmp	r3, #72	; 0x48
 8002b82:	d00a      	beq.n	8002b9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61bb      	str	r3, [r7, #24]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f83f 	bl	8002c40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	613b      	str	r3, [r7, #16]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fc9f 	bl	8004548 <pvPortMalloc>
 8002c0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d011      	beq.n	8002c36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3348      	adds	r3, #72	; 0x48
 8002c1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f805 	bl	8002c40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c36:	69bb      	ldr	r3, [r7, #24]
	}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e002      	b.n	8002c62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c6e:	2101      	movs	r1, #1
 8002c70:	69b8      	ldr	r0, [r7, #24]
 8002c72:	f7ff fecb 	bl	8002a0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	; 0x30
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <xQueueReceive+0x30>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	623b      	str	r3, [r7, #32]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <xQueueReceive+0x3e>
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <xQueueReceive+0x42>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <xQueueReceive+0x44>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueReceive+0x5e>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	61fb      	str	r3, [r7, #28]
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cde:	f000 ffbd 	bl	8003c5c <xTaskGetSchedulerState>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <xQueueReceive+0x6e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <xQueueReceive+0x72>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <xQueueReceive+0x74>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xQueueReceive+0x8e>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61bb      	str	r3, [r7, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d0e:	f001 faf9 	bl	8004304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d22:	f000 f90d 	bl	8002f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	1e5a      	subs	r2, r3, #1
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00f      	beq.n	8002d56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	3310      	adds	r3, #16
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fdbe 	bl	80038bc <xTaskRemoveFromEventList>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <xQueueReceive+0x1bc>)
 8002d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d56:	f001 fb05 	bl	8004364 <vPortExitCritical>
				return pdPASS;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e069      	b.n	8002e32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d64:	f001 fafe 	bl	8004364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e062      	b.n	8002e32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe02 	bl	8003980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d80:	f001 faf0 	bl	8004364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d84:	f000 fbb2 	bl	80034ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d88:	f001 fabc 	bl	8004304 <vPortEnterCritical>
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d98:	d103      	bne.n	8002da2 <xQueueReceive+0x122>
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d103      	bne.n	8002db8 <xQueueReceive+0x138>
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db8:	f001 fad4 	bl	8004364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dbc:	1d3a      	adds	r2, r7, #4
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fdf1 	bl	80039ac <xTaskCheckForTimeOut>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d123      	bne.n	8002e18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd2:	f000 f92d 	bl	8003030 <prvIsQueueEmpty>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d017      	beq.n	8002e0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fd45 	bl	8003874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dec:	f000 f8ce 	bl	8002f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002df0:	f000 fb8a 	bl	8003508 <xTaskResumeAll>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d189      	bne.n	8002d0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <xQueueReceive+0x1bc>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	e780      	b.n	8002d0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e0e:	f000 f8bd 	bl	8002f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e12:	f000 fb79 	bl	8003508 <xTaskResumeAll>
 8002e16:	e77a      	b.n	8002d0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1a:	f000 f8b7 	bl	8002f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e1e:	f000 fb73 	bl	8003508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e24:	f000 f904 	bl	8003030 <prvIsQueueEmpty>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f43f af6f 	beq.w	8002d0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3730      	adds	r7, #48	; 0x30
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	; 0x38
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	623b      	str	r3, [r7, #32]
}
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <xQueueReceiveFromISR+0x3a>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueReceiveFromISR+0x3e>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueReceiveFromISR+0x40>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61fb      	str	r3, [r7, #28]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e9a:	f001 fb15 	bl	80044c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	61ba      	str	r2, [r7, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02f      	beq.n	8002f26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed4:	f000 f834 	bl	8002f40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d112      	bne.n	8002f10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fce0 	bl	80038bc <xTaskRemoveFromEventList>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e007      	b.n	8002f20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f14:	3301      	adds	r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	b25a      	sxtb	r2, r3
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
 8002f24:	e001      	b.n	8002f2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3738      	adds	r7, #56	; 0x38
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d303      	bcc.n	8002f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f001 fcf2 	bl	8004968 <memcpy>
	}
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f94:	f001 f9b6 	bl	8004304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa0:	e011      	b.n	8002fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fc84 	bl	80038bc <xTaskRemoveFromEventList>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fba:	f000 fd59 	bl	8003a70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dce9      	bgt.n	8002fa2 <prvUnlockQueue+0x16>
 8002fce:	e000      	b.n	8002fd2 <prvUnlockQueue+0x46>
					break;
 8002fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fda:	f001 f9c3 	bl	8004364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fde:	f001 f991 	bl	8004304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fea:	e011      	b.n	8003010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fc5f 	bl	80038bc <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003004:	f000 fd34 	bl	8003a70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	3b01      	subs	r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003014:	2b00      	cmp	r3, #0
 8003016:	dce9      	bgt.n	8002fec <prvUnlockQueue+0x60>
 8003018:	e000      	b.n	800301c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800301a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	22ff      	movs	r2, #255	; 0xff
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003024:	f001 f99e 	bl	8004364 <vPortExitCritical>
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003038:	f001 f964 	bl	8004304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003044:	2301      	movs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e001      	b.n	800304e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800304e:	f001 f989 	bl	8004364 <vPortExitCritical>

	return xReturn;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af04      	add	r7, sp, #16
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	61fb      	str	r3, [r7, #28]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030a2:	23b4      	movs	r3, #180	; 0xb4
 80030a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2bb4      	cmp	r3, #180	; 0xb4
 80030aa:	d00a      	beq.n	80030c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61bb      	str	r3, [r7, #24]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01e      	beq.n	8003108 <xTaskCreateStatic+0xac>
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030e2:	2300      	movs	r3, #0
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f850 	bl	80031a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003102:	f000 f8eb 	bl	80032dc <prvAddNewTaskToReadyList>
 8003106:	e001      	b.n	800310c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800310c:	697b      	ldr	r3, [r7, #20]
	}
 800310e:	4618      	mov	r0, r3
 8003110:	3728      	adds	r7, #40	; 0x28
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08c      	sub	sp, #48	; 0x30
 800311a:	af04      	add	r7, sp, #16
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fa0c 	bl	8004548 <pvPortMalloc>
 8003130:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003138:	20b4      	movs	r0, #180	; 0xb4
 800313a:	f001 fa05 	bl	8004548 <pvPortMalloc>
 800313e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
 800314c:	e005      	b.n	800315a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f001 fac6 	bl	80046e0 <vPortFree>
 8003154:	e001      	b.n	800315a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	2300      	movs	r3, #0
 800316c:	9303      	str	r3, [sp, #12]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	9302      	str	r3, [sp, #8]
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f80e 	bl	80031a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003184:	69f8      	ldr	r0, [r7, #28]
 8003186:	f000 f8a9 	bl	80032dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800318a:	2301      	movs	r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	e002      	b.n	8003196 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003194:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003196:	69bb      	ldr	r3, [r7, #24]
	}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031b8:	3b01      	subs	r3, #1
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	617b      	str	r3, [r7, #20]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01f      	beq.n	800322e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e012      	b.n	800321a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	7819      	ldrb	r1, [r3, #0]
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	3334      	adds	r3, #52	; 0x34
 8003204:	460a      	mov	r2, r1
 8003206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	3301      	adds	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d9e9      	bls.n	80031f4 <prvInitialiseNewTask+0x54>
 8003220:	e000      	b.n	8003224 <prvInitialiseNewTask+0x84>
			{
				break;
 8003222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322c:	e003      	b.n	8003236 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2b06      	cmp	r3, #6
 800323a:	d901      	bls.n	8003240 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800323c:	2306      	movs	r3, #6
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	2200      	movs	r2, #0
 8003250:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	3304      	adds	r3, #4
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fb44 	bl	80028e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3318      	adds	r3, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fb3f 	bl	80028e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	f1c3 0207 	rsb	r2, r3, #7
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	334c      	adds	r3, #76	; 0x4c
 8003290:	2260      	movs	r2, #96	; 0x60
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fb75 	bl	8004984 <memset>
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <prvInitialiseNewTask+0x130>)
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <prvInitialiseNewTask+0x134>)
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <prvInitialiseNewTask+0x138>)
 80032aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	69b8      	ldr	r0, [r7, #24]
 80032b2:	f000 fef9 	bl	80040a8 <pxPortInitialiseStack>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	08004cc0 	.word	0x08004cc0
 80032d4:	08004ce0 	.word	0x08004ce0
 80032d8:	08004ca0 	.word	0x08004ca0

080032dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032e4:	f001 f80e 	bl	8004304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032e8:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <prvAddNewTaskToReadyList+0xb8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4a29      	ldr	r2, [pc, #164]	; (8003394 <prvAddNewTaskToReadyList+0xb8>)
 80032f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <prvAddNewTaskToReadyList+0xbc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032fa:	4a27      	ldr	r2, [pc, #156]	; (8003398 <prvAddNewTaskToReadyList+0xbc>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <prvAddNewTaskToReadyList+0xb8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d110      	bne.n	800332a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003308:	f000 fbd6 	bl	8003ab8 <prvInitialiseTaskLists>
 800330c:	e00d      	b.n	800332a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <prvAddNewTaskToReadyList+0xc0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <prvAddNewTaskToReadyList+0xbc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d802      	bhi.n	800332a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <prvAddNewTaskToReadyList+0xbc>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <prvAddNewTaskToReadyList+0xc4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <prvAddNewTaskToReadyList+0xc4>)
 8003332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <prvAddNewTaskToReadyList+0xc8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <prvAddNewTaskToReadyList+0xc8>)
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <prvAddNewTaskToReadyList+0xcc>)
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7ff face 	bl	80028fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003362:	f000 ffff 	bl	8004364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <prvAddNewTaskToReadyList+0xc0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <prvAddNewTaskToReadyList+0xbc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <prvAddNewTaskToReadyList+0xd0>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200004f8 	.word	0x200004f8
 8003398:	200003f8 	.word	0x200003f8
 800339c:	20000504 	.word	0x20000504
 80033a0:	20000514 	.word	0x20000514
 80033a4:	20000500 	.word	0x20000500
 80033a8:	200003fc 	.word	0x200003fc
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d017      	beq.n	80033f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <vTaskDelay+0x60>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <vTaskDelay+0x30>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60bb      	str	r3, [r7, #8]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033e0:	f000 f884 	bl	80034ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033e4:	2100      	movs	r1, #0
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fdf8 	bl	8003fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033ec:	f000 f88c 	bl	8003508 <xTaskResumeAll>
 80033f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <vTaskDelay+0x64>)
 80033fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000520 	.word	0x20000520
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003426:	463a      	mov	r2, r7
 8003428:	1d39      	adds	r1, r7, #4
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc6a 	bl	8000d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2300      	movs	r3, #0
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	460a      	mov	r2, r1
 8003446:	4921      	ldr	r1, [pc, #132]	; (80034cc <vTaskStartScheduler+0xb4>)
 8003448:	4821      	ldr	r0, [pc, #132]	; (80034d0 <vTaskStartScheduler+0xb8>)
 800344a:	f7ff fe07 	bl	800305c <xTaskCreateStatic>
 800344e:	4603      	mov	r3, r0
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <vTaskStartScheduler+0xbc>)
 8003452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <vTaskStartScheduler+0xbc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e001      	b.n	8003466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11b      	bne.n	80034a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	613b      	str	r3, [r7, #16]
}
 800347e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <vTaskStartScheduler+0xc0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	334c      	adds	r3, #76	; 0x4c
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <vTaskStartScheduler+0xc4>)
 8003488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <vTaskStartScheduler+0xc8>)
 800348c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <vTaskStartScheduler+0xcc>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <vTaskStartScheduler+0xd0>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800349e:	f000 fe8f 	bl	80041c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034a2:	e00e      	b.n	80034c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d10a      	bne.n	80034c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <vTaskStartScheduler+0xa8>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	08004c80 	.word	0x08004c80
 80034d0:	08003a89 	.word	0x08003a89
 80034d4:	2000051c 	.word	0x2000051c
 80034d8:	200003f8 	.word	0x200003f8
 80034dc:	2000001c 	.word	0x2000001c
 80034e0:	20000518 	.word	0x20000518
 80034e4:	20000504 	.word	0x20000504
 80034e8:	200004fc 	.word	0x200004fc

080034ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <vTaskSuspendAll+0x18>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a03      	ldr	r2, [pc, #12]	; (8003504 <vTaskSuspendAll+0x18>)
 80034f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	20000520 	.word	0x20000520

08003508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <xTaskResumeAll+0x114>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <xTaskResumeAll+0x2c>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	603b      	str	r3, [r7, #0]
}
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003534:	f000 fee6 	bl	8004304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <xTaskResumeAll+0x114>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3b01      	subs	r3, #1
 800353e:	4a37      	ldr	r2, [pc, #220]	; (800361c <xTaskResumeAll+0x114>)
 8003540:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <xTaskResumeAll+0x114>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d161      	bne.n	800360e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800354a:	4b35      	ldr	r3, [pc, #212]	; (8003620 <xTaskResumeAll+0x118>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d05d      	beq.n	800360e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003552:	e02e      	b.n	80035b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003554:	4b33      	ldr	r3, [pc, #204]	; (8003624 <xTaskResumeAll+0x11c>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3318      	adds	r3, #24
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fa29 	bl	80029b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fa24 	bl	80029b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <xTaskResumeAll+0x120>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <xTaskResumeAll+0x120>)
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <xTaskResumeAll+0x124>)
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7ff f9b0 	bl	80028fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <xTaskResumeAll+0x128>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <xTaskResumeAll+0x12c>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <xTaskResumeAll+0x11c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1cc      	bne.n	8003554 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035c0:	f000 fb1c 	bl	8003bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <xTaskResumeAll+0x130>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035d0:	f000 f836 	bl	8003640 <xTaskIncrementTick>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <xTaskResumeAll+0x12c>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f1      	bne.n	80035d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <xTaskResumeAll+0x130>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <xTaskResumeAll+0x12c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <xTaskResumeAll+0x134>)
 8003600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800360e:	f000 fea9 	bl	8004364 <vPortExitCritical>

	return xAlreadyYielded;
 8003612:	68bb      	ldr	r3, [r7, #8]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000520 	.word	0x20000520
 8003620:	200004f8 	.word	0x200004f8
 8003624:	200004b8 	.word	0x200004b8
 8003628:	20000500 	.word	0x20000500
 800362c:	200003fc 	.word	0x200003fc
 8003630:	200003f8 	.word	0x200003f8
 8003634:	2000050c 	.word	0x2000050c
 8003638:	20000508 	.word	0x20000508
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800364a:	4b4e      	ldr	r3, [pc, #312]	; (8003784 <xTaskIncrementTick+0x144>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 808e 	bne.w	8003770 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003654:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <xTaskIncrementTick+0x148>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800365c:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <xTaskIncrementTick+0x148>)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d120      	bne.n	80036aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003668:	4b48      	ldr	r3, [pc, #288]	; (800378c <xTaskIncrementTick+0x14c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <xTaskIncrementTick+0x48>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	603b      	str	r3, [r7, #0]
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xTaskIncrementTick+0x46>
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <xTaskIncrementTick+0x14c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <xTaskIncrementTick+0x150>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a3e      	ldr	r2, [pc, #248]	; (800378c <xTaskIncrementTick+0x14c>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4a3e      	ldr	r2, [pc, #248]	; (8003790 <xTaskIncrementTick+0x150>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <xTaskIncrementTick+0x154>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <xTaskIncrementTick+0x154>)
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	f000 faa9 	bl	8003bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <xTaskIncrementTick+0x158>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d348      	bcc.n	8003746 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b4:	4b35      	ldr	r3, [pc, #212]	; (800378c <xTaskIncrementTick+0x14c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <xTaskIncrementTick+0x158>)
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c4:	601a      	str	r2, [r3, #0]
					break;
 80036c6:	e03e      	b.n	8003746 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c8:	4b30      	ldr	r3, [pc, #192]	; (800378c <xTaskIncrementTick+0x14c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d203      	bcs.n	80036e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036e0:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <xTaskIncrementTick+0x158>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036e6:	e02e      	b.n	8003746 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f963 	bl	80029b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3318      	adds	r3, #24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f95a 	bl	80029b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <xTaskIncrementTick+0x15c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	4a22      	ldr	r2, [pc, #136]	; (800379c <xTaskIncrementTick+0x15c>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <xTaskIncrementTick+0x160>)
 8003724:	441a      	add	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7ff f8e6 	bl	80028fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <xTaskIncrementTick+0x164>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d3b9      	bcc.n	80036b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003744:	e7b6      	b.n	80036b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <xTaskIncrementTick+0x164>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4914      	ldr	r1, [pc, #80]	; (80037a0 <xTaskIncrementTick+0x160>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d901      	bls.n	8003762 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <xTaskIncrementTick+0x168>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e004      	b.n	800377a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <xTaskIncrementTick+0x16c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <xTaskIncrementTick+0x16c>)
 8003778:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800377a:	697b      	ldr	r3, [r7, #20]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000520 	.word	0x20000520
 8003788:	200004fc 	.word	0x200004fc
 800378c:	200004b0 	.word	0x200004b0
 8003790:	200004b4 	.word	0x200004b4
 8003794:	20000510 	.word	0x20000510
 8003798:	20000518 	.word	0x20000518
 800379c:	20000500 	.word	0x20000500
 80037a0:	200003fc 	.word	0x200003fc
 80037a4:	200003f8 	.word	0x200003f8
 80037a8:	2000050c 	.word	0x2000050c
 80037ac:	20000508 	.word	0x20000508

080037b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <vTaskSwitchContext+0xac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <vTaskSwitchContext+0xb0>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037c4:	e044      	b.n	8003850 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <vTaskSwitchContext+0xb0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <vTaskSwitchContext+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037da:	7afb      	ldrb	r3, [r7, #11]
 80037dc:	f1c3 031f 	rsb	r3, r3, #31
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <vTaskSwitchContext+0xb8>)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <vTaskSwitchContext+0x5c>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	607b      	str	r3, [r7, #4]
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <vTaskSwitchContext+0x5a>
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <vTaskSwitchContext+0xb8>)
 8003818:	4413      	add	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	3308      	adds	r3, #8
 800382e:	429a      	cmp	r2, r3
 8003830:	d104      	bne.n	800383c <vTaskSwitchContext+0x8c>
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <vTaskSwitchContext+0xbc>)
 8003844:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <vTaskSwitchContext+0xbc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	334c      	adds	r3, #76	; 0x4c
 800384c:	4a08      	ldr	r2, [pc, #32]	; (8003870 <vTaskSwitchContext+0xc0>)
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000520 	.word	0x20000520
 8003860:	2000050c 	.word	0x2000050c
 8003864:	20000500 	.word	0x20000500
 8003868:	200003fc 	.word	0x200003fc
 800386c:	200003f8 	.word	0x200003f8
 8003870:	2000001c 	.word	0x2000001c

08003874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <vTaskPlaceOnEventList+0x44>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3318      	adds	r3, #24
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff f84f 	bl	8002946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a8:	2101      	movs	r1, #1
 80038aa:	6838      	ldr	r0, [r7, #0]
 80038ac:	f000 fb96 	bl	8003fdc <prvAddCurrentTaskToDelayedList>
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200003f8 	.word	0x200003f8

080038bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
}
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	3318      	adds	r3, #24
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff f863 	bl	80029b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <xTaskRemoveFromEventList+0xac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11c      	bne.n	8003934 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f85a 	bl	80029b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <xTaskRemoveFromEventList+0xb0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <xTaskRemoveFromEventList+0xb0>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <xTaskRemoveFromEventList+0xb4>)
 8003924:	441a      	add	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fe ffe6 	bl	80028fe <vListInsertEnd>
 8003932:	e005      	b.n	8003940 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3318      	adds	r3, #24
 8003938:	4619      	mov	r1, r3
 800393a:	480e      	ldr	r0, [pc, #56]	; (8003974 <xTaskRemoveFromEventList+0xb8>)
 800393c:	f7fe ffdf 	bl	80028fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <xTaskRemoveFromEventList+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	429a      	cmp	r2, r3
 800394c:	d905      	bls.n	800395a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800394e:	2301      	movs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <xTaskRemoveFromEventList+0xc0>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e001      	b.n	800395e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800395e:	697b      	ldr	r3, [r7, #20]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000520 	.word	0x20000520
 800396c:	20000500 	.word	0x20000500
 8003970:	200003fc 	.word	0x200003fc
 8003974:	200004b8 	.word	0x200004b8
 8003978:	200003f8 	.word	0x200003f8
 800397c:	2000050c 	.word	0x2000050c

08003980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <vTaskInternalSetTimeOutState+0x24>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <vTaskInternalSetTimeOutState+0x28>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20000510 	.word	0x20000510
 80039a8:	200004fc 	.word	0x200004fc

080039ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	613b      	str	r3, [r7, #16]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60fb      	str	r3, [r7, #12]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80039ee:	f000 fc89 	bl	8004304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <xTaskCheckForTimeOut+0xbc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	d102      	bne.n	8003a12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e023      	b.n	8003a5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <xTaskCheckForTimeOut+0xc0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d007      	beq.n	8003a2e <xTaskCheckForTimeOut+0x82>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e015      	b.n	8003a5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d20b      	bcs.n	8003a50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff9b 	bl	8003980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e004      	b.n	8003a5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a5a:	f000 fc83 	bl	8004364 <vPortExitCritical>

	return xReturn;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200004fc 	.word	0x200004fc
 8003a6c:	20000510 	.word	0x20000510

08003a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <vTaskMissedYield+0x14>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	2000050c 	.word	0x2000050c

08003a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a90:	f000 f852 	bl	8003b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <prvIdleTask+0x28>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d9f9      	bls.n	8003a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <prvIdleTask+0x2c>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003aac:	e7f0      	b.n	8003a90 <prvIdleTask+0x8>
 8003aae:	bf00      	nop
 8003ab0:	200003fc 	.word	0x200003fc
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	e00c      	b.n	8003ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <prvInitialiseTaskLists+0x60>)
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fee6 	bl	80028a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b06      	cmp	r3, #6
 8003ae2:	d9ef      	bls.n	8003ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ae4:	480d      	ldr	r0, [pc, #52]	; (8003b1c <prvInitialiseTaskLists+0x64>)
 8003ae6:	f7fe fedd 	bl	80028a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aea:	480d      	ldr	r0, [pc, #52]	; (8003b20 <prvInitialiseTaskLists+0x68>)
 8003aec:	f7fe feda 	bl	80028a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003af0:	480c      	ldr	r0, [pc, #48]	; (8003b24 <prvInitialiseTaskLists+0x6c>)
 8003af2:	f7fe fed7 	bl	80028a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003af6:	480c      	ldr	r0, [pc, #48]	; (8003b28 <prvInitialiseTaskLists+0x70>)
 8003af8:	f7fe fed4 	bl	80028a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003afc:	480b      	ldr	r0, [pc, #44]	; (8003b2c <prvInitialiseTaskLists+0x74>)
 8003afe:	f7fe fed1 	bl	80028a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <prvInitialiseTaskLists+0x78>)
 8003b04:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <prvInitialiseTaskLists+0x64>)
 8003b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvInitialiseTaskLists+0x7c>)
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <prvInitialiseTaskLists+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200003fc 	.word	0x200003fc
 8003b1c:	20000488 	.word	0x20000488
 8003b20:	2000049c 	.word	0x2000049c
 8003b24:	200004b8 	.word	0x200004b8
 8003b28:	200004cc 	.word	0x200004cc
 8003b2c:	200004e4 	.word	0x200004e4
 8003b30:	200004b0 	.word	0x200004b0
 8003b34:	200004b4 	.word	0x200004b4

08003b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b3e:	e019      	b.n	8003b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b40:	f000 fbe0 	bl	8004304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <prvCheckTasksWaitingTermination+0x50>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe ff31 	bl	80029b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <prvCheckTasksWaitingTermination+0x54>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <prvCheckTasksWaitingTermination+0x54>)
 8003b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b6a:	f000 fbfb 	bl	8004364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f810 	bl	8003b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <prvCheckTasksWaitingTermination+0x58>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e1      	bne.n	8003b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200004cc 	.word	0x200004cc
 8003b8c:	200004f8 	.word	0x200004f8
 8003b90:	200004e0 	.word	0x200004e0

08003b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	334c      	adds	r3, #76	; 0x4c
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ff51 	bl	8004a48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fd93 	bl	80046e0 <vPortFree>
				vPortFree( pxTCB );
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fd90 	bl	80046e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bc0:	e018      	b.n	8003bf4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d103      	bne.n	8003bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fd87 	bl	80046e0 <vPortFree>
	}
 8003bd2:	e00f      	b.n	8003bf4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d00a      	beq.n	8003bf4 <prvDeleteTCB+0x60>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60fb      	str	r3, [r7, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <prvDeleteTCB+0x5e>
	}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <prvResetNextTaskUnblockTime+0x38>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvResetNextTaskUnblockTime+0x3c>)
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c14:	e008      	b.n	8003c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <prvResetNextTaskUnblockTime+0x38>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <prvResetNextTaskUnblockTime+0x3c>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	200004b0 	.word	0x200004b0
 8003c38:	20000518 	.word	0x20000518

08003c3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <xTaskGetCurrentTaskHandle+0x1c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003c48:	687b      	ldr	r3, [r7, #4]
	}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200003f8 	.word	0x200003f8

08003c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <xTaskGetSchedulerState+0x34>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	e008      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <xTaskGetSchedulerState+0x38>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e001      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c82:	687b      	ldr	r3, [r7, #4]
	}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	20000504 	.word	0x20000504
 8003c94:	20000520 	.word	0x20000520

08003c98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xTaskGenericNotify+0x30>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	61bb      	str	r3, [r7, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003ccc:	f000 fb1a 	bl	8004304 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003ce6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d82d      	bhi.n	8003d52 <xTaskGenericNotify+0xba>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <xTaskGenericNotify+0x64>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d75 	.word	0x08003d75
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d23 	.word	0x08003d23
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d3d 	.word	0x08003d3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003d20:	e02b      	b.n	8003d7a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003d30:	e023      	b.n	8003d7a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003d3a:	e01e      	b.n	8003d7a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d004      	beq.n	8003d4c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003d4a:	e016      	b.n	8003d7a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003d50:	e013      	b.n	8003d7a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d5c:	d00c      	beq.n	8003d78 <xTaskGenericNotify+0xe0>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	617b      	str	r3, [r7, #20]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xTaskGenericNotify+0xda>
					break;
 8003d74:	bf00      	nop
 8003d76:	e000      	b.n	8003d7a <xTaskGenericNotify+0xe2>

					break;
 8003d78:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d139      	bne.n	8003df4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fe17 	bl	80029b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	409a      	lsls	r2, r3
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <xTaskGenericNotify+0x16c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <xTaskGenericNotify+0x16c>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <xTaskGenericNotify+0x170>)
 8003daa:	441a      	add	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe fda3 	bl	80028fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <xTaskGenericNotify+0x13e>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	613b      	str	r3, [r7, #16]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <xTaskGenericNotify+0x174>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d907      	bls.n	8003df4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <xTaskGenericNotify+0x178>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003df4:	f000 fab6 	bl	8004364 <vPortExitCritical>

		return xReturn;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000500 	.word	0x20000500
 8003e08:	200003fc 	.word	0x200003fc
 8003e0c:	200003f8 	.word	0x200003f8
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08e      	sub	sp, #56	; 0x38
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e44:	f000 fb40 	bl	80044c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8003e4c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	623a      	str	r2, [r7, #32]
 8003e62:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8003e64:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d82f      	bhi.n	8003ef0 <xTaskGenericNotifyFromISR+0xdc>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <xTaskGenericNotifyFromISR+0x84>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003f13 	.word	0x08003f13
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebf 	.word	0x08003ebf
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003ed9 	.word	0x08003ed9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003ebc:	e02c      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003ecc:	e024      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8003ed6:	e01f      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d004      	beq.n	8003eea <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003ee8:	e016      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8003eee:	e013      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efa:	d00c      	beq.n	8003f16 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	61bb      	str	r3, [r7, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <xTaskGenericNotifyFromISR+0x104>
					break;
 8003f16:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d145      	bne.n	8003fac <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	617b      	str	r3, [r7, #20]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <xTaskGenericNotifyFromISR+0x1b0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11c      	bne.n	8003f80 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fd34 	bl	80029b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <xTaskGenericNotifyFromISR+0x1b4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <xTaskGenericNotifyFromISR+0x1b4>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <xTaskGenericNotifyFromISR+0x1b8>)
 8003f70:	441a      	add	r2, r3
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7fe fcc0 	bl	80028fe <vListInsertEnd>
 8003f7e:	e005      	b.n	8003f8c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3318      	adds	r3, #24
 8003f84:	4619      	mov	r1, r3
 8003f86:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <xTaskGenericNotifyFromISR+0x1bc>)
 8003f88:	f7fe fcb9 	bl	80028fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <xTaskGenericNotifyFromISR+0x1c0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d908      	bls.n	8003fac <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xTaskGenericNotifyFromISR+0x1c4>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f383 8811 	msr	BASEPRI, r3
}
 8003fb6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3738      	adds	r7, #56	; 0x38
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000520 	.word	0x20000520
 8003fc8:	20000500 	.word	0x20000500
 8003fcc:	200003fc 	.word	0x200003fc
 8003fd0:	200004b8 	.word	0x200004b8
 8003fd4:	200003f8 	.word	0x200003f8
 8003fd8:	2000050c 	.word	0x2000050c

08003fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fce0 	bl	80029b8 <uxListRemove>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	2201      	movs	r2, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4013      	ands	r3, r2
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004014:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401c:	d10a      	bne.n	8004034 <prvAddCurrentTaskToDelayedList+0x58>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	481a      	ldr	r0, [pc, #104]	; (8004098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800402e:	f7fe fc66 	bl	80028fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004032:	e026      	b.n	8004082 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	429a      	cmp	r2, r3
 800404a:	d209      	bcs.n	8004060 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <prvAddCurrentTaskToDelayedList+0xc0>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7fe fc74 	bl	8002946 <vListInsert>
}
 800405e:	e010      	b.n	8004082 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe fc6a 	bl	8002946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d202      	bcs.n	8004082 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6013      	str	r3, [r2, #0]
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200004fc 	.word	0x200004fc
 8004090:	200003f8 	.word	0x200003f8
 8004094:	20000500 	.word	0x20000500
 8004098:	200004e4 	.word	0x200004e4
 800409c:	200004b4 	.word	0x200004b4
 80040a0:	200004b0 	.word	0x200004b0
 80040a4:	20000518 	.word	0x20000518

080040a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3b04      	subs	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b04      	subs	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <pxPortInitialiseStack+0x64>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b14      	subs	r3, #20
 80040e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b04      	subs	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f06f 0202 	mvn.w	r2, #2
 80040f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b20      	subs	r3, #32
 80040fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040fe:	68fb      	ldr	r3, [r7, #12]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	08004111 	.word	0x08004111

08004110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <prvTaskExitError+0x54>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004122:	d00a      	beq.n	800413a <prvTaskExitError+0x2a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <prvTaskExitError+0x28>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	60bb      	str	r3, [r7, #8]
}
 800414c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800414e:	bf00      	nop
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0fc      	beq.n	8004150 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20000018 	.word	0x20000018
	...

08004170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <pxCurrentTCBConst2>)
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	f380 8809 	msr	PSP, r0
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	4770      	bx	lr
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst2>:
 8004190:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004198:	4808      	ldr	r0, [pc, #32]	; (80041bc <prvPortStartFirstTask+0x24>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8814 	msr	CONTROL, r0
 80041aa:	b662      	cpsie	i
 80041ac:	b661      	cpsie	f
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	df00      	svc	0
 80041b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ba:	bf00      	nop
 80041bc:	e000ed08 	.word	0xe000ed08

080041c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <xPortStartScheduler+0x120>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a46      	ldr	r2, [pc, #280]	; (80042e4 <xPortStartScheduler+0x124>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10a      	bne.n	80041e6 <xPortStartScheduler+0x26>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	613b      	str	r3, [r7, #16]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <xPortStartScheduler+0x120>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3f      	ldr	r2, [pc, #252]	; (80042e8 <xPortStartScheduler+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10a      	bne.n	8004206 <xPortStartScheduler+0x46>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60fb      	str	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <xPortStartScheduler+0x12c>)
 8004208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <xPortStartScheduler+0x130>)
 800422c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <xPortStartScheduler+0x134>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004234:	e009      	b.n	800424a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <xPortStartScheduler+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <xPortStartScheduler+0x134>)
 800423e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d0ef      	beq.n	8004236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004256:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <xPortStartScheduler+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	d00a      	beq.n	8004278 <xPortStartScheduler+0xb8>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <xPortStartScheduler+0x134>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <xPortStartScheduler+0x134>)
 8004280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <xPortStartScheduler+0x134>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <xPortStartScheduler+0x134>)
 800428c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <xPortStartScheduler+0x138>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <xPortStartScheduler+0x138>)
 800429c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <xPortStartScheduler+0x138>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <xPortStartScheduler+0x138>)
 80042a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042ae:	f000 f8dd 	bl	800446c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <xPortStartScheduler+0x13c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042b8:	f000 f8fc 	bl	80044b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <xPortStartScheduler+0x140>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <xPortStartScheduler+0x140>)
 80042c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042c8:	f7ff ff66 	bl	8004198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042cc:	f7ff fa70 	bl	80037b0 <vTaskSwitchContext>
	prvTaskExitError();
 80042d0:	f7ff ff1e 	bl	8004110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	410fc271 	.word	0x410fc271
 80042e8:	410fc270 	.word	0x410fc270
 80042ec:	e000e400 	.word	0xe000e400
 80042f0:	20000524 	.word	0x20000524
 80042f4:	20000528 	.word	0x20000528
 80042f8:	e000ed20 	.word	0xe000ed20
 80042fc:	20000018 	.word	0x20000018
 8004300:	e000ef34 	.word	0xe000ef34

08004304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <vPortEnterCritical+0x58>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <vPortEnterCritical+0x58>)
 8004326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <vPortEnterCritical+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10f      	bne.n	8004350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortEnterCritical+0x5c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <vPortEnterCritical+0x4c>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortEnterCritical+0x4a>
	}
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000018 	.word	0x20000018
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <vPortExitCritical+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vPortExitCritical+0x24>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <vPortExitCritical+0x50>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3b01      	subs	r3, #1
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vPortExitCritical+0x50>)
 8004390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vPortExitCritical+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <vPortExitCritical+0x42>
 800439a:	2300      	movs	r3, #0
 800439c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f383 8811 	msr	BASEPRI, r3
}
 80043a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000018 	.word	0x20000018
	...

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7ff f9de 	bl	80037b0 <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004442:	f7ff f8fd 	bl	8003640 <xTaskIncrementTick>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <SysTick_Handler+0x40>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
}
 800445e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortSetupTimerInterrupt+0x34>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <vPortSetupTimerInterrupt+0x38>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <vPortSetupTimerInterrupt+0x3c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <vPortSetupTimerInterrupt+0x40>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <vPortSetupTimerInterrupt+0x44>)
 800448a:	3b01      	subs	r3, #1
 800448c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <vPortSetupTimerInterrupt+0x34>)
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000e010 	.word	0xe000e010
 80044a4:	e000e018 	.word	0xe000e018
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	10624dd3 	.word	0x10624dd3
 80044b0:	e000e014 	.word	0xe000e014

080044b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044c4 <vPortEnableVFP+0x10>
 80044b8:	6801      	ldr	r1, [r0, #0]
 80044ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044be:	6001      	str	r1, [r0, #0]
 80044c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044c2:	bf00      	nop
 80044c4:	e000ed88 	.word	0xe000ed88

080044c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ce:	f3ef 8305 	mrs	r3, IPSR
 80044d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d914      	bls.n	8004504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <vPortValidateInterruptPriority+0x70>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <vPortValidateInterruptPriority+0x74>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	7afa      	ldrb	r2, [r7, #11]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20a      	bcs.n	8004504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <vPortValidateInterruptPriority+0x78>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <vPortValidateInterruptPriority+0x7c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d90a      	bls.n	800452a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	603b      	str	r3, [r7, #0]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <vPortValidateInterruptPriority+0x60>
	}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e3f0 	.word	0xe000e3f0
 800453c:	20000524 	.word	0x20000524
 8004540:	e000ed0c 	.word	0xe000ed0c
 8004544:	20000528 	.word	0x20000528

08004548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004554:	f7fe ffca 	bl	80034ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004558:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <pvPortMalloc+0x180>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004560:	f000 f920 	bl	80047a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <pvPortMalloc+0x184>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8093 	bne.w	8004698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01d      	beq.n	80045b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004578:	2208      	movs	r2, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	3308      	adds	r3, #8
 8004592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <pvPortMalloc+0x6c>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617b      	str	r3, [r7, #20]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d06e      	beq.n	8004698 <pvPortMalloc+0x150>
 80045ba:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <pvPortMalloc+0x188>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d869      	bhi.n	8004698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045c4:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <pvPortMalloc+0x18c>)
 80045c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <pvPortMalloc+0x18c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ce:	e004      	b.n	80045da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d903      	bls.n	80045ec <pvPortMalloc+0xa4>
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f1      	bne.n	80045d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ec:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <pvPortMalloc+0x180>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d050      	beq.n	8004698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2208      	movs	r2, #8
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	2308      	movs	r3, #8
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	429a      	cmp	r2, r3
 8004616:	d91f      	bls.n	8004658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <pvPortMalloc+0xf8>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	613b      	str	r3, [r7, #16]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004652:	69b8      	ldr	r0, [r7, #24]
 8004654:	f000 f908 	bl	8004868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <pvPortMalloc+0x188>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <pvPortMalloc+0x188>)
 8004664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <pvPortMalloc+0x188>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <pvPortMalloc+0x190>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d203      	bcs.n	800467a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <pvPortMalloc+0x188>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <pvPortMalloc+0x190>)
 8004678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <pvPortMalloc+0x184>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	431a      	orrs	r2, r3
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <pvPortMalloc+0x194>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a11      	ldr	r2, [pc, #68]	; (80046dc <pvPortMalloc+0x194>)
 8004696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004698:	f7fe ff36 	bl	8003508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <pvPortMalloc+0x174>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <pvPortMalloc+0x172>
	return pvReturn;
 80046bc:	69fb      	ldr	r3, [r7, #28]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	; 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20004134 	.word	0x20004134
 80046cc:	20004148 	.word	0x20004148
 80046d0:	20004138 	.word	0x20004138
 80046d4:	2000412c 	.word	0x2000412c
 80046d8:	2000413c 	.word	0x2000413c
 80046dc:	20004140 	.word	0x20004140

080046e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04d      	beq.n	800478e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046f2:	2308      	movs	r3, #8
 80046f4:	425b      	negs	r3, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vPortFree+0xb8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <vPortFree+0x44>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <vPortFree+0x62>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60bb      	str	r3, [r7, #8]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <vPortFree+0xb8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01e      	beq.n	800478e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11a      	bne.n	800478e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <vPortFree+0xb8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004768:	f7fe fec0 	bl	80034ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <vPortFree+0xbc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4413      	add	r3, r2
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <vPortFree+0xbc>)
 8004778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800477a:	6938      	ldr	r0, [r7, #16]
 800477c:	f000 f874 	bl	8004868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <vPortFree+0xc0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <vPortFree+0xc0>)
 8004788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800478a:	f7fe febd 	bl	8003508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20004148 	.word	0x20004148
 800479c:	20004138 	.word	0x20004138
 80047a0:	20004144 	.word	0x20004144

080047a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <prvHeapInit+0xac>)
 80047b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3307      	adds	r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <prvHeapInit+0xac>)
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <prvHeapInit+0xb0>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <prvHeapInit+0xb0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047f0:	2208      	movs	r2, #8
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a15      	ldr	r2, [pc, #84]	; (8004858 <prvHeapInit+0xb4>)
 8004804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <prvHeapInit+0xb4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <prvHeapInit+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <prvHeapInit+0xb4>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <prvHeapInit+0xb8>)
 8004832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <prvHeapInit+0xbc>)
 800483a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <prvHeapInit+0xc0>)
 800483e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	2000052c 	.word	0x2000052c
 8004854:	2000412c 	.word	0x2000412c
 8004858:	20004134 	.word	0x20004134
 800485c:	2000413c 	.word	0x2000413c
 8004860:	20004138 	.word	0x20004138
 8004864:	20004148 	.word	0x20004148

08004868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <prvInsertBlockIntoFreeList+0xac>)
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <prvInsertBlockIntoFreeList+0x14>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d8f7      	bhi.n	8004876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d108      	bne.n	80048aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d118      	bne.n	80048f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <prvInsertBlockIntoFreeList+0xb0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d00d      	beq.n	80048e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e008      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvInsertBlockIntoFreeList+0xb0>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e003      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d002      	beq.n	8004906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000412c 	.word	0x2000412c
 8004918:	20004134 	.word	0x20004134

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4d0d      	ldr	r5, [pc, #52]	; (8004954 <__libc_init_array+0x38>)
 8004920:	4c0d      	ldr	r4, [pc, #52]	; (8004958 <__libc_init_array+0x3c>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	2600      	movs	r6, #0
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	4d0b      	ldr	r5, [pc, #44]	; (800495c <__libc_init_array+0x40>)
 800492e:	4c0c      	ldr	r4, [pc, #48]	; (8004960 <__libc_init_array+0x44>)
 8004930:	f000 f8f2 	bl	8004b18 <_init>
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	2600      	movs	r6, #0
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	08004d08 	.word	0x08004d08
 8004958:	08004d08 	.word	0x08004d08
 800495c:	08004d08 	.word	0x08004d08
 8004960:	08004d0c 	.word	0x08004d0c

08004964 <__retarget_lock_acquire_recursive>:
 8004964:	4770      	bx	lr

08004966 <__retarget_lock_release_recursive>:
 8004966:	4770      	bx	lr

08004968 <memcpy>:
 8004968:	440a      	add	r2, r1
 800496a:	4291      	cmp	r1, r2
 800496c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004970:	d100      	bne.n	8004974 <memcpy+0xc>
 8004972:	4770      	bx	lr
 8004974:	b510      	push	{r4, lr}
 8004976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497e:	4291      	cmp	r1, r2
 8004980:	d1f9      	bne.n	8004976 <memcpy+0xe>
 8004982:	bd10      	pop	{r4, pc}

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <_free_r>:
 8004994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004996:	2900      	cmp	r1, #0
 8004998:	d044      	beq.n	8004a24 <_free_r+0x90>
 800499a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499e:	9001      	str	r0, [sp, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f1a1 0404 	sub.w	r4, r1, #4
 80049a6:	bfb8      	it	lt
 80049a8:	18e4      	addlt	r4, r4, r3
 80049aa:	f000 f8a9 	bl	8004b00 <__malloc_lock>
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <_free_r+0x94>)
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	b933      	cbnz	r3, 80049c4 <_free_r+0x30>
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	b003      	add	sp, #12
 80049bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049c0:	f000 b8a4 	b.w	8004b0c <__malloc_unlock>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d908      	bls.n	80049da <_free_r+0x46>
 80049c8:	6825      	ldr	r5, [r4, #0]
 80049ca:	1961      	adds	r1, r4, r5
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf01      	itttt	eq
 80049d0:	6819      	ldreq	r1, [r3, #0]
 80049d2:	685b      	ldreq	r3, [r3, #4]
 80049d4:	1949      	addeq	r1, r1, r5
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	e7ed      	b.n	80049b6 <_free_r+0x22>
 80049da:	461a      	mov	r2, r3
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b10b      	cbz	r3, 80049e4 <_free_r+0x50>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d9fa      	bls.n	80049da <_free_r+0x46>
 80049e4:	6811      	ldr	r1, [r2, #0]
 80049e6:	1855      	adds	r5, r2, r1
 80049e8:	42a5      	cmp	r5, r4
 80049ea:	d10b      	bne.n	8004a04 <_free_r+0x70>
 80049ec:	6824      	ldr	r4, [r4, #0]
 80049ee:	4421      	add	r1, r4
 80049f0:	1854      	adds	r4, r2, r1
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	d1e0      	bne.n	80049ba <_free_r+0x26>
 80049f8:	681c      	ldr	r4, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	6053      	str	r3, [r2, #4]
 80049fe:	4421      	add	r1, r4
 8004a00:	6011      	str	r1, [r2, #0]
 8004a02:	e7da      	b.n	80049ba <_free_r+0x26>
 8004a04:	d902      	bls.n	8004a0c <_free_r+0x78>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	e7d6      	b.n	80049ba <_free_r+0x26>
 8004a0c:	6825      	ldr	r5, [r4, #0]
 8004a0e:	1961      	adds	r1, r4, r5
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf04      	itt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	bf04      	itt	eq
 8004a1c:	1949      	addeq	r1, r1, r5
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	6054      	str	r4, [r2, #4]
 8004a22:	e7ca      	b.n	80049ba <_free_r+0x26>
 8004a24:	b003      	add	sp, #12
 8004a26:	bd30      	pop	{r4, r5, pc}
 8004a28:	20004150 	.word	0x20004150

08004a2c <cleanup_glue>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	460c      	mov	r4, r1
 8004a30:	6809      	ldr	r1, [r1, #0]
 8004a32:	4605      	mov	r5, r0
 8004a34:	b109      	cbz	r1, 8004a3a <cleanup_glue+0xe>
 8004a36:	f7ff fff9 	bl	8004a2c <cleanup_glue>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a42:	f7ff bfa7 	b.w	8004994 <_free_r>
	...

08004a48 <_reclaim_reent>:
 8004a48:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <_reclaim_reent+0xb4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	4604      	mov	r4, r0
 8004a52:	d051      	beq.n	8004af8 <_reclaim_reent+0xb0>
 8004a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a56:	b143      	cbz	r3, 8004a6a <_reclaim_reent+0x22>
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d14a      	bne.n	8004af4 <_reclaim_reent+0xac>
 8004a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	b111      	cbz	r1, 8004a6a <_reclaim_reent+0x22>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff ff95 	bl	8004994 <_free_r>
 8004a6a:	6961      	ldr	r1, [r4, #20]
 8004a6c:	b111      	cbz	r1, 8004a74 <_reclaim_reent+0x2c>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff ff90 	bl	8004994 <_free_r>
 8004a74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a76:	b111      	cbz	r1, 8004a7e <_reclaim_reent+0x36>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff ff8b 	bl	8004994 <_free_r>
 8004a7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a80:	b111      	cbz	r1, 8004a88 <_reclaim_reent+0x40>
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7ff ff86 	bl	8004994 <_free_r>
 8004a88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a8a:	b111      	cbz	r1, 8004a92 <_reclaim_reent+0x4a>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff ff81 	bl	8004994 <_free_r>
 8004a92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a94:	b111      	cbz	r1, 8004a9c <_reclaim_reent+0x54>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff ff7c 	bl	8004994 <_free_r>
 8004a9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a9e:	b111      	cbz	r1, 8004aa6 <_reclaim_reent+0x5e>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff ff77 	bl	8004994 <_free_r>
 8004aa6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004aa8:	b111      	cbz	r1, 8004ab0 <_reclaim_reent+0x68>
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff ff72 	bl	8004994 <_free_r>
 8004ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab2:	b111      	cbz	r1, 8004aba <_reclaim_reent+0x72>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff ff6d 	bl	8004994 <_free_r>
 8004aba:	69a3      	ldr	r3, [r4, #24]
 8004abc:	b1e3      	cbz	r3, 8004af8 <_reclaim_reent+0xb0>
 8004abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	4798      	blx	r3
 8004ac4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ac6:	b1b9      	cbz	r1, 8004af8 <_reclaim_reent+0xb0>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ace:	f7ff bfad 	b.w	8004a2c <cleanup_glue>
 8004ad2:	5949      	ldr	r1, [r1, r5]
 8004ad4:	b941      	cbnz	r1, 8004ae8 <_reclaim_reent+0xa0>
 8004ad6:	3504      	adds	r5, #4
 8004ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ada:	2d80      	cmp	r5, #128	; 0x80
 8004adc:	68d9      	ldr	r1, [r3, #12]
 8004ade:	d1f8      	bne.n	8004ad2 <_reclaim_reent+0x8a>
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff ff57 	bl	8004994 <_free_r>
 8004ae6:	e7ba      	b.n	8004a5e <_reclaim_reent+0x16>
 8004ae8:	680e      	ldr	r6, [r1, #0]
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ff52 	bl	8004994 <_free_r>
 8004af0:	4631      	mov	r1, r6
 8004af2:	e7ef      	b.n	8004ad4 <_reclaim_reent+0x8c>
 8004af4:	2500      	movs	r5, #0
 8004af6:	e7ef      	b.n	8004ad8 <_reclaim_reent+0x90>
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	bf00      	nop
 8004afc:	2000001c 	.word	0x2000001c

08004b00 <__malloc_lock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <__malloc_lock+0x8>)
 8004b02:	f7ff bf2f 	b.w	8004964 <__retarget_lock_acquire_recursive>
 8004b06:	bf00      	nop
 8004b08:	2000414c 	.word	0x2000414c

08004b0c <__malloc_unlock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__malloc_unlock+0x8>)
 8004b0e:	f7ff bf2a 	b.w	8004966 <__retarget_lock_release_recursive>
 8004b12:	bf00      	nop
 8004b14:	2000414c 	.word	0x2000414c

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
