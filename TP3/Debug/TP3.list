
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029e8  080029e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000054  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c05  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015f9  00000000  00000000  00025ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  000272a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004f0  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213b6  00000000  00000000  00027d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000077db  00000000  00000000  000490fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c613c  00000000  00000000  000508d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116a15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001920  00000000  00000000  00116a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800292c 	.word	0x0800292c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800292c 	.word	0x0800292c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb68 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f80a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f874 	bl	800066c <MX_GPIO_Init>
  MX_RTC_Init();
 8000584:	f000 f8a0 	bl	80006c8 <MX_RTC_Init>
  init_usart();
 8000588:	f000 fa9e 	bl	8000ac8 <init_usart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Print_RTC_To_UART();
 800058c:	f000 f916 	bl	80007bc <Print_RTC_To_UART>
 8000590:	e7fc      	b.n	800058c <main+0x18>
	...

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fd4c 	bl	8002040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd4>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005f0:	2309      	movs	r3, #9
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fc90 	bl	8000f44 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f847 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2105      	movs	r1, #5
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fef1 	bl	8001434 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000658:	f000 f830 	bl	80006bc <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x4c>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_RTC_Init+0xac>)
 80006e2:	4a25      	ldr	r2, [pc, #148]	; (8000778 <MX_RTC_Init+0xb0>)
 80006e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_RTC_Init+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_RTC_Init+0xac>)
 80006ee:	227f      	movs	r2, #127	; 0x7f
 80006f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_RTC_Init+0xac>)
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_RTC_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_RTC_Init+0xac>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_RTC_Init+0xac>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <MX_RTC_Init+0xac>)
 800070c:	f001 f960 	bl	80019d0 <HAL_RTC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000716:	f7ff ffd1 	bl	80006bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800071e:	2300      	movs	r3, #0
 8000720:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000722:	2300      	movs	r3, #0
 8000724:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <MX_RTC_Init+0xac>)
 8000736:	f001 f9c1 	bl	8001abc <HAL_RTC_SetTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000740:	f7ff ffbc 	bl	80006bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000744:	2305      	movs	r3, #5
 8000746:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000748:	2303      	movs	r3, #3
 800074a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 800074c:	2331      	movs	r3, #49	; 0x31
 800074e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000750:	2323      	movs	r3, #35	; 0x23
 8000752:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_RTC_Init+0xac>)
 800075c:	f001 faa6 	bl	8001cac <HAL_RTC_SetDate>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000766:	f7ff ffa9 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000008c 	.word	0x2000008c
 8000778:	40002800 	.word	0x40002800

0800077c <Get_RTC_All>:

void Get_RTC_All(RTC_DateTypeDef *sDate,RTC_TimeTypeDef *sTime, uint32_t Format){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	if (HAL_RTC_GetTime(&hrtc,sTime,Format)!= HAL_OK){
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	68b9      	ldr	r1, [r7, #8]
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <Get_RTC_All+0x3c>)
 800078e:	f001 fa2f 	bl	8001bf0 <HAL_RTC_GetTime>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <Get_RTC_All+0x20>
			Error_Handler();
 8000798:	f7ff ff90 	bl	80006bc <Error_Handler>
	}
	if (HAL_RTC_GetDate(&hrtc,sDate,Format) != HAL_OK){
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <Get_RTC_All+0x3c>)
 80007a2:	f001 fb07 	bl	8001db4 <HAL_RTC_GetDate>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <Get_RTC_All+0x34>
		Error_Handler();
 80007ac:	f7ff ff86 	bl	80006bc <Error_Handler>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000008c 	.word	0x2000008c

080007bc <Print_RTC_To_UART>:

void Print_RTC_To_UART(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
	Get_RTC_All(&sDate,&sTime,RTC_FORMAT_BIN);
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ffce 	bl	800077c <Get_RTC_All>
	char * time = sTime_To_Char(&sTime);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f820 	bl	8000828 <sTime_To_Char>
 80007e8:	61f8      	str	r0, [r7, #28]
	char * date = sDate_To_Char(&sDate);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f839 	bl	8000864 <sDate_To_Char>
 80007f2:	61b8      	str	r0, [r7, #24]
	serial_puts("The date time is ");
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <Print_RTC_To_UART+0x64>)
 80007f6:	f000 f9e3 	bl	8000bc0 <serial_puts>
	serial_puts(date);
 80007fa:	69b8      	ldr	r0, [r7, #24]
 80007fc:	f000 f9e0 	bl	8000bc0 <serial_puts>
	serial_puts("The current time is ");
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <Print_RTC_To_UART+0x68>)
 8000802:	f000 f9dd 	bl	8000bc0 <serial_puts>
	serial_puts(time);
 8000806:	69f8      	ldr	r0, [r7, #28]
 8000808:	f000 f9da 	bl	8000bc0 <serial_puts>
	free(date);
 800080c:	69b8      	ldr	r0, [r7, #24]
 800080e:	f001 fc0f 	bl	8002030 <free>
	free(time);
 8000812:	69f8      	ldr	r0, [r7, #28]
 8000814:	f001 fc0c 	bl	8002030 <free>


}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08002944 	.word	0x08002944
 8000824:	08002958 	.word	0x08002958

08000828 <sTime_To_Char>:

char* sTime_To_Char(RTC_TimeTypeDef *sTime){
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
	char* hour_buffer = (char*) malloc(sizeof(char)*80);
 8000830:	2050      	movs	r0, #80	; 0x50
 8000832:	f001 fbf5 	bl	8002020 <malloc>
 8000836:	4603      	mov	r3, r0
 8000838:	60fb      	str	r3, [r7, #12]
	sprintf(hour_buffer, "%02d:%02d:%02d\r\n", sTime->Hours, sTime->Minutes, sTime->Seconds);  // format time string
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	785b      	ldrb	r3, [r3, #1]
 8000844:	4619      	mov	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	4904      	ldr	r1, [pc, #16]	; (8000860 <sTime_To_Char+0x38>)
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f001 fced 	bl	8002230 <siprintf>
	return hour_buffer;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08002970 	.word	0x08002970

08000864 <sDate_To_Char>:

char* sDate_To_Char(RTC_DateTypeDef *sDate){
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
	char* date_buffer = (char*) malloc(sizeof(char)*80);
 800086c:	2050      	movs	r0, #80	; 0x50
 800086e:	f001 fbd7 	bl	8002020 <malloc>
 8000872:	4603      	mov	r3, r0
 8000874:	60fb      	str	r3, [r7, #12]
	char day[3];
	switch (sDate->WeekDay){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	2b06      	cmp	r3, #6
 800087e:	d834      	bhi.n	80008ea <sDate_To_Char+0x86>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <sDate_To_Char+0x24>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008a5 	.word	0x080008a5
 800088c:	080008af 	.word	0x080008af
 8000890:	080008b9 	.word	0x080008b9
 8000894:	080008c3 	.word	0x080008c3
 8000898:	080008cd 	.word	0x080008cd
 800089c:	080008d7 	.word	0x080008d7
 80008a0:	080008e1 	.word	0x080008e1
		case RTC_WEEKDAY_MONDAY :
			strcpy(day,"Mon");
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <sDate_To_Char+0xbc>)
 80008aa:	601a      	str	r2, [r3, #0]
			break;
 80008ac:	e021      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_TUESDAY :
			strcpy(day,"Tue");
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <sDate_To_Char+0xc0>)
 80008b4:	601a      	str	r2, [r3, #0]
			break;
 80008b6:	e01c      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_WEDNESDAY :
			strcpy(day,"Wed");
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <sDate_To_Char+0xc4>)
 80008be:	601a      	str	r2, [r3, #0]
			break;
 80008c0:	e017      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_THURSDAY :
			strcpy(day,"Thu");
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <sDate_To_Char+0xc8>)
 80008c8:	601a      	str	r2, [r3, #0]
			break;
 80008ca:	e012      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_FRIDAY :
			strcpy(day,"Fri");
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <sDate_To_Char+0xcc>)
 80008d2:	601a      	str	r2, [r3, #0]
			break;
 80008d4:	e00d      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_SATURDAY :
			strcpy(day,"Sat");
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <sDate_To_Char+0xd0>)
 80008dc:	601a      	str	r2, [r3, #0]
			break;
 80008de:	e008      	b.n	80008f2 <sDate_To_Char+0x8e>
		case RTC_WEEKDAY_SUNDAY :
			strcpy(day,"Sun");
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <sDate_To_Char+0xd4>)
 80008e6:	601a      	str	r2, [r3, #0]
			break;
 80008e8:	e003      	b.n	80008f2 <sDate_To_Char+0x8e>
		default :
			strcpy(day,"Mon");
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <sDate_To_Char+0xbc>)
 80008f0:	601a      	str	r2, [r3, #0]
	}
	sprintf(date_buffer, "%s %02d-%02d-20%02d\r\n", day, sDate->Date, sDate->Month, sDate->Year);  // format date string
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	4618      	mov	r0, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	4619      	mov	r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	f107 0208 	add.w	r2, r7, #8
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	9100      	str	r1, [sp, #0]
 800090a:	4603      	mov	r3, r0
 800090c:	490b      	ldr	r1, [pc, #44]	; (800093c <sDate_To_Char+0xd8>)
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f001 fc8e 	bl	8002230 <siprintf>
	return date_buffer;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	006e6f4d 	.word	0x006e6f4d
 8000924:	00657554 	.word	0x00657554
 8000928:	00646557 	.word	0x00646557
 800092c:	00756854 	.word	0x00756854
 8000930:	00697246 	.word	0x00697246
 8000934:	00746153 	.word	0x00746153
 8000938:	006e7553 	.word	0x006e7553
 800093c:	08002984 	.word	0x08002984

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097e:	2007      	movs	r0, #7
 8000980:	f000 faac 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <HAL_RTC_MspInit+0x4c>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d111      	bne.n	80009d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 ff24 	bl	800180c <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80009ca:	f7ff fe77 	bl	80006bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HAL_RTC_MspInit+0x50>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40002800 	.word	0x40002800
 80009e0:	42470e3c 	.word	0x42470e3c

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f95e 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f001 fab0 	bl	8001fcc <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20020000 	.word	0x20020000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	200000c8 	.word	0x200000c8

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <init_usart>:
#include "stm32f4xx_hal.h"
#include "usart2.h"


// USART2 Initialization
void init_usart(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <init_usart+0xac>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <init_usart+0xac>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2, 0b01);
	//MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER3, 0b01);
	GPIOA->MODER |= 0x000000A0;
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <init_usart+0xb0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <init_usart+0xb0>)
 8000ade:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000ae2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <init_usart+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <init_usart+0xb0>)
 8000aea:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000aee:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <init_usart+0xb0>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <init_usart+0xb0>)
 8000af6:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 8000afa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <init_usart+0xb0>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <init_usart+0xb0>)
 8000b02:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b06:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <init_usart+0xb0>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <init_usart+0xb0>)
 8000b0e:	f023 030c 	bic.w	r3, r3, #12
 8000b12:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <init_usart+0xb0>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <init_usart+0xb0>)
 8000b1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000b1e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <init_usart+0xb0>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <init_usart+0xb0>)
 8000b26:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b2a:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <init_usart+0xb0>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <init_usart+0xb0>)
 8000b32:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b36:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <init_usart+0xac>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <init_usart+0xac>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity
	//Enable Tx and Rx
	USART2->CR1 = 0x0000800C;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <init_usart+0xb4>)
 8000b46:	f248 020c 	movw	r2, #32780	; 0x800c
 8000b4a:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <init_usart+0xb4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <init_usart+0xb4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <init_usart+0xb4>)
 8000b5a:	f241 1217 	movw	r2, #4375	; 0x1117
 8000b5e:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A00C;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <init_usart+0xb4>)
 8000b62:	f24a 020c 	movw	r2, #40972	; 0xa00c
 8000b66:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f8e1 	bl	8000d30 <HAL_Delay>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40004400 	.word	0x40004400

08000b80 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <serial_putc+0x3c>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8000b90:	bf00      	nop
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <serial_putc+0x3c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f9      	beq.n	8000b92 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8000b9e:	bf00      	nop
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <serial_putc+0x3c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f9      	beq.n	8000ba0 <serial_putc+0x20>
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <serial_puts>:

void serial_puts( char *msg)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000bcc:	e009      	b.n	8000be2 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffd2 	bl	8000b80 <serial_putc>
		cnt++;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ef      	bne.n	8000bce <serial_puts+0xe>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ff3f 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f001 f9d7 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fca3 	bl	8000574 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c3c:	080029f0 	.word	0x080029f0
  ldr r2, =_sbss
 8000c40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c44:	200000c4 	.word	0x200000c4

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f931 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe5e 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f93b 	bl	8000f2a <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 f911 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200000b0 	.word	0x200000b0

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200000b0 	.word	0x200000b0

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff47 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff5c 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffb0 	bl	8000e98 <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e267      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d075      	beq.n	800104e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f62:	4b88      	ldr	r3, [pc, #544]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d00c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6e:	4b85      	ldr	r3, [pc, #532]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d112      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7a:	4b82      	ldr	r3, [pc, #520]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f86:	d10b      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d05b      	beq.n	800104c <HAL_RCC_OscConfig+0x108>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d157      	bne.n	800104c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e242      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d106      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x74>
 8000faa:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a75      	ldr	r2, [pc, #468]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x98>
 8000fc2:	4b70      	ldr	r3, [pc, #448]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6f      	ldr	r2, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6c      	ldr	r2, [pc, #432]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fdc:	4b69      	ldr	r3, [pc, #420]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a68      	ldr	r2, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a65      	ldr	r2, [pc, #404]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fe8c 	bl	8000d18 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fe88 	bl	8000d18 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e207      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0xc0>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fe78 	bl	8000d18 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fe74 	bl	8000d18 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1f3      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	4b51      	ldr	r3, [pc, #324]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0xe8>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106e:	2b08      	cmp	r3, #8
 8001070:	d11c      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e1c7      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4937      	ldr	r1, [pc, #220]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e03a      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x244>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fe2d 	bl	8000d18 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fe29 	bl	8000d18 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1a8      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4925      	ldr	r1, [pc, #148]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_OscConfig+0x244>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fe0c 	bl	8000d18 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fe08 	bl	8000d18 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e187      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d036      	beq.n	800119c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d016      	beq.n	8001164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_RCC_OscConfig+0x248>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800113c:	f7ff fdec 	bl	8000d18 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fde8 	bl	8000d18 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e167      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_OscConfig+0x240>)
 8001158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x200>
 8001162:	e01b      	b.n	800119c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_RCC_OscConfig+0x248>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fdd5 	bl	8000d18 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	e00e      	b.n	8001190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff fdd1 	bl	8000d18 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d907      	bls.n	8001190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e150      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
 8001184:	40023800 	.word	0x40023800
 8001188:	42470000 	.word	0x42470000
 800118c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ea      	bne.n	8001172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8097 	beq.w	80012d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b7d      	ldr	r3, [pc, #500]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a7c      	ldr	r2, [pc, #496]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b77      	ldr	r3, [pc, #476]	; (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fd91 	bl	8000d18 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7ff fd8d 	bl	8000d18 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e10c      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x474>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x2ea>
 8001220:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001224:	4a63      	ldr	r2, [pc, #396]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6713      	str	r3, [r2, #112]	; 0x70
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x324>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x30c>
 8001236:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001246:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6713      	str	r3, [r2, #112]	; 0x70
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0x324>
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6713      	str	r3, [r2, #112]	; 0x70
 800125c:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	4a54      	ldr	r2, [pc, #336]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d015      	beq.n	800129c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fd52 	bl	8000d18 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	e00a      	b.n	800128e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fd4e 	bl	8000d18 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e0cb      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0ee      	beq.n	8001278 <HAL_RCC_OscConfig+0x334>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fd3c 	bl	8000d18 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fd38 	bl	8000d18 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0b5      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ba:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ee      	bne.n	80012a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a1 	beq.w	8001424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d05c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d141      	bne.n	800137a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_RCC_OscConfig+0x478>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fd0c 	bl	8000d18 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fd08 	bl	8000d18 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e087      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	3b01      	subs	r3, #1
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	491b      	ldr	r1, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_RCC_OscConfig+0x478>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fce1 	bl	8000d18 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff fcdd 	bl	8000d18 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e05c      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x416>
 8001378:	e054      	b.n	8001424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_RCC_OscConfig+0x478>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcca 	bl	8000d18 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fcc6 	bl	8000d18 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e045      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_RCC_OscConfig+0x470>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x444>
 80013a6:	e03d      	b.n	8001424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e038      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000
 80013bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x4ec>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d028      	beq.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d121      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d11a      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d111      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	3b01      	subs	r3, #1
 800140a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0cc      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d90c      	bls.n	8001470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d044      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e067      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4934      	ldr	r1, [pc, #208]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fbf8 	bl	8000d18 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fbf4 	bl	8000d18 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e04f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d20c      	bcs.n	800157c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	5ccb      	ldrb	r3, [r1, r3]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb58 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	0800299c 	.word	0x0800299c
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b094      	sub	sp, #80	; 0x50
 8001606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
 800160c:	2300      	movs	r3, #0
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001610:	2300      	movs	r3, #0
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001618:	4b79      	ldr	r3, [pc, #484]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d00d      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x40>
 8001624:	2b08      	cmp	r3, #8
 8001626:	f200 80e1 	bhi.w	80017ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x34>
 800162e:	2b04      	cmp	r3, #4
 8001630:	d003      	beq.n	800163a <HAL_RCC_GetSysClockFreq+0x3a>
 8001632:	e0db      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <HAL_RCC_GetSysClockFreq+0x204>)
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001638:	e0db      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_GetSysClockFreq+0x208>)
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800163e:	e0d8      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164a:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d063      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001656:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	2200      	movs	r2, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
 800166e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001672:	4622      	mov	r2, r4
 8001674:	462b      	mov	r3, r5
 8001676:	f04f 0000 	mov.w	r0, #0
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	0159      	lsls	r1, r3, #5
 8001680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001684:	0150      	lsls	r0, r2, #5
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4621      	mov	r1, r4
 800168c:	1a51      	subs	r1, r2, r1
 800168e:	6139      	str	r1, [r7, #16]
 8001690:	4629      	mov	r1, r5
 8001692:	eb63 0301 	sbc.w	r3, r3, r1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016a4:	4659      	mov	r1, fp
 80016a6:	018b      	lsls	r3, r1, #6
 80016a8:	4651      	mov	r1, sl
 80016aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ae:	4651      	mov	r1, sl
 80016b0:	018a      	lsls	r2, r1, #6
 80016b2:	4651      	mov	r1, sl
 80016b4:	ebb2 0801 	subs.w	r8, r2, r1
 80016b8:	4659      	mov	r1, fp
 80016ba:	eb63 0901 	sbc.w	r9, r3, r1
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	eb18 0303 	adds.w	r3, r8, r3
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	462b      	mov	r3, r5
 80016e0:	eb49 0303 	adc.w	r3, r9, r3
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016f2:	4629      	mov	r1, r5
 80016f4:	024b      	lsls	r3, r1, #9
 80016f6:	4621      	mov	r1, r4
 80016f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fc:	4621      	mov	r1, r4
 80016fe:	024a      	lsls	r2, r1, #9
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	2200      	movs	r2, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
 800170a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001710:	f7fe fdae 	bl	8000270 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800171c:	e058      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2200      	movs	r2, #0
 8001726:	4618      	mov	r0, r3
 8001728:	4611      	mov	r1, r2
 800172a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001738:	4642      	mov	r2, r8
 800173a:	464b      	mov	r3, r9
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0159      	lsls	r1, r3, #5
 8001746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174a:	0150      	lsls	r0, r2, #5
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4641      	mov	r1, r8
 8001752:	ebb2 0a01 	subs.w	sl, r2, r1
 8001756:	4649      	mov	r1, r9
 8001758:	eb63 0b01 	sbc.w	fp, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800176c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001770:	ebb2 040a 	subs.w	r4, r2, sl
 8001774:	eb63 050b 	sbc.w	r5, r3, fp
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	00eb      	lsls	r3, r5, #3
 8001782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001786:	00e2      	lsls	r2, r4, #3
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4643      	mov	r3, r8
 800178e:	18e3      	adds	r3, r4, r3
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	464b      	mov	r3, r9
 8001794:	eb45 0303 	adc.w	r3, r5, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ba:	2200      	movs	r2, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	61fa      	str	r2, [r7, #28]
 80017c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c4:	f7fe fd54 	bl	8000270 <__aeabi_uldivmod>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	3301      	adds	r3, #1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ea:	e002      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3750      	adds	r7, #80	; 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400
 8001808:	007a1200 	.word	0x007a1200

0800180c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001830:	2b00      	cmp	r3, #0
 8001832:	d035      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800183a:	f7ff fa6d 	bl	8000d18 <HAL_GetTick>
 800183e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001842:	f7ff fa69 	bl	8000d18 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0b0      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	019a      	lsls	r2, r3, #6
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	071b      	lsls	r3, r3, #28
 800186c:	4955      	ldr	r1, [pc, #340]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800186e:	4313      	orrs	r3, r2
 8001870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800187a:	f7ff fa4d 	bl	8000d18 <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001882:	f7ff fa49 	bl	8000d18 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e090      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8083 	beq.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018d6:	f7ff fa1f 	bl	8000d18 <HAL_GetTick>
 80018da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff fa1b 	bl	8000d18 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e062      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001904:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d02f      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	429a      	cmp	r2, r3
 8001918:	d028      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001922:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d114      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f9e9 	bl	8000d18 <HAL_GetTick>
 8001946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff f9e5 	bl	8000d18 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e02a      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ee      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001978:	d10d      	bne.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800198a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198e:	490d      	ldr	r1, [pc, #52]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
 8001994:	e005      	b.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800199c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80019a0:	6093      	str	r3, [r2, #8]
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	4905      	ldr	r1, [pc, #20]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	42470068 	.word	0x42470068
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000
 80019cc:	42470e40 	.word	0x42470e40

080019d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e066      	b.n	8001ab4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f5b      	ldrb	r3, [r3, #29]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe ffca 	bl	8000990 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	22ca      	movs	r2, #202	; 0xca
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2253      	movs	r2, #83	; 0x53
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa45 	bl	8001ea2 <RTC_EnterInitMode>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d12c      	bne.n	8001a7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68d2      	ldr	r2, [r2, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6919      	ldr	r1, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa4c 	bl	8001f10 <RTC_ExitInitMode>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d113      	bne.n	8001aaa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	22ff      	movs	r2, #255	; 0xff
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	7f1b      	ldrb	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RTC_SetTime+0x1c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e087      	b.n	8001be8 <HAL_RTC_SetTime+0x12c>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d126      	bne.n	8001b38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa29 	bl	8001f5a <RTC_ByteToBcd2>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fa22 	bl	8001f5a <RTC_ByteToBcd2>
 8001b16:	4603      	mov	r3, r0
 8001b18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001b1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	789b      	ldrb	r3, [r3, #2]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fa1a 	bl	8001f5a <RTC_ByteToBcd2>
 8001b26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001b28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e018      	b.n	8001b6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001b58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001b5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	22ca      	movs	r2, #202	; 0xca
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2253      	movs	r2, #83	; 0x53
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f991 	bl	8001ea2 <RTC_EnterInitMode>
 8001b80:	4603      	mov	r3, r0
 8001b82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d120      	bne.n	8001bcc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001b94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001b98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ba8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f9a4 	bl	8001f10 <RTC_ExitInitMode>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	771a      	strb	r2, [r3, #28]

  return status;
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}

08001bf0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001c22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001c26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	0d9b      	lsrs	r3, r3, #22
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11a      	bne.n	8001ca2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f98f 	bl	8001f94 <RTC_Bcd2ToByte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f986 	bl	8001f94 <RTC_Bcd2ToByte>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f97d 	bl	8001f94 <RTC_Bcd2ToByte>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RTC_SetDate+0x1c>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e071      	b.n	8001dac <HAL_RTC_SetDate+0x100>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RTC_SetDate+0x4c>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	f023 0310 	bic.w	r3, r3, #16
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	330a      	adds	r3, #10
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	78db      	ldrb	r3, [r3, #3]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f929 	bl	8001f5a <RTC_ByteToBcd2>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f922 	bl	8001f5a <RTC_ByteToBcd2>
 8001d16:	4603      	mov	r3, r0
 8001d18:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001d1a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	789b      	ldrb	r3, [r3, #2]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f91a 	bl	8001f5a <RTC_ByteToBcd2>
 8001d26:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001d28:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e00e      	b.n	8001d56 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d44:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001d4a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	22ca      	movs	r2, #202	; 0xca
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2253      	movs	r2, #83	; 0x53
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f89b 	bl	8001ea2 <RTC_EnterInitMode>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f8c2 	bl	8001f10 <RTC_ExitInitMode>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	22ff      	movs	r2, #255	; 0xff
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]

  return status;
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}

08001db4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0b5b      	lsrs	r3, r3, #13
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d11a      	bne.n	8001e48 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	78db      	ldrb	r3, [r3, #3]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f8bc 	bl	8001f94 <RTC_Bcd2ToByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f8b3 	bl	8001f94 <RTC_Bcd2ToByte>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8aa 	bl	8001f94 <RTC_Bcd2ToByte>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6e:	f7fe ff53 	bl	8000d18 <HAL_GetTick>
 8001e72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001e74:	e009      	b.n	8001e8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001e76:	f7fe ff4f 	bl	8000d18 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e84:	d901      	bls.n	8001e8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e007      	b.n	8001e9a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d122      	bne.n	8001f06 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ece:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe ff22 	bl	8000d18 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001ed6:	e00c      	b.n	8001ef2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ed8:	f7fe ff1e 	bl	8000d18 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee6:	d904      	bls.n	8001ef2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2204      	movs	r2, #4
 8001eec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <RTC_EnterInitMode+0x64>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d1e8      	bne.n	8001ed8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff89 	bl	8001e52 <HAL_RTC_WaitForSynchro>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8001f68:	e005      	b.n	8001f76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	3b0a      	subs	r3, #10
 8001f74:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d8f6      	bhi.n	8001f6a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b2db      	uxtb	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2db      	uxtb	r3, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <__errno>:
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <__errno+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	4d0d      	ldr	r5, [pc, #52]	; (8002010 <__libc_init_array+0x38>)
 8001fdc:	4c0d      	ldr	r4, [pc, #52]	; (8002014 <__libc_init_array+0x3c>)
 8001fde:	1b64      	subs	r4, r4, r5
 8001fe0:	10a4      	asrs	r4, r4, #2
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	4d0b      	ldr	r5, [pc, #44]	; (8002018 <__libc_init_array+0x40>)
 8001fea:	4c0c      	ldr	r4, [pc, #48]	; (800201c <__libc_init_array+0x44>)
 8001fec:	f000 fc9e 	bl	800292c <_init>
 8001ff0:	1b64      	subs	r4, r4, r5
 8001ff2:	10a4      	asrs	r4, r4, #2
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	42a6      	cmp	r6, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002000:	4798      	blx	r3
 8002002:	3601      	adds	r6, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	f855 3b04 	ldr.w	r3, [r5], #4
 800200a:	4798      	blx	r3
 800200c:	3601      	adds	r6, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	080029e8 	.word	0x080029e8
 8002014:	080029e8 	.word	0x080029e8
 8002018:	080029e8 	.word	0x080029e8
 800201c:	080029ec 	.word	0x080029ec

08002020 <malloc>:
 8002020:	4b02      	ldr	r3, [pc, #8]	; (800202c <malloc+0xc>)
 8002022:	4601      	mov	r1, r0
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	f000 b87f 	b.w	8002128 <_malloc_r>
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c

08002030 <free>:
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <free+0xc>)
 8002032:	4601      	mov	r1, r0
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f000 b80b 	b.w	8002050 <_free_r>
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c

08002040 <memset>:
 8002040:	4402      	add	r2, r0
 8002042:	4603      	mov	r3, r0
 8002044:	4293      	cmp	r3, r2
 8002046:	d100      	bne.n	800204a <memset+0xa>
 8002048:	4770      	bx	lr
 800204a:	f803 1b01 	strb.w	r1, [r3], #1
 800204e:	e7f9      	b.n	8002044 <memset+0x4>

08002050 <_free_r>:
 8002050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002052:	2900      	cmp	r1, #0
 8002054:	d044      	beq.n	80020e0 <_free_r+0x90>
 8002056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800205a:	9001      	str	r0, [sp, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f1a1 0404 	sub.w	r4, r1, #4
 8002062:	bfb8      	it	lt
 8002064:	18e4      	addlt	r4, r4, r3
 8002066:	f000 f903 	bl	8002270 <__malloc_lock>
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <_free_r+0x94>)
 800206c:	9801      	ldr	r0, [sp, #4]
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	b933      	cbnz	r3, 8002080 <_free_r+0x30>
 8002072:	6063      	str	r3, [r4, #4]
 8002074:	6014      	str	r4, [r2, #0]
 8002076:	b003      	add	sp, #12
 8002078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800207c:	f000 b8fe 	b.w	800227c <__malloc_unlock>
 8002080:	42a3      	cmp	r3, r4
 8002082:	d908      	bls.n	8002096 <_free_r+0x46>
 8002084:	6825      	ldr	r5, [r4, #0]
 8002086:	1961      	adds	r1, r4, r5
 8002088:	428b      	cmp	r3, r1
 800208a:	bf01      	itttt	eq
 800208c:	6819      	ldreq	r1, [r3, #0]
 800208e:	685b      	ldreq	r3, [r3, #4]
 8002090:	1949      	addeq	r1, r1, r5
 8002092:	6021      	streq	r1, [r4, #0]
 8002094:	e7ed      	b.n	8002072 <_free_r+0x22>
 8002096:	461a      	mov	r2, r3
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	b10b      	cbz	r3, 80020a0 <_free_r+0x50>
 800209c:	42a3      	cmp	r3, r4
 800209e:	d9fa      	bls.n	8002096 <_free_r+0x46>
 80020a0:	6811      	ldr	r1, [r2, #0]
 80020a2:	1855      	adds	r5, r2, r1
 80020a4:	42a5      	cmp	r5, r4
 80020a6:	d10b      	bne.n	80020c0 <_free_r+0x70>
 80020a8:	6824      	ldr	r4, [r4, #0]
 80020aa:	4421      	add	r1, r4
 80020ac:	1854      	adds	r4, r2, r1
 80020ae:	42a3      	cmp	r3, r4
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	d1e0      	bne.n	8002076 <_free_r+0x26>
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	6053      	str	r3, [r2, #4]
 80020ba:	4421      	add	r1, r4
 80020bc:	6011      	str	r1, [r2, #0]
 80020be:	e7da      	b.n	8002076 <_free_r+0x26>
 80020c0:	d902      	bls.n	80020c8 <_free_r+0x78>
 80020c2:	230c      	movs	r3, #12
 80020c4:	6003      	str	r3, [r0, #0]
 80020c6:	e7d6      	b.n	8002076 <_free_r+0x26>
 80020c8:	6825      	ldr	r5, [r4, #0]
 80020ca:	1961      	adds	r1, r4, r5
 80020cc:	428b      	cmp	r3, r1
 80020ce:	bf04      	itt	eq
 80020d0:	6819      	ldreq	r1, [r3, #0]
 80020d2:	685b      	ldreq	r3, [r3, #4]
 80020d4:	6063      	str	r3, [r4, #4]
 80020d6:	bf04      	itt	eq
 80020d8:	1949      	addeq	r1, r1, r5
 80020da:	6021      	streq	r1, [r4, #0]
 80020dc:	6054      	str	r4, [r2, #4]
 80020de:	e7ca      	b.n	8002076 <_free_r+0x26>
 80020e0:	b003      	add	sp, #12
 80020e2:	bd30      	pop	{r4, r5, pc}
 80020e4:	200000b4 	.word	0x200000b4

080020e8 <sbrk_aligned>:
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4e0e      	ldr	r6, [pc, #56]	; (8002124 <sbrk_aligned+0x3c>)
 80020ec:	460c      	mov	r4, r1
 80020ee:	6831      	ldr	r1, [r6, #0]
 80020f0:	4605      	mov	r5, r0
 80020f2:	b911      	cbnz	r1, 80020fa <sbrk_aligned+0x12>
 80020f4:	f000 f88c 	bl	8002210 <_sbrk_r>
 80020f8:	6030      	str	r0, [r6, #0]
 80020fa:	4621      	mov	r1, r4
 80020fc:	4628      	mov	r0, r5
 80020fe:	f000 f887 	bl	8002210 <_sbrk_r>
 8002102:	1c43      	adds	r3, r0, #1
 8002104:	d00a      	beq.n	800211c <sbrk_aligned+0x34>
 8002106:	1cc4      	adds	r4, r0, #3
 8002108:	f024 0403 	bic.w	r4, r4, #3
 800210c:	42a0      	cmp	r0, r4
 800210e:	d007      	beq.n	8002120 <sbrk_aligned+0x38>
 8002110:	1a21      	subs	r1, r4, r0
 8002112:	4628      	mov	r0, r5
 8002114:	f000 f87c 	bl	8002210 <_sbrk_r>
 8002118:	3001      	adds	r0, #1
 800211a:	d101      	bne.n	8002120 <sbrk_aligned+0x38>
 800211c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002120:	4620      	mov	r0, r4
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	200000b8 	.word	0x200000b8

08002128 <_malloc_r>:
 8002128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800212c:	1ccd      	adds	r5, r1, #3
 800212e:	f025 0503 	bic.w	r5, r5, #3
 8002132:	3508      	adds	r5, #8
 8002134:	2d0c      	cmp	r5, #12
 8002136:	bf38      	it	cc
 8002138:	250c      	movcc	r5, #12
 800213a:	2d00      	cmp	r5, #0
 800213c:	4607      	mov	r7, r0
 800213e:	db01      	blt.n	8002144 <_malloc_r+0x1c>
 8002140:	42a9      	cmp	r1, r5
 8002142:	d905      	bls.n	8002150 <_malloc_r+0x28>
 8002144:	230c      	movs	r3, #12
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	2600      	movs	r6, #0
 800214a:	4630      	mov	r0, r6
 800214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002150:	4e2e      	ldr	r6, [pc, #184]	; (800220c <_malloc_r+0xe4>)
 8002152:	f000 f88d 	bl	8002270 <__malloc_lock>
 8002156:	6833      	ldr	r3, [r6, #0]
 8002158:	461c      	mov	r4, r3
 800215a:	bb34      	cbnz	r4, 80021aa <_malloc_r+0x82>
 800215c:	4629      	mov	r1, r5
 800215e:	4638      	mov	r0, r7
 8002160:	f7ff ffc2 	bl	80020e8 <sbrk_aligned>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	4604      	mov	r4, r0
 8002168:	d14d      	bne.n	8002206 <_malloc_r+0xde>
 800216a:	6834      	ldr	r4, [r6, #0]
 800216c:	4626      	mov	r6, r4
 800216e:	2e00      	cmp	r6, #0
 8002170:	d140      	bne.n	80021f4 <_malloc_r+0xcc>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	4631      	mov	r1, r6
 8002176:	4638      	mov	r0, r7
 8002178:	eb04 0803 	add.w	r8, r4, r3
 800217c:	f000 f848 	bl	8002210 <_sbrk_r>
 8002180:	4580      	cmp	r8, r0
 8002182:	d13a      	bne.n	80021fa <_malloc_r+0xd2>
 8002184:	6821      	ldr	r1, [r4, #0]
 8002186:	3503      	adds	r5, #3
 8002188:	1a6d      	subs	r5, r5, r1
 800218a:	f025 0503 	bic.w	r5, r5, #3
 800218e:	3508      	adds	r5, #8
 8002190:	2d0c      	cmp	r5, #12
 8002192:	bf38      	it	cc
 8002194:	250c      	movcc	r5, #12
 8002196:	4629      	mov	r1, r5
 8002198:	4638      	mov	r0, r7
 800219a:	f7ff ffa5 	bl	80020e8 <sbrk_aligned>
 800219e:	3001      	adds	r0, #1
 80021a0:	d02b      	beq.n	80021fa <_malloc_r+0xd2>
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	442b      	add	r3, r5
 80021a6:	6023      	str	r3, [r4, #0]
 80021a8:	e00e      	b.n	80021c8 <_malloc_r+0xa0>
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	1b52      	subs	r2, r2, r5
 80021ae:	d41e      	bmi.n	80021ee <_malloc_r+0xc6>
 80021b0:	2a0b      	cmp	r2, #11
 80021b2:	d916      	bls.n	80021e2 <_malloc_r+0xba>
 80021b4:	1961      	adds	r1, r4, r5
 80021b6:	42a3      	cmp	r3, r4
 80021b8:	6025      	str	r5, [r4, #0]
 80021ba:	bf18      	it	ne
 80021bc:	6059      	strne	r1, [r3, #4]
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	bf08      	it	eq
 80021c2:	6031      	streq	r1, [r6, #0]
 80021c4:	5162      	str	r2, [r4, r5]
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	4638      	mov	r0, r7
 80021ca:	f104 060b 	add.w	r6, r4, #11
 80021ce:	f000 f855 	bl	800227c <__malloc_unlock>
 80021d2:	f026 0607 	bic.w	r6, r6, #7
 80021d6:	1d23      	adds	r3, r4, #4
 80021d8:	1af2      	subs	r2, r6, r3
 80021da:	d0b6      	beq.n	800214a <_malloc_r+0x22>
 80021dc:	1b9b      	subs	r3, r3, r6
 80021de:	50a3      	str	r3, [r4, r2]
 80021e0:	e7b3      	b.n	800214a <_malloc_r+0x22>
 80021e2:	6862      	ldr	r2, [r4, #4]
 80021e4:	42a3      	cmp	r3, r4
 80021e6:	bf0c      	ite	eq
 80021e8:	6032      	streq	r2, [r6, #0]
 80021ea:	605a      	strne	r2, [r3, #4]
 80021ec:	e7ec      	b.n	80021c8 <_malloc_r+0xa0>
 80021ee:	4623      	mov	r3, r4
 80021f0:	6864      	ldr	r4, [r4, #4]
 80021f2:	e7b2      	b.n	800215a <_malloc_r+0x32>
 80021f4:	4634      	mov	r4, r6
 80021f6:	6876      	ldr	r6, [r6, #4]
 80021f8:	e7b9      	b.n	800216e <_malloc_r+0x46>
 80021fa:	230c      	movs	r3, #12
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4638      	mov	r0, r7
 8002200:	f000 f83c 	bl	800227c <__malloc_unlock>
 8002204:	e7a1      	b.n	800214a <_malloc_r+0x22>
 8002206:	6025      	str	r5, [r4, #0]
 8002208:	e7de      	b.n	80021c8 <_malloc_r+0xa0>
 800220a:	bf00      	nop
 800220c:	200000b4 	.word	0x200000b4

08002210 <_sbrk_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4d06      	ldr	r5, [pc, #24]	; (800222c <_sbrk_r+0x1c>)
 8002214:	2300      	movs	r3, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	602b      	str	r3, [r5, #0]
 800221c:	f7fe fc0c 	bl	8000a38 <_sbrk>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_sbrk_r+0x1a>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	b103      	cbz	r3, 800222a <_sbrk_r+0x1a>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	200000bc 	.word	0x200000bc

08002230 <siprintf>:
 8002230:	b40e      	push	{r1, r2, r3}
 8002232:	b500      	push	{lr}
 8002234:	b09c      	sub	sp, #112	; 0x70
 8002236:	ab1d      	add	r3, sp, #116	; 0x74
 8002238:	9002      	str	r0, [sp, #8]
 800223a:	9006      	str	r0, [sp, #24]
 800223c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <siprintf+0x38>)
 8002242:	9107      	str	r1, [sp, #28]
 8002244:	9104      	str	r1, [sp, #16]
 8002246:	4909      	ldr	r1, [pc, #36]	; (800226c <siprintf+0x3c>)
 8002248:	f853 2b04 	ldr.w	r2, [r3], #4
 800224c:	9105      	str	r1, [sp, #20]
 800224e:	6800      	ldr	r0, [r0, #0]
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	a902      	add	r1, sp, #8
 8002254:	f000 f874 	bl	8002340 <_svfiprintf_r>
 8002258:	9b02      	ldr	r3, [sp, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	b01c      	add	sp, #112	; 0x70
 8002260:	f85d eb04 	ldr.w	lr, [sp], #4
 8002264:	b003      	add	sp, #12
 8002266:	4770      	bx	lr
 8002268:	2000000c 	.word	0x2000000c
 800226c:	ffff0208 	.word	0xffff0208

08002270 <__malloc_lock>:
 8002270:	4801      	ldr	r0, [pc, #4]	; (8002278 <__malloc_lock+0x8>)
 8002272:	f000 baf9 	b.w	8002868 <__retarget_lock_acquire_recursive>
 8002276:	bf00      	nop
 8002278:	200000c0 	.word	0x200000c0

0800227c <__malloc_unlock>:
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <__malloc_unlock+0x8>)
 800227e:	f000 baf4 	b.w	800286a <__retarget_lock_release_recursive>
 8002282:	bf00      	nop
 8002284:	200000c0 	.word	0x200000c0

08002288 <__ssputs_r>:
 8002288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800228c:	688e      	ldr	r6, [r1, #8]
 800228e:	429e      	cmp	r6, r3
 8002290:	4682      	mov	sl, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4690      	mov	r8, r2
 8002296:	461f      	mov	r7, r3
 8002298:	d838      	bhi.n	800230c <__ssputs_r+0x84>
 800229a:	898a      	ldrh	r2, [r1, #12]
 800229c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022a0:	d032      	beq.n	8002308 <__ssputs_r+0x80>
 80022a2:	6825      	ldr	r5, [r4, #0]
 80022a4:	6909      	ldr	r1, [r1, #16]
 80022a6:	eba5 0901 	sub.w	r9, r5, r1
 80022aa:	6965      	ldr	r5, [r4, #20]
 80022ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022b4:	3301      	adds	r3, #1
 80022b6:	444b      	add	r3, r9
 80022b8:	106d      	asrs	r5, r5, #1
 80022ba:	429d      	cmp	r5, r3
 80022bc:	bf38      	it	cc
 80022be:	461d      	movcc	r5, r3
 80022c0:	0553      	lsls	r3, r2, #21
 80022c2:	d531      	bpl.n	8002328 <__ssputs_r+0xa0>
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7ff ff2f 	bl	8002128 <_malloc_r>
 80022ca:	4606      	mov	r6, r0
 80022cc:	b950      	cbnz	r0, 80022e4 <__ssputs_r+0x5c>
 80022ce:	230c      	movs	r3, #12
 80022d0:	f8ca 3000 	str.w	r3, [sl]
 80022d4:	89a3      	ldrh	r3, [r4, #12]
 80022d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022da:	81a3      	strh	r3, [r4, #12]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e4:	6921      	ldr	r1, [r4, #16]
 80022e6:	464a      	mov	r2, r9
 80022e8:	f000 fac0 	bl	800286c <memcpy>
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	81a3      	strh	r3, [r4, #12]
 80022f8:	6126      	str	r6, [r4, #16]
 80022fa:	6165      	str	r5, [r4, #20]
 80022fc:	444e      	add	r6, r9
 80022fe:	eba5 0509 	sub.w	r5, r5, r9
 8002302:	6026      	str	r6, [r4, #0]
 8002304:	60a5      	str	r5, [r4, #8]
 8002306:	463e      	mov	r6, r7
 8002308:	42be      	cmp	r6, r7
 800230a:	d900      	bls.n	800230e <__ssputs_r+0x86>
 800230c:	463e      	mov	r6, r7
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	4632      	mov	r2, r6
 8002312:	4641      	mov	r1, r8
 8002314:	f000 fab8 	bl	8002888 <memmove>
 8002318:	68a3      	ldr	r3, [r4, #8]
 800231a:	1b9b      	subs	r3, r3, r6
 800231c:	60a3      	str	r3, [r4, #8]
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	4433      	add	r3, r6
 8002322:	6023      	str	r3, [r4, #0]
 8002324:	2000      	movs	r0, #0
 8002326:	e7db      	b.n	80022e0 <__ssputs_r+0x58>
 8002328:	462a      	mov	r2, r5
 800232a:	f000 fac7 	bl	80028bc <_realloc_r>
 800232e:	4606      	mov	r6, r0
 8002330:	2800      	cmp	r0, #0
 8002332:	d1e1      	bne.n	80022f8 <__ssputs_r+0x70>
 8002334:	6921      	ldr	r1, [r4, #16]
 8002336:	4650      	mov	r0, sl
 8002338:	f7ff fe8a 	bl	8002050 <_free_r>
 800233c:	e7c7      	b.n	80022ce <__ssputs_r+0x46>
	...

08002340 <_svfiprintf_r>:
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	4698      	mov	r8, r3
 8002346:	898b      	ldrh	r3, [r1, #12]
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	b09d      	sub	sp, #116	; 0x74
 800234c:	4607      	mov	r7, r0
 800234e:	460d      	mov	r5, r1
 8002350:	4614      	mov	r4, r2
 8002352:	d50e      	bpl.n	8002372 <_svfiprintf_r+0x32>
 8002354:	690b      	ldr	r3, [r1, #16]
 8002356:	b963      	cbnz	r3, 8002372 <_svfiprintf_r+0x32>
 8002358:	2140      	movs	r1, #64	; 0x40
 800235a:	f7ff fee5 	bl	8002128 <_malloc_r>
 800235e:	6028      	str	r0, [r5, #0]
 8002360:	6128      	str	r0, [r5, #16]
 8002362:	b920      	cbnz	r0, 800236e <_svfiprintf_r+0x2e>
 8002364:	230c      	movs	r3, #12
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236c:	e0d1      	b.n	8002512 <_svfiprintf_r+0x1d2>
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	616b      	str	r3, [r5, #20]
 8002372:	2300      	movs	r3, #0
 8002374:	9309      	str	r3, [sp, #36]	; 0x24
 8002376:	2320      	movs	r3, #32
 8002378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800237c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002380:	2330      	movs	r3, #48	; 0x30
 8002382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800252c <_svfiprintf_r+0x1ec>
 8002386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800238a:	f04f 0901 	mov.w	r9, #1
 800238e:	4623      	mov	r3, r4
 8002390:	469a      	mov	sl, r3
 8002392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002396:	b10a      	cbz	r2, 800239c <_svfiprintf_r+0x5c>
 8002398:	2a25      	cmp	r2, #37	; 0x25
 800239a:	d1f9      	bne.n	8002390 <_svfiprintf_r+0x50>
 800239c:	ebba 0b04 	subs.w	fp, sl, r4
 80023a0:	d00b      	beq.n	80023ba <_svfiprintf_r+0x7a>
 80023a2:	465b      	mov	r3, fp
 80023a4:	4622      	mov	r2, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	4638      	mov	r0, r7
 80023aa:	f7ff ff6d 	bl	8002288 <__ssputs_r>
 80023ae:	3001      	adds	r0, #1
 80023b0:	f000 80aa 	beq.w	8002508 <_svfiprintf_r+0x1c8>
 80023b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023b6:	445a      	add	r2, fp
 80023b8:	9209      	str	r2, [sp, #36]	; 0x24
 80023ba:	f89a 3000 	ldrb.w	r3, [sl]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a2 	beq.w	8002508 <_svfiprintf_r+0x1c8>
 80023c4:	2300      	movs	r3, #0
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023ce:	f10a 0a01 	add.w	sl, sl, #1
 80023d2:	9304      	str	r3, [sp, #16]
 80023d4:	9307      	str	r3, [sp, #28]
 80023d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023da:	931a      	str	r3, [sp, #104]	; 0x68
 80023dc:	4654      	mov	r4, sl
 80023de:	2205      	movs	r2, #5
 80023e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023e4:	4851      	ldr	r0, [pc, #324]	; (800252c <_svfiprintf_r+0x1ec>)
 80023e6:	f7fd fef3 	bl	80001d0 <memchr>
 80023ea:	9a04      	ldr	r2, [sp, #16]
 80023ec:	b9d8      	cbnz	r0, 8002426 <_svfiprintf_r+0xe6>
 80023ee:	06d0      	lsls	r0, r2, #27
 80023f0:	bf44      	itt	mi
 80023f2:	2320      	movmi	r3, #32
 80023f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023f8:	0711      	lsls	r1, r2, #28
 80023fa:	bf44      	itt	mi
 80023fc:	232b      	movmi	r3, #43	; 0x2b
 80023fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002402:	f89a 3000 	ldrb.w	r3, [sl]
 8002406:	2b2a      	cmp	r3, #42	; 0x2a
 8002408:	d015      	beq.n	8002436 <_svfiprintf_r+0xf6>
 800240a:	9a07      	ldr	r2, [sp, #28]
 800240c:	4654      	mov	r4, sl
 800240e:	2000      	movs	r0, #0
 8002410:	f04f 0c0a 	mov.w	ip, #10
 8002414:	4621      	mov	r1, r4
 8002416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800241a:	3b30      	subs	r3, #48	; 0x30
 800241c:	2b09      	cmp	r3, #9
 800241e:	d94e      	bls.n	80024be <_svfiprintf_r+0x17e>
 8002420:	b1b0      	cbz	r0, 8002450 <_svfiprintf_r+0x110>
 8002422:	9207      	str	r2, [sp, #28]
 8002424:	e014      	b.n	8002450 <_svfiprintf_r+0x110>
 8002426:	eba0 0308 	sub.w	r3, r0, r8
 800242a:	fa09 f303 	lsl.w	r3, r9, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	9304      	str	r3, [sp, #16]
 8002432:	46a2      	mov	sl, r4
 8002434:	e7d2      	b.n	80023dc <_svfiprintf_r+0x9c>
 8002436:	9b03      	ldr	r3, [sp, #12]
 8002438:	1d19      	adds	r1, r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	9103      	str	r1, [sp, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfbb      	ittet	lt
 8002442:	425b      	neglt	r3, r3
 8002444:	f042 0202 	orrlt.w	r2, r2, #2
 8002448:	9307      	strge	r3, [sp, #28]
 800244a:	9307      	strlt	r3, [sp, #28]
 800244c:	bfb8      	it	lt
 800244e:	9204      	strlt	r2, [sp, #16]
 8002450:	7823      	ldrb	r3, [r4, #0]
 8002452:	2b2e      	cmp	r3, #46	; 0x2e
 8002454:	d10c      	bne.n	8002470 <_svfiprintf_r+0x130>
 8002456:	7863      	ldrb	r3, [r4, #1]
 8002458:	2b2a      	cmp	r3, #42	; 0x2a
 800245a:	d135      	bne.n	80024c8 <_svfiprintf_r+0x188>
 800245c:	9b03      	ldr	r3, [sp, #12]
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	9203      	str	r2, [sp, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	bfb8      	it	lt
 8002468:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800246c:	3402      	adds	r4, #2
 800246e:	9305      	str	r3, [sp, #20]
 8002470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800253c <_svfiprintf_r+0x1fc>
 8002474:	7821      	ldrb	r1, [r4, #0]
 8002476:	2203      	movs	r2, #3
 8002478:	4650      	mov	r0, sl
 800247a:	f7fd fea9 	bl	80001d0 <memchr>
 800247e:	b140      	cbz	r0, 8002492 <_svfiprintf_r+0x152>
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	eba0 000a 	sub.w	r0, r0, sl
 8002486:	fa03 f000 	lsl.w	r0, r3, r0
 800248a:	9b04      	ldr	r3, [sp, #16]
 800248c:	4303      	orrs	r3, r0
 800248e:	3401      	adds	r4, #1
 8002490:	9304      	str	r3, [sp, #16]
 8002492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002496:	4826      	ldr	r0, [pc, #152]	; (8002530 <_svfiprintf_r+0x1f0>)
 8002498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800249c:	2206      	movs	r2, #6
 800249e:	f7fd fe97 	bl	80001d0 <memchr>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d038      	beq.n	8002518 <_svfiprintf_r+0x1d8>
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <_svfiprintf_r+0x1f4>)
 80024a8:	bb1b      	cbnz	r3, 80024f2 <_svfiprintf_r+0x1b2>
 80024aa:	9b03      	ldr	r3, [sp, #12]
 80024ac:	3307      	adds	r3, #7
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	3308      	adds	r3, #8
 80024b4:	9303      	str	r3, [sp, #12]
 80024b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024b8:	4433      	add	r3, r6
 80024ba:	9309      	str	r3, [sp, #36]	; 0x24
 80024bc:	e767      	b.n	800238e <_svfiprintf_r+0x4e>
 80024be:	fb0c 3202 	mla	r2, ip, r2, r3
 80024c2:	460c      	mov	r4, r1
 80024c4:	2001      	movs	r0, #1
 80024c6:	e7a5      	b.n	8002414 <_svfiprintf_r+0xd4>
 80024c8:	2300      	movs	r3, #0
 80024ca:	3401      	adds	r4, #1
 80024cc:	9305      	str	r3, [sp, #20]
 80024ce:	4619      	mov	r1, r3
 80024d0:	f04f 0c0a 	mov.w	ip, #10
 80024d4:	4620      	mov	r0, r4
 80024d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024da:	3a30      	subs	r2, #48	; 0x30
 80024dc:	2a09      	cmp	r2, #9
 80024de:	d903      	bls.n	80024e8 <_svfiprintf_r+0x1a8>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0c5      	beq.n	8002470 <_svfiprintf_r+0x130>
 80024e4:	9105      	str	r1, [sp, #20]
 80024e6:	e7c3      	b.n	8002470 <_svfiprintf_r+0x130>
 80024e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80024ec:	4604      	mov	r4, r0
 80024ee:	2301      	movs	r3, #1
 80024f0:	e7f0      	b.n	80024d4 <_svfiprintf_r+0x194>
 80024f2:	ab03      	add	r3, sp, #12
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	462a      	mov	r2, r5
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <_svfiprintf_r+0x1f8>)
 80024fa:	a904      	add	r1, sp, #16
 80024fc:	4638      	mov	r0, r7
 80024fe:	f3af 8000 	nop.w
 8002502:	1c42      	adds	r2, r0, #1
 8002504:	4606      	mov	r6, r0
 8002506:	d1d6      	bne.n	80024b6 <_svfiprintf_r+0x176>
 8002508:	89ab      	ldrh	r3, [r5, #12]
 800250a:	065b      	lsls	r3, r3, #25
 800250c:	f53f af2c 	bmi.w	8002368 <_svfiprintf_r+0x28>
 8002510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002512:	b01d      	add	sp, #116	; 0x74
 8002514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002518:	ab03      	add	r3, sp, #12
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	462a      	mov	r2, r5
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <_svfiprintf_r+0x1f8>)
 8002520:	a904      	add	r1, sp, #16
 8002522:	4638      	mov	r0, r7
 8002524:	f000 f87a 	bl	800261c <_printf_i>
 8002528:	e7eb      	b.n	8002502 <_svfiprintf_r+0x1c2>
 800252a:	bf00      	nop
 800252c:	080029ac 	.word	0x080029ac
 8002530:	080029b6 	.word	0x080029b6
 8002534:	00000000 	.word	0x00000000
 8002538:	08002289 	.word	0x08002289
 800253c:	080029b2 	.word	0x080029b2

08002540 <_printf_common>:
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	4616      	mov	r6, r2
 8002546:	4699      	mov	r9, r3
 8002548:	688a      	ldr	r2, [r1, #8]
 800254a:	690b      	ldr	r3, [r1, #16]
 800254c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002550:	4293      	cmp	r3, r2
 8002552:	bfb8      	it	lt
 8002554:	4613      	movlt	r3, r2
 8002556:	6033      	str	r3, [r6, #0]
 8002558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800255c:	4607      	mov	r7, r0
 800255e:	460c      	mov	r4, r1
 8002560:	b10a      	cbz	r2, 8002566 <_printf_common+0x26>
 8002562:	3301      	adds	r3, #1
 8002564:	6033      	str	r3, [r6, #0]
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	0699      	lsls	r1, r3, #26
 800256a:	bf42      	ittt	mi
 800256c:	6833      	ldrmi	r3, [r6, #0]
 800256e:	3302      	addmi	r3, #2
 8002570:	6033      	strmi	r3, [r6, #0]
 8002572:	6825      	ldr	r5, [r4, #0]
 8002574:	f015 0506 	ands.w	r5, r5, #6
 8002578:	d106      	bne.n	8002588 <_printf_common+0x48>
 800257a:	f104 0a19 	add.w	sl, r4, #25
 800257e:	68e3      	ldr	r3, [r4, #12]
 8002580:	6832      	ldr	r2, [r6, #0]
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	42ab      	cmp	r3, r5
 8002586:	dc26      	bgt.n	80025d6 <_printf_common+0x96>
 8002588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	bf18      	it	ne
 8002592:	2301      	movne	r3, #1
 8002594:	0692      	lsls	r2, r2, #26
 8002596:	d42b      	bmi.n	80025f0 <_printf_common+0xb0>
 8002598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800259c:	4649      	mov	r1, r9
 800259e:	4638      	mov	r0, r7
 80025a0:	47c0      	blx	r8
 80025a2:	3001      	adds	r0, #1
 80025a4:	d01e      	beq.n	80025e4 <_printf_common+0xa4>
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	68e5      	ldr	r5, [r4, #12]
 80025aa:	6832      	ldr	r2, [r6, #0]
 80025ac:	f003 0306 	and.w	r3, r3, #6
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	bf08      	it	eq
 80025b4:	1aad      	subeq	r5, r5, r2
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	6922      	ldr	r2, [r4, #16]
 80025ba:	bf0c      	ite	eq
 80025bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025c0:	2500      	movne	r5, #0
 80025c2:	4293      	cmp	r3, r2
 80025c4:	bfc4      	itt	gt
 80025c6:	1a9b      	subgt	r3, r3, r2
 80025c8:	18ed      	addgt	r5, r5, r3
 80025ca:	2600      	movs	r6, #0
 80025cc:	341a      	adds	r4, #26
 80025ce:	42b5      	cmp	r5, r6
 80025d0:	d11a      	bne.n	8002608 <_printf_common+0xc8>
 80025d2:	2000      	movs	r0, #0
 80025d4:	e008      	b.n	80025e8 <_printf_common+0xa8>
 80025d6:	2301      	movs	r3, #1
 80025d8:	4652      	mov	r2, sl
 80025da:	4649      	mov	r1, r9
 80025dc:	4638      	mov	r0, r7
 80025de:	47c0      	blx	r8
 80025e0:	3001      	adds	r0, #1
 80025e2:	d103      	bne.n	80025ec <_printf_common+0xac>
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ec:	3501      	adds	r5, #1
 80025ee:	e7c6      	b.n	800257e <_printf_common+0x3e>
 80025f0:	18e1      	adds	r1, r4, r3
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	2030      	movs	r0, #48	; 0x30
 80025f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025fa:	4422      	add	r2, r4
 80025fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002604:	3302      	adds	r3, #2
 8002606:	e7c7      	b.n	8002598 <_printf_common+0x58>
 8002608:	2301      	movs	r3, #1
 800260a:	4622      	mov	r2, r4
 800260c:	4649      	mov	r1, r9
 800260e:	4638      	mov	r0, r7
 8002610:	47c0      	blx	r8
 8002612:	3001      	adds	r0, #1
 8002614:	d0e6      	beq.n	80025e4 <_printf_common+0xa4>
 8002616:	3601      	adds	r6, #1
 8002618:	e7d9      	b.n	80025ce <_printf_common+0x8e>
	...

0800261c <_printf_i>:
 800261c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	7e0f      	ldrb	r7, [r1, #24]
 8002622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002624:	2f78      	cmp	r7, #120	; 0x78
 8002626:	4691      	mov	r9, r2
 8002628:	4680      	mov	r8, r0
 800262a:	460c      	mov	r4, r1
 800262c:	469a      	mov	sl, r3
 800262e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002632:	d807      	bhi.n	8002644 <_printf_i+0x28>
 8002634:	2f62      	cmp	r7, #98	; 0x62
 8002636:	d80a      	bhi.n	800264e <_printf_i+0x32>
 8002638:	2f00      	cmp	r7, #0
 800263a:	f000 80d8 	beq.w	80027ee <_printf_i+0x1d2>
 800263e:	2f58      	cmp	r7, #88	; 0x58
 8002640:	f000 80a3 	beq.w	800278a <_printf_i+0x16e>
 8002644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800264c:	e03a      	b.n	80026c4 <_printf_i+0xa8>
 800264e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002652:	2b15      	cmp	r3, #21
 8002654:	d8f6      	bhi.n	8002644 <_printf_i+0x28>
 8002656:	a101      	add	r1, pc, #4	; (adr r1, 800265c <_printf_i+0x40>)
 8002658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800265c:	080026b5 	.word	0x080026b5
 8002660:	080026c9 	.word	0x080026c9
 8002664:	08002645 	.word	0x08002645
 8002668:	08002645 	.word	0x08002645
 800266c:	08002645 	.word	0x08002645
 8002670:	08002645 	.word	0x08002645
 8002674:	080026c9 	.word	0x080026c9
 8002678:	08002645 	.word	0x08002645
 800267c:	08002645 	.word	0x08002645
 8002680:	08002645 	.word	0x08002645
 8002684:	08002645 	.word	0x08002645
 8002688:	080027d5 	.word	0x080027d5
 800268c:	080026f9 	.word	0x080026f9
 8002690:	080027b7 	.word	0x080027b7
 8002694:	08002645 	.word	0x08002645
 8002698:	08002645 	.word	0x08002645
 800269c:	080027f7 	.word	0x080027f7
 80026a0:	08002645 	.word	0x08002645
 80026a4:	080026f9 	.word	0x080026f9
 80026a8:	08002645 	.word	0x08002645
 80026ac:	08002645 	.word	0x08002645
 80026b0:	080027bf 	.word	0x080027bf
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	1d1a      	adds	r2, r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	602a      	str	r2, [r5, #0]
 80026bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0a3      	b.n	8002810 <_printf_i+0x1f4>
 80026c8:	6820      	ldr	r0, [r4, #0]
 80026ca:	6829      	ldr	r1, [r5, #0]
 80026cc:	0606      	lsls	r6, r0, #24
 80026ce:	f101 0304 	add.w	r3, r1, #4
 80026d2:	d50a      	bpl.n	80026ea <_printf_i+0xce>
 80026d4:	680e      	ldr	r6, [r1, #0]
 80026d6:	602b      	str	r3, [r5, #0]
 80026d8:	2e00      	cmp	r6, #0
 80026da:	da03      	bge.n	80026e4 <_printf_i+0xc8>
 80026dc:	232d      	movs	r3, #45	; 0x2d
 80026de:	4276      	negs	r6, r6
 80026e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e4:	485e      	ldr	r0, [pc, #376]	; (8002860 <_printf_i+0x244>)
 80026e6:	230a      	movs	r3, #10
 80026e8:	e019      	b.n	800271e <_printf_i+0x102>
 80026ea:	680e      	ldr	r6, [r1, #0]
 80026ec:	602b      	str	r3, [r5, #0]
 80026ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026f2:	bf18      	it	ne
 80026f4:	b236      	sxthne	r6, r6
 80026f6:	e7ef      	b.n	80026d8 <_printf_i+0xbc>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	6820      	ldr	r0, [r4, #0]
 80026fc:	1d19      	adds	r1, r3, #4
 80026fe:	6029      	str	r1, [r5, #0]
 8002700:	0601      	lsls	r1, r0, #24
 8002702:	d501      	bpl.n	8002708 <_printf_i+0xec>
 8002704:	681e      	ldr	r6, [r3, #0]
 8002706:	e002      	b.n	800270e <_printf_i+0xf2>
 8002708:	0646      	lsls	r6, r0, #25
 800270a:	d5fb      	bpl.n	8002704 <_printf_i+0xe8>
 800270c:	881e      	ldrh	r6, [r3, #0]
 800270e:	4854      	ldr	r0, [pc, #336]	; (8002860 <_printf_i+0x244>)
 8002710:	2f6f      	cmp	r7, #111	; 0x6f
 8002712:	bf0c      	ite	eq
 8002714:	2308      	moveq	r3, #8
 8002716:	230a      	movne	r3, #10
 8002718:	2100      	movs	r1, #0
 800271a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800271e:	6865      	ldr	r5, [r4, #4]
 8002720:	60a5      	str	r5, [r4, #8]
 8002722:	2d00      	cmp	r5, #0
 8002724:	bfa2      	ittt	ge
 8002726:	6821      	ldrge	r1, [r4, #0]
 8002728:	f021 0104 	bicge.w	r1, r1, #4
 800272c:	6021      	strge	r1, [r4, #0]
 800272e:	b90e      	cbnz	r6, 8002734 <_printf_i+0x118>
 8002730:	2d00      	cmp	r5, #0
 8002732:	d04d      	beq.n	80027d0 <_printf_i+0x1b4>
 8002734:	4615      	mov	r5, r2
 8002736:	fbb6 f1f3 	udiv	r1, r6, r3
 800273a:	fb03 6711 	mls	r7, r3, r1, r6
 800273e:	5dc7      	ldrb	r7, [r0, r7]
 8002740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002744:	4637      	mov	r7, r6
 8002746:	42bb      	cmp	r3, r7
 8002748:	460e      	mov	r6, r1
 800274a:	d9f4      	bls.n	8002736 <_printf_i+0x11a>
 800274c:	2b08      	cmp	r3, #8
 800274e:	d10b      	bne.n	8002768 <_printf_i+0x14c>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	07de      	lsls	r6, r3, #31
 8002754:	d508      	bpl.n	8002768 <_printf_i+0x14c>
 8002756:	6923      	ldr	r3, [r4, #16]
 8002758:	6861      	ldr	r1, [r4, #4]
 800275a:	4299      	cmp	r1, r3
 800275c:	bfde      	ittt	le
 800275e:	2330      	movle	r3, #48	; 0x30
 8002760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002764:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002768:	1b52      	subs	r2, r2, r5
 800276a:	6122      	str	r2, [r4, #16]
 800276c:	f8cd a000 	str.w	sl, [sp]
 8002770:	464b      	mov	r3, r9
 8002772:	aa03      	add	r2, sp, #12
 8002774:	4621      	mov	r1, r4
 8002776:	4640      	mov	r0, r8
 8002778:	f7ff fee2 	bl	8002540 <_printf_common>
 800277c:	3001      	adds	r0, #1
 800277e:	d14c      	bne.n	800281a <_printf_i+0x1fe>
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002784:	b004      	add	sp, #16
 8002786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278a:	4835      	ldr	r0, [pc, #212]	; (8002860 <_printf_i+0x244>)
 800278c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002790:	6829      	ldr	r1, [r5, #0]
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	f851 6b04 	ldr.w	r6, [r1], #4
 8002798:	6029      	str	r1, [r5, #0]
 800279a:	061d      	lsls	r5, r3, #24
 800279c:	d514      	bpl.n	80027c8 <_printf_i+0x1ac>
 800279e:	07df      	lsls	r7, r3, #31
 80027a0:	bf44      	itt	mi
 80027a2:	f043 0320 	orrmi.w	r3, r3, #32
 80027a6:	6023      	strmi	r3, [r4, #0]
 80027a8:	b91e      	cbnz	r6, 80027b2 <_printf_i+0x196>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	f023 0320 	bic.w	r3, r3, #32
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	2310      	movs	r3, #16
 80027b4:	e7b0      	b.n	8002718 <_printf_i+0xfc>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	2378      	movs	r3, #120	; 0x78
 80027c0:	4828      	ldr	r0, [pc, #160]	; (8002864 <_printf_i+0x248>)
 80027c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027c6:	e7e3      	b.n	8002790 <_printf_i+0x174>
 80027c8:	0659      	lsls	r1, r3, #25
 80027ca:	bf48      	it	mi
 80027cc:	b2b6      	uxthmi	r6, r6
 80027ce:	e7e6      	b.n	800279e <_printf_i+0x182>
 80027d0:	4615      	mov	r5, r2
 80027d2:	e7bb      	b.n	800274c <_printf_i+0x130>
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	6826      	ldr	r6, [r4, #0]
 80027d8:	6961      	ldr	r1, [r4, #20]
 80027da:	1d18      	adds	r0, r3, #4
 80027dc:	6028      	str	r0, [r5, #0]
 80027de:	0635      	lsls	r5, r6, #24
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	d501      	bpl.n	80027e8 <_printf_i+0x1cc>
 80027e4:	6019      	str	r1, [r3, #0]
 80027e6:	e002      	b.n	80027ee <_printf_i+0x1d2>
 80027e8:	0670      	lsls	r0, r6, #25
 80027ea:	d5fb      	bpl.n	80027e4 <_printf_i+0x1c8>
 80027ec:	8019      	strh	r1, [r3, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	6123      	str	r3, [r4, #16]
 80027f2:	4615      	mov	r5, r2
 80027f4:	e7ba      	b.n	800276c <_printf_i+0x150>
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	1d1a      	adds	r2, r3, #4
 80027fa:	602a      	str	r2, [r5, #0]
 80027fc:	681d      	ldr	r5, [r3, #0]
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	2100      	movs	r1, #0
 8002802:	4628      	mov	r0, r5
 8002804:	f7fd fce4 	bl	80001d0 <memchr>
 8002808:	b108      	cbz	r0, 800280e <_printf_i+0x1f2>
 800280a:	1b40      	subs	r0, r0, r5
 800280c:	6060      	str	r0, [r4, #4]
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	2300      	movs	r3, #0
 8002814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002818:	e7a8      	b.n	800276c <_printf_i+0x150>
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	462a      	mov	r2, r5
 800281e:	4649      	mov	r1, r9
 8002820:	4640      	mov	r0, r8
 8002822:	47d0      	blx	sl
 8002824:	3001      	adds	r0, #1
 8002826:	d0ab      	beq.n	8002780 <_printf_i+0x164>
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	079b      	lsls	r3, r3, #30
 800282c:	d413      	bmi.n	8002856 <_printf_i+0x23a>
 800282e:	68e0      	ldr	r0, [r4, #12]
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	4298      	cmp	r0, r3
 8002834:	bfb8      	it	lt
 8002836:	4618      	movlt	r0, r3
 8002838:	e7a4      	b.n	8002784 <_printf_i+0x168>
 800283a:	2301      	movs	r3, #1
 800283c:	4632      	mov	r2, r6
 800283e:	4649      	mov	r1, r9
 8002840:	4640      	mov	r0, r8
 8002842:	47d0      	blx	sl
 8002844:	3001      	adds	r0, #1
 8002846:	d09b      	beq.n	8002780 <_printf_i+0x164>
 8002848:	3501      	adds	r5, #1
 800284a:	68e3      	ldr	r3, [r4, #12]
 800284c:	9903      	ldr	r1, [sp, #12]
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	42ab      	cmp	r3, r5
 8002852:	dcf2      	bgt.n	800283a <_printf_i+0x21e>
 8002854:	e7eb      	b.n	800282e <_printf_i+0x212>
 8002856:	2500      	movs	r5, #0
 8002858:	f104 0619 	add.w	r6, r4, #25
 800285c:	e7f5      	b.n	800284a <_printf_i+0x22e>
 800285e:	bf00      	nop
 8002860:	080029bd 	.word	0x080029bd
 8002864:	080029ce 	.word	0x080029ce

08002868 <__retarget_lock_acquire_recursive>:
 8002868:	4770      	bx	lr

0800286a <__retarget_lock_release_recursive>:
 800286a:	4770      	bx	lr

0800286c <memcpy>:
 800286c:	440a      	add	r2, r1
 800286e:	4291      	cmp	r1, r2
 8002870:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002874:	d100      	bne.n	8002878 <memcpy+0xc>
 8002876:	4770      	bx	lr
 8002878:	b510      	push	{r4, lr}
 800287a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800287e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002882:	4291      	cmp	r1, r2
 8002884:	d1f9      	bne.n	800287a <memcpy+0xe>
 8002886:	bd10      	pop	{r4, pc}

08002888 <memmove>:
 8002888:	4288      	cmp	r0, r1
 800288a:	b510      	push	{r4, lr}
 800288c:	eb01 0402 	add.w	r4, r1, r2
 8002890:	d902      	bls.n	8002898 <memmove+0x10>
 8002892:	4284      	cmp	r4, r0
 8002894:	4623      	mov	r3, r4
 8002896:	d807      	bhi.n	80028a8 <memmove+0x20>
 8002898:	1e43      	subs	r3, r0, #1
 800289a:	42a1      	cmp	r1, r4
 800289c:	d008      	beq.n	80028b0 <memmove+0x28>
 800289e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028a6:	e7f8      	b.n	800289a <memmove+0x12>
 80028a8:	4402      	add	r2, r0
 80028aa:	4601      	mov	r1, r0
 80028ac:	428a      	cmp	r2, r1
 80028ae:	d100      	bne.n	80028b2 <memmove+0x2a>
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028ba:	e7f7      	b.n	80028ac <memmove+0x24>

080028bc <_realloc_r>:
 80028bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c0:	4680      	mov	r8, r0
 80028c2:	4614      	mov	r4, r2
 80028c4:	460e      	mov	r6, r1
 80028c6:	b921      	cbnz	r1, 80028d2 <_realloc_r+0x16>
 80028c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028cc:	4611      	mov	r1, r2
 80028ce:	f7ff bc2b 	b.w	8002128 <_malloc_r>
 80028d2:	b92a      	cbnz	r2, 80028e0 <_realloc_r+0x24>
 80028d4:	f7ff fbbc 	bl	8002050 <_free_r>
 80028d8:	4625      	mov	r5, r4
 80028da:	4628      	mov	r0, r5
 80028dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028e0:	f000 f81b 	bl	800291a <_malloc_usable_size_r>
 80028e4:	4284      	cmp	r4, r0
 80028e6:	4607      	mov	r7, r0
 80028e8:	d802      	bhi.n	80028f0 <_realloc_r+0x34>
 80028ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028ee:	d812      	bhi.n	8002916 <_realloc_r+0x5a>
 80028f0:	4621      	mov	r1, r4
 80028f2:	4640      	mov	r0, r8
 80028f4:	f7ff fc18 	bl	8002128 <_malloc_r>
 80028f8:	4605      	mov	r5, r0
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0ed      	beq.n	80028da <_realloc_r+0x1e>
 80028fe:	42bc      	cmp	r4, r7
 8002900:	4622      	mov	r2, r4
 8002902:	4631      	mov	r1, r6
 8002904:	bf28      	it	cs
 8002906:	463a      	movcs	r2, r7
 8002908:	f7ff ffb0 	bl	800286c <memcpy>
 800290c:	4631      	mov	r1, r6
 800290e:	4640      	mov	r0, r8
 8002910:	f7ff fb9e 	bl	8002050 <_free_r>
 8002914:	e7e1      	b.n	80028da <_realloc_r+0x1e>
 8002916:	4635      	mov	r5, r6
 8002918:	e7df      	b.n	80028da <_realloc_r+0x1e>

0800291a <_malloc_usable_size_r>:
 800291a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800291e:	1f18      	subs	r0, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	bfbc      	itt	lt
 8002924:	580b      	ldrlt	r3, [r1, r0]
 8002926:	18c0      	addlt	r0, r0, r3
 8002928:	4770      	bx	lr
	...

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
