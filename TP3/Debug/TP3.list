
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004920  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bec  08004bec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf4  08004bf4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000000ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b806  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002584  00000000  00000000  0002b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0002de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007f0  00000000  00000000  0002e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232af  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e340  00000000  00000000  0005220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5a5  00000000  00000000  0006054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aaf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002638  00000000  00000000  0012ab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a98 	.word	0x08004a98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004a98 	.word	0x08004a98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <DAC_GPIO_Init>:
 |------------------------------------ DAC_GPIO_Init ------------------------------------|
 |			This function initializes the GPIOs for the use of the library.			   	 |
 |_______________________________________________________________________________________|
*/
void DAC_GPIO_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  RCC->AHB1ENR |= 0x8F;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <DAC_GPIO_Init+0x58>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <DAC_GPIO_Init+0x58>)
 800057e:	f043 038f 	orr.w	r3, r3, #143	; 0x8f
 8000582:	6313      	str	r3, [r2, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  GPIOD->BSRR &= ~(1<<4);
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 800058a:	f023 0310 	bic.w	r3, r3, #16
 800058e:	6193      	str	r3, [r2, #24]

  /*Configure GPIO pin : RESET_DAC_Pin */
  GPIOD->MODER |= 0x100;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
  GPIOD->OTYPER &= ~(1<<4);
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 80005a2:	f023 0310 	bic.w	r3, r3, #16
 80005a6:	6053      	str	r3, [r2, #4]
  GPIOD->PUPDR &= ~(3<<8);
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 80005ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005b2:	60d3      	str	r3, [r2, #12]
  GPIOD->OSPEEDR &= ~(3<<8);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <DAC_GPIO_Init+0x5c>)
 80005ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005be:	6093      	str	r3, [r2, #8]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <DAC_Power_Up>:
 |----------------------------------- DAC_Power_Up --------------------------------------|
 |	 In this function, the DAC is powered up and initialized. The Reset Pin PD4 is		 |
 |	 	 	 	maintained high. I2C bus is used to communicate with the DAC.			 |
 |_______________________________________________________________________________________|
*/
void DAC_Power_Up(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

	GPIOD->BSRR = 0x00000010;				//Pin PD4 high (reset pin of the DAC)
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <DAC_Power_Up+0xa8>)
 80005da:	2210      	movs	r2, #16
 80005dc:	619a      	str	r2, [r3, #24]

//Initializing the DAC as we want
	I2C_buffer[0] = POWER_CTRL_2;
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <DAC_Power_Up+0xac>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0xA0;					//Turning headphone channel and speaker channel ON
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <DAC_Power_Up+0xac>)
 80005e6:	22a0      	movs	r2, #160	; 0xa0
 80005e8:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 80005ea:	2202      	movs	r2, #2
 80005ec:	4924      	ldr	r1, [pc, #144]	; (8000680 <DAC_Power_Up+0xac>)
 80005ee:	2094      	movs	r0, #148	; 0x94
 80005f0:	f000 fb16 	bl	8000c20 <I2C_Master_Transmit>

	I2C_buffer[0] = ITRF_CTRL_1;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <DAC_Power_Up+0xac>)
 80005f6:	2206      	movs	r2, #6
 80005f8:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x87;					//Enable I2S clocking control, Master only
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <DAC_Power_Up+0xac>)
 80005fc:	2287      	movs	r2, #135	; 0x87
 80005fe:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 8000600:	2202      	movs	r2, #2
 8000602:	491f      	ldr	r1, [pc, #124]	; (8000680 <DAC_Power_Up+0xac>)
 8000604:	2094      	movs	r0, #148	; 0x94
 8000606:	f000 fb0b 	bl	8000c20 <I2C_Master_Transmit>


//Initializing the DAC, datasheet's procedure
	I2C_buffer[0] = 0x00;
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <DAC_Power_Up+0xac>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x99;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <DAC_Power_Up+0xac>)
 8000612:	2299      	movs	r2, #153	; 0x99
 8000614:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 8000616:	2202      	movs	r2, #2
 8000618:	4919      	ldr	r1, [pc, #100]	; (8000680 <DAC_Power_Up+0xac>)
 800061a:	2094      	movs	r0, #148	; 0x94
 800061c:	f000 fb00 	bl	8000c20 <I2C_Master_Transmit>

	I2C_buffer[0] = 0x47;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <DAC_Power_Up+0xac>)
 8000622:	2247      	movs	r2, #71	; 0x47
 8000624:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x80;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <DAC_Power_Up+0xac>)
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 800062c:	2202      	movs	r2, #2
 800062e:	4914      	ldr	r1, [pc, #80]	; (8000680 <DAC_Power_Up+0xac>)
 8000630:	2094      	movs	r0, #148	; 0x94
 8000632:	f000 faf5 	bl	8000c20 <I2C_Master_Transmit>

	I2C_buffer[0] = 0x32;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <DAC_Power_Up+0xac>)
 8000638:	2232      	movs	r2, #50	; 0x32
 800063a:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x80;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <DAC_Power_Up+0xac>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 8000642:	2202      	movs	r2, #2
 8000644:	490e      	ldr	r1, [pc, #56]	; (8000680 <DAC_Power_Up+0xac>)
 8000646:	2094      	movs	r0, #148	; 0x94
 8000648:	f000 faea 	bl	8000c20 <I2C_Master_Transmit>

	I2C_buffer[0] = 0x00;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <DAC_Power_Up+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x00;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <DAC_Power_Up+0xac>)
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 8000658:	2202      	movs	r2, #2
 800065a:	4909      	ldr	r1, [pc, #36]	; (8000680 <DAC_Power_Up+0xac>)
 800065c:	2094      	movs	r0, #148	; 0x94
 800065e:	f000 fadf 	bl	8000c20 <I2C_Master_Transmit>

	I2C_buffer[0] = 0x02;						//Power Control 1 register
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <DAC_Power_Up+0xac>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
	I2C_buffer[1] = 0x9E;						//Power-Up the DAC
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <DAC_Power_Up+0xac>)
 800066a:	229e      	movs	r2, #158	; 0x9e
 800066c:	705a      	strb	r2, [r3, #1]
	I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 800066e:	2202      	movs	r2, #2
 8000670:	4903      	ldr	r1, [pc, #12]	; (8000680 <DAC_Power_Up+0xac>)
 8000672:	2094      	movs	r0, #148	; 0x94
 8000674:	f000 fad4 	bl	8000c20 <I2C_Master_Transmit>

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020c00 	.word	0x40020c00
 8000680:	20000094 	.word	0x20000094

08000684 <Beep_Config>:
 |	 				the ON time, the OFF time and the volume are configured.			 |
 |				   The value of the registers are transmitted via the I2C bus.			 |
 |     Several macros are defined in the header to allow you to customize the sound.     |
 |_______________________________________________________________________________________|
*/
void Beep_Config(uint8_t beepDuration, uint8_t silenceDuration, uint8_t frequency){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	717b      	strb	r3, [r7, #5]

  //Configure the type of beep signal (multiple beep)
	  I2C_buffer[0] = BEEP_CONFIG_ADDR;						//DAC register of address 0x1E
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <Beep_Config+0x78>)
 8000698:	221e      	movs	r2, #30
 800069a:	701a      	strb	r2, [r3, #0]
	  I2C_buffer[1] = 0x80;									//Select the multiple beep mode
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <Beep_Config+0x78>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
	  I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 80006a2:	2202      	movs	r2, #2
 80006a4:	4915      	ldr	r1, [pc, #84]	; (80006fc <Beep_Config+0x78>)
 80006a6:	2094      	movs	r0, #148	; 0x94
 80006a8:	f000 faba 	bl	8000c20 <I2C_Master_Transmit>
	  I2C_buffer[1] = 0xC0;									//Select the continuous beep mode
	  I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
*/

  //Configure the beep frequency and the beep ON time
	  I2C_buffer[0] = BEEP_FREQ_ADDR;						//DAC register of address 0x1C
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <Beep_Config+0x78>)
 80006ae:	221c      	movs	r2, #28
 80006b0:	701a      	strb	r2, [r3, #0]
	  I2C_buffer[1] = (frequency << 4) | beepDuration;		//Set sound frequency and sound duration
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	b25a      	sxtb	r2, r3
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	4313      	orrs	r3, r2
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <Beep_Config+0x78>)
 80006c4:	705a      	strb	r2, [r3, #1]
	  I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 80006c6:	2202      	movs	r2, #2
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <Beep_Config+0x78>)
 80006ca:	2094      	movs	r0, #148	; 0x94
 80006cc:	f000 faa8 	bl	8000c20 <I2C_Master_Transmit>

  //Configure the beep OFF time and the beep volume
	  I2C_buffer[0] = BEEP_VOLUME_ADDR;						//DAC register of address 0x1D
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <Beep_Config+0x78>)
 80006d2:	221d      	movs	r2, #29
 80006d4:	701a      	strb	r2, [r3, #0]
	  I2C_buffer[1] = (silenceDuration << 5) | 0x1A;		//Set silence duration
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f043 031a 	orr.w	r3, r3, #26
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <Beep_Config+0x78>)
 80006e6:	705a      	strb	r2, [r3, #1]
	  I2C_Master_Transmit(DAC_ADDR_W, I2C_buffer, 2);
 80006e8:	2202      	movs	r2, #2
 80006ea:	4904      	ldr	r1, [pc, #16]	; (80006fc <Beep_Config+0x78>)
 80006ec:	2094      	movs	r0, #148	; 0x94
 80006ee:	f000 fa97 	bl	8000c20 <I2C_Master_Transmit>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000094 	.word	0x20000094

08000700 <Run_Alarm>:
/*_______________________________________________________________________________________
 |------------------------------------- Run_Alarm ---------------------------------------|
 |					Emitting the alarm by sending a frame on the I2S bus				 |
 |_______________________________________________________________________________________|
*/
void Run_Alarm(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	I2S_buffer[0] = 0xAAAA;							//Frame to send on the I2S bus
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <Run_Alarm+0x20>)
 8000706:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800070a:	801a      	strh	r2, [r3, #0]
	HAL_I2S_Transmit(&hi2s3, I2S_buffer, 1, 500);
 800070c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000710:	2201      	movs	r2, #1
 8000712:	4903      	ldr	r1, [pc, #12]	; (8000720 <Run_Alarm+0x20>)
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <Run_Alarm+0x24>)
 8000716:	f001 ffe3 	bl	80026e0 <HAL_I2S_Transmit>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000098 	.word	0x20000098
 8000724:	200000a4 	.word	0x200000a4

08000728 <LIS302DL_init>:



/*initalisation of the LIS3DSH*/
void LIS302DL_init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
			//Ecrire valeurs dans CTRL_REG5
			//default BW, 2g scale, self stale disabled, SPI 4Wires)
			SPIwrite(CTRL_REG5 & 0x7f, 0x00);
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <LIS302DL_init+0x30>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f000 ffc8 	bl	80016d0 <SPIwrite>

			//Ecrire valeurs dans CTRL_REG4
			//400Hz data rate, continuous update, axis enabled
			SPIwrite(CTRL_REG4 & 0x7f, 0x77);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LIS302DL_init+0x34>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2177      	movs	r1, #119	; 0x77
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ffbe 	bl	80016d0 <SPIwrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000004 	.word	0x20000004

08000760 <detecter>:
 *
 * Parameter in :
 * P [int] : sensitivity of the motion detection
 * */
uint16_t  detecter(int p)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint16_t MOVE;
	/*Initialisation de la variable MOVE*/
	MOVE=0;
 8000768:	2300      	movs	r3, #0
 800076a:	81fb      	strh	r3, [r7, #14]

	/*Acquisition à t1*/
	Z1=SPIread(0x2D | 0x80);
 800076c:	20ad      	movs	r0, #173	; 0xad
 800076e:	f000 fffb 	bl	8001768 <SPIread>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <detecter+0x58>)
 8000778:	601a      	str	r2, [r3, #0]

	/*DELAY*/
  	HAL_Delay(250);
 800077a:	20fa      	movs	r0, #250	; 0xfa
 800077c:	f001 fb6c 	bl	8001e58 <HAL_Delay>

  	/*Acquisition à t2*/
  	Z2=SPIread(0x2D | 0x80);
 8000780:	20ad      	movs	r0, #173	; 0xad
 8000782:	f000 fff1 	bl	8001768 <SPIread>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <detecter+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]

  	/*Comparaison des positions*/
  	if(abs(Z1-Z2)>=p)				//p est la sensibilité
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <detecter+0x58>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <detecter+0x5c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	bfb8      	it	lt
 800079c:	425b      	neglt	r3, r3
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dc03      	bgt.n	80007ac <detecter+0x4c>
  	{
  		MOVE=1;						//Incrémentation de la variable
 80007a4:	2301      	movs	r3, #1
 80007a6:	81fb      	strh	r3, [r7, #14]
  		newLine();					//Nouvelle line dans le terminal
 80007a8:	f001 fab0 	bl	8001d0c <newLine>
  		//serial_puts(msg_RAM2);		//Affichage du message dans le terminal
  	}
  	return MOVE;
 80007ac:	89fb      	ldrh	r3, [r7, #14]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000009c 	.word	0x2000009c
 80007bc:	200000a0 	.word	0x200000a0

080007c0 <ColorSensor_Send>:
	//necessary delay for the sensor
	HAL_Delay(3);
}


void ColorSensor_Send(uint8_t address,uint8_t data){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	//Setting the 7th bit of the register to 0, and writing the address we want to write to in the first 5 bit
	uint8_t command_register = _CMD | (address & 0x1F);
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	f003 031f 	and.w	r3, r3, #31
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	73fb      	strb	r3, [r7, #15]
	uint8_t data_buffer[2] = {command_register,data}; //Precede the data we want to write by the command
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	733b      	strb	r3, [r7, #12]
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	737b      	strb	r3, [r7, #13]
    I2C_Master_Transmit(_COLOR_W_ADDRESS, data_buffer, 2);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2202      	movs	r2, #2
 80007f0:	4619      	mov	r1, r3
 80007f2:	2052      	movs	r0, #82	; 0x52
 80007f4:	f000 fa14 	bl	8000c20 <I2C_Master_Transmit>

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <ColorSensor_Recive>:

uint8_t ColorSensor_Recive(uint8_t address){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	//Setting the 7th bit of the register to 0, and writing the address we want to read in the first 5 bit
	uint8_t command_register = _CMD | (address & 0x1F);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	b25b      	sxtb	r3, r3
 8000814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000818:	b25b      	sxtb	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
	I2C_Master_Transmit(_COLOR_W_ADDRESS, &command_register, 1);
 800081e:	f107 030f 	add.w	r3, r7, #15
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	2052      	movs	r0, #82	; 0x52
 8000828:	f000 f9fa 	bl	8000c20 <I2C_Master_Transmit>
	uint8_t data;
	I2C_Master_Receive(_COLOR_R_ADDRESS, &data, 1);
 800082c:	f107 030e 	add.w	r3, r7, #14
 8000830:	2201      	movs	r2, #1
 8000832:	4619      	mov	r1, r3
 8000834:	2053      	movs	r0, #83	; 0x53
 8000836:	f000 fa69 	bl	8000d0c <I2C_Master_Receive>
	return data;
 800083a:	7bbb      	ldrb	r3, [r7, #14]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <ColorSensor_Recive_U16>:

uint16_t ColorSensor_Recive_U16(uint8_t address){
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	return ColorSensor_Recive(address) + (ColorSensor_Recive(address+1) << 8);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffd5 	bl	8000800 <ColorSensor_Recive>
 8000856:	4603      	mov	r3, r0
 8000858:	b29c      	uxth	r4, r3
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffcd 	bl	8000800 <ColorSensor_Recive>
 8000866:	4603      	mov	r3, r0
 8000868:	b29b      	uxth	r3, r3
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b29b      	uxth	r3, r3
 800086e:	4423      	add	r3, r4
 8000870:	b29b      	uxth	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
	...

0800087c <Read_Color>:

uint16_t Read_Color(enum Color reg){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]

	uint16_t Out_color;
	 switch(reg){
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3b42      	subs	r3, #66	; 0x42
 800088a:	2b10      	cmp	r3, #16
 800088c:	d840      	bhi.n	8000910 <Read_Color+0x94>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <Read_Color+0x18>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	08000903 	.word	0x08000903
 8000898:	080008d9 	.word	0x080008d9
 800089c:	08000911 	.word	0x08000911
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000911 	.word	0x08000911
 80008a8:	080008f5 	.word	0x080008f5
 80008ac:	08000911 	.word	0x08000911
 80008b0:	08000911 	.word	0x08000911
 80008b4:	08000911 	.word	0x08000911
 80008b8:	08000911 	.word	0x08000911
 80008bc:	08000911 	.word	0x08000911
 80008c0:	08000911 	.word	0x08000911
 80008c4:	08000911 	.word	0x08000911
 80008c8:	08000911 	.word	0x08000911
 80008cc:	08000911 	.word	0x08000911
 80008d0:	08000911 	.word	0x08000911
 80008d4:	080008e7 	.word	0x080008e7
		case 'C':
					Out_color = ColorSensor_Recive_U16(_CDATA);
 80008d8:	2014      	movs	r0, #20
 80008da:	f7ff ffb3 	bl	8000844 <ColorSensor_Recive_U16>
 80008de:	4603      	mov	r3, r0
 80008e0:	81fb      	strh	r3, [r7, #14]
					return Out_color;
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	e015      	b.n	8000912 <Read_Color+0x96>
		case 'R':
					Out_color = ColorSensor_Recive_U16(_RDATA);
 80008e6:	2016      	movs	r0, #22
 80008e8:	f7ff ffac 	bl	8000844 <ColorSensor_Recive_U16>
 80008ec:	4603      	mov	r3, r0
 80008ee:	81fb      	strh	r3, [r7, #14]
					return Out_color;
 80008f0:	89fb      	ldrh	r3, [r7, #14]
 80008f2:	e00e      	b.n	8000912 <Read_Color+0x96>
		case 'G':
					Out_color = ColorSensor_Recive_U16(_GDATA);
 80008f4:	2018      	movs	r0, #24
 80008f6:	f7ff ffa5 	bl	8000844 <ColorSensor_Recive_U16>
 80008fa:	4603      	mov	r3, r0
 80008fc:	81fb      	strh	r3, [r7, #14]
					return Out_color;
 80008fe:	89fb      	ldrh	r3, [r7, #14]
 8000900:	e007      	b.n	8000912 <Read_Color+0x96>
		case 'B':
					Out_color = ColorSensor_Recive_U16(_BDATA);
 8000902:	201a      	movs	r0, #26
 8000904:	f7ff ff9e 	bl	8000844 <ColorSensor_Recive_U16>
 8000908:	4603      	mov	r3, r0
 800090a:	81fb      	strh	r3, [r7, #14]
					return Out_color;
 800090c:	89fb      	ldrh	r3, [r7, #14]
 800090e:	e000      	b.n	8000912 <Read_Color+0x96>
		default:
					return 0;
 8000910:	2300      	movs	r3, #0
	  }
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop

0800091c <Read_Color_All>:

ColorStruct16 Read_Color_All(){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	ColorStruct16 value;
	value.Blue = Read_Color(BLUE);
 8000924:	2042      	movs	r0, #66	; 0x42
 8000926:	f7ff ffa9 	bl	800087c <Read_Color>
 800092a:	4603      	mov	r3, r0
 800092c:	81bb      	strh	r3, [r7, #12]
	value.Green = Read_Color(GREEN);
 800092e:	2047      	movs	r0, #71	; 0x47
 8000930:	f7ff ffa4 	bl	800087c <Read_Color>
 8000934:	4603      	mov	r3, r0
 8000936:	817b      	strh	r3, [r7, #10]
	value.Red = Read_Color(RED);
 8000938:	2052      	movs	r0, #82	; 0x52
 800093a:	f7ff ff9f 	bl	800087c <Read_Color>
 800093e:	4603      	mov	r3, r0
 8000940:	813b      	strh	r3, [r7, #8]
	value.Clear = Read_Color(CLEAR);
 8000942:	2043      	movs	r0, #67	; 0x43
 8000944:	f7ff ff9a 	bl	800087c <Read_Color>
 8000948:	4603      	mov	r3, r0
 800094a:	81fb      	strh	r3, [r7, #14]
	return value;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	461a      	mov	r2, r3
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	cb03      	ldmia	r3!, {r0, r1}
 8000956:	6010      	str	r0, [r2, #0]
 8000958:	6051      	str	r1, [r2, #4]

}
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <Convert_Color_To_RGBC>:

RGBC Convert_Color_To_RGBC(ColorStruct16 Colours){
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	e883 0006 	stmia.w	r3, {r1, r2}
	RGBC value;
	value.Blue = ((float)Colours.Blue/(float)Colours.Clear * 255 < 255) ? (float)Colours.Blue/(float)Colours.Clear * 255 : 255;
 8000972:	893b      	ldrh	r3, [r7, #8]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800097c:	897b      	ldrh	r3, [r7, #10]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 800098e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000992:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 8000996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099e:	d516      	bpl.n	80009ce <Convert_Color_To_RGBC+0x6a>
 80009a0:	893b      	ldrh	r3, [r7, #8]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009b8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 80009bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c4:	edc7 7a00 	vstr	s15, [r7]
 80009c8:	783b      	ldrb	r3, [r7, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	e000      	b.n	80009d0 <Convert_Color_To_RGBC+0x6c>
 80009ce:	23ff      	movs	r3, #255	; 0xff
 80009d0:	74bb      	strb	r3, [r7, #18]
	value.Red = ((float)Colours.Red/(float)Colours.Clear * 255 < 255) ? (float)Colours.Red/(float)Colours.Clear * 255 : 255;
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009dc:	897b      	ldrh	r3, [r7, #10]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009ea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 80009ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 80009f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fe:	d516      	bpl.n	8000a2e <Convert_Color_To_RGBC+0xca>
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a18:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 8000a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a24:	edc7 7a00 	vstr	s15, [r7]
 8000a28:	783b      	ldrb	r3, [r7, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	e000      	b.n	8000a30 <Convert_Color_To_RGBC+0xcc>
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	743b      	strb	r3, [r7, #16]
	value.Green = ((float)Colours.Green/(float)Colours.Clear * 255 < 255) ? (float)Colours.Green/(float)Colours.Clear * 255 : 255;
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a3c:	897b      	ldrh	r3, [r7, #10]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a4a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 8000a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a52:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 8000a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5e:	d516      	bpl.n	8000a8e <Convert_Color_To_RGBC+0x12a>
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a6a:	897b      	ldrh	r3, [r7, #10]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a78:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000ab4 <Convert_Color_To_RGBC+0x150>
 8000a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	edc7 7a00 	vstr	s15, [r7]
 8000a88:	783b      	ldrb	r3, [r7, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	e000      	b.n	8000a90 <Convert_Color_To_RGBC+0x12c>
 8000a8e:	23ff      	movs	r3, #255	; 0xff
 8000a90:	747b      	strb	r3, [r7, #17]
	value.Clear = Colours.Clear;
 8000a92:	897b      	ldrh	r3, [r7, #10]
 8000a94:	82bb      	strh	r3, [r7, #20]
	return value;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	6010      	str	r0, [r2, #0]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	8093      	strh	r3, [r2, #4]
}
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	437f0000 	.word	0x437f0000

08000ab8 <Print_Color_To_Usart>:

void Print_Color_To_Usart(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
	//First we activate the RGBC
	ColorSensor_Send(_ENABLE, 0b00000011);
 8000abe:	2103      	movs	r1, #3
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fe7d 	bl	80007c0 <ColorSensor_Send>
	HAL_Delay(5);
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f001 f9c6 	bl	8001e58 <HAL_Delay>
	ColorStruct16 raw_color = Read_Color_All();
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff23 	bl	800091c <Read_Color_All>
	RGBC rgbc_value = Convert_Color_To_RGBC(raw_color);
 8000ad6:	1d38      	adds	r0, r7, #4
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ae0:	f7ff ff40 	bl	8000964 <Convert_Color_To_RGBC>
	serial_puts("The value seen by the color sensors is : \r\n");
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <Print_Color_To_Usart+0x58>)
 8000ae6:	f001 f8f5 	bl	8001cd4 <serial_puts>
	char* buffer = Rgbc_To_String(&rgbc_value);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f811 	bl	8000b14 <Rgbc_To_String>
 8000af2:	6178      	str	r0, [r7, #20]
	serial_puts(buffer);
 8000af4:	6978      	ldr	r0, [r7, #20]
 8000af6:	f001 f8ed 	bl	8001cd4 <serial_puts>
	free(buffer);
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f003 fb4e 	bl	800419c <free>
	//Once done we desactivate it to "save" power
	ColorSensor_Send(_ENABLE, 0b00000001);
 8000b00:	2101      	movs	r1, #1
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe5c 	bl	80007c0 <ColorSensor_Send>

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08004ab0 	.word	0x08004ab0

08000b14 <Rgbc_To_String>:

char* Rgbc_To_String(RGBC *rgbc_value){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
	char* rgbc_buffer = (char*) malloc(sizeof(char)*50);
 8000b1c:	2032      	movs	r0, #50	; 0x32
 8000b1e:	f003 fb35 	bl	800418c <malloc>
 8000b22:	4603      	mov	r3, r0
 8000b24:	60fb      	str	r3, [r7, #12]
	sprintf(rgbc_buffer, "R:%02d G:%02d B:%02d C:%02d\r\n", rgbc_value->Red, rgbc_value->Green, rgbc_value->Blue,rgbc_value->Clear);  // format time string
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	4618      	mov	r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	889b      	ldrh	r3, [r3, #4]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	4603      	mov	r3, r0
 8000b42:	460a      	mov	r2, r1
 8000b44:	4904      	ldr	r1, [pc, #16]	; (8000b58 <Rgbc_To_String+0x44>)
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f003 fc28 	bl	800439c <siprintf>
	return rgbc_buffer;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08004adc 	.word	0x08004adc

08000b5c <init_I2C1>:
 *      Author: aravey
 */

#include "i2c.h"

void init_I2C1(void) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

	/* Peripheral clock enable */
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <init_I2C1+0xb8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <init_I2C1+0xb8>)
 8000b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40

	/* GPIOB clock enable */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <init_I2C1+0xb8>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <init_I2C1+0xb8>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30

	/**I2C1 GPIO Configuration
	 PB6     ------> I2C1_SCL
	 PB9     ------> I2C1_SDA
	 */
	GPIOB->MODER |= GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER9_Msk;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <init_I2C1+0xbc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <init_I2C1+0xbc>)
 8000b7e:	f443 2343 	orr.w	r3, r3, #798720	; 0xc3000
 8000b82:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6_0 | GPIO_MODER_MODER9_0); // Enable alternative function mode
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <init_I2C1+0xbc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <init_I2C1+0xbc>)
 8000b8a:	f423 2382 	bic.w	r3, r3, #266240	; 0x41000
 8000b8e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_2;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <init_I2C1+0xbc>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <init_I2C1+0xbc>)
 8000b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b9a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH1_2;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <init_I2C1+0xbc>)
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <init_I2C1+0xbc>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED9_Msk;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <init_I2C1+0xbc>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <init_I2C1+0xbc>)
 8000bae:	f443 2343 	orr.w	r3, r3, #798720	; 0xc3000
 8000bb2:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT9;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <init_I2C1+0xbc>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <init_I2C1+0xbc>)
 8000bba:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 8000bbe:	6053      	str	r3, [r2, #4]

	//Reset I2C peripheral
	I2C1->CR1 |= 0x8000;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <init_I2C1+0xc0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <init_I2C1+0xc0>)
 8000bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bca:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= 0x7FFF;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <init_I2C1+0xc0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <init_I2C1+0xc0>)
 8000bd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bd6:	6013      	str	r3, [r2, #0]

	//Set I2C mode, no SMB, no PEC, no ARP
	I2C1->CR1 = 0x0000;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <init_I2C1+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]

	//APB1 = 42Mhz => FREQ=42; no interrupts
	I2C1->CR2 = 0x002A;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <init_I2C1+0xc0>)
 8000be0:	222a      	movs	r2, #42	; 0x2a
 8000be2:	605a      	str	r2, [r3, #4]

	//No slave mode, addr sets to 0
	I2C1->OAR1 = 0x0;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <init_I2C1+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
	I2C1->OAR2 = 0;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <init_I2C1+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]

	//Standard mode (Sm), Duty cycle = 2 (50%), CLock 100kHz=5000ns (one semi period) -> CCR= 42000000 * 0.000005000 = 210
	I2C1->CCR = 0x00D2;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <init_I2C1+0xc0>)
 8000bf2:	22d2      	movs	r2, #210	; 0xd2
 8000bf4:	61da      	str	r2, [r3, #28]

	// TRISE set to 1000ns -> 42Mhz = 23.8ns : (1000/23.8)+1 = 43
	I2C1->TRISE = 0x002B;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <init_I2C1+0xc0>)
 8000bf8:	222b      	movs	r2, #43	; 0x2b
 8000bfa:	621a      	str	r2, [r3, #32]

	//Start I2C
	I2C1->CR1 |= 0x0001;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <init_I2C1+0xc0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <init_I2C1+0xc0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40005400 	.word	0x40005400

08000c20 <I2C_Master_Transmit>:

void I2C_Master_Transmit(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]

	uint8_t i = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]

	//Wait for I2C bus to be free (not busy)
	while (I2C1->SR2 & 0x2)
 8000c34:	bf00      	nop
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f9      	bne.n	8000c36 <I2C_Master_Transmit+0x16>
		;

	//Send a start
	I2C1->CR1 |= 0x0100;
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4c:	6013      	str	r3, [r2, #0]
	// wait for start to finish -> SB = 1
	while (!(I2C1->SR1 & 0x1))
 8000c4e:	bf00      	nop
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f9      	beq.n	8000c50 <I2C_Master_Transmit+0x30>
		;
	I2C1->DR = addr;
 8000c5c:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	6113      	str	r3, [r2, #16]
	//Wait until ADDR flag is set
	while (!(I2C1->SR1 & 0x2))
 8000c62:	bf00      	nop
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0f9      	beq.n	8000c64 <I2C_Master_Transmit+0x44>
		;
	//Clear Addr flag (by reading SR1 then SR2)
	if (I2C1->SR1 == 0x0)
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c72:	695b      	ldr	r3, [r3, #20]
		;
	if (I2C1->SR2 == 0x0)
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
		;

	while (size > 0) {
 8000c78:	e027      	b.n	8000cca <I2C_Master_Transmit+0xaa>
		// Wait for Txe (register Empty)
		while (!(I2C1->SR1 & 0x0080))
 8000c7a:	bf00      	nop
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <I2C_Master_Transmit+0x5c>
			;
		//Write to DR
		I2C1->DR = buffer[i];
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000c92:	611a      	str	r2, [r3, #16]
		size = size - 1;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	71bb      	strb	r3, [r7, #6]
		i = i + 1;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
		//Check if BTF ==1
		if ((I2C1->SR1 & 0x0004) && size > 0) {
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00e      	beq.n	8000cca <I2C_Master_Transmit+0xaa>
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00b      	beq.n	8000cca <I2C_Master_Transmit+0xaa>
			//Write to DR
			I2C1->DR = buffer[i];
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000cbc:	611a      	str	r2, [r3, #16]
			size = size - 1;
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	71bb      	strb	r3, [r7, #6]
			i = i + 1;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
	while (size > 0) {
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1d4      	bne.n	8000c7a <I2C_Master_Transmit+0x5a>
		}
	}
	//Wait BTF to be set
	while (!(I2C1->SR1 & 0x0004))
 8000cd0:	bf00      	nop
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f9      	beq.n	8000cd2 <I2C_Master_Transmit+0xb2>
		;
	//Send a stop byte
	I2C1->CR1 |= 0x0200;
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6013      	str	r3, [r2, #0]
	// Wait stop to be sent
	while ((I2C1->SR1 & 0x0010))
 8000cea:	bf00      	nop
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <I2C_Master_Transmit+0xe8>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f9      	bne.n	8000cec <I2C_Master_Transmit+0xcc>
		;
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40005400 	.word	0x40005400

08000d0c <I2C_Master_Receive>:

void I2C_Master_Receive(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]

	uint8_t i = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

	//Wait for I2C bus to be free (not busy)
	while (I2C1->SR2 & 0x2)
 8000d20:	bf00      	nop
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f9      	bne.n	8000d22 <I2C_Master_Receive+0x16>
		;

	//Disable POS
	I2C1->CR1 &= 0xFEFF;
 8000d2e:	4b91      	ldr	r3, [pc, #580]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4990      	ldr	r1, [pc, #576]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]

	//Enable Ack
	I2C1->CR1 |= 0x0400;
 8000d3c:	4b8d      	ldr	r3, [pc, #564]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
	//Send a start
	I2C1->CR1 |= 0x0100;
 8000d48:	4b8a      	ldr	r3, [pc, #552]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
	// wait for start to finish -> SB = 1
	while (!(I2C1->SR1 & 0x1))
 8000d54:	bf00      	nop
 8000d56:	4b87      	ldr	r3, [pc, #540]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f9      	beq.n	8000d56 <I2C_Master_Receive+0x4a>
		;
	I2C1->DR = addr;
 8000d62:	4a84      	ldr	r2, [pc, #528]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	6113      	str	r3, [r2, #16]
	//Wait until ADDR flag is set
	while (!(I2C1->SR1 & 0x2))
 8000d68:	bf00      	nop
 8000d6a:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f9      	beq.n	8000d6a <I2C_Master_Receive+0x5e>
		;

	if (size == 0) {
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10a      	bne.n	8000d92 <I2C_Master_Receive+0x86>
		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000d7c:	4b7d      	ldr	r3, [pc, #500]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000d80:	4b7c      	ldr	r3, [pc, #496]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d82:	699b      	ldr	r3, [r3, #24]
			;
		//Send a stop byte
		I2C1->CR1 |= 0x0200;
 8000d84:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a7a      	ldr	r2, [pc, #488]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e0e5      	b.n	8000f5e <I2C_Master_Receive+0x252>
	} else if (size == 1) {
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d111      	bne.n	8000dbc <I2C_Master_Receive+0xb0>
		// In this case, we receive only 1 data, we need to NOack it
		//Disable Ack
		I2C1->CR1 &= 0xFBFF;
 8000d98:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4975      	ldr	r1, [pc, #468]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000d9e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000da2:	4013      	ands	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]

		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000da6:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000da8:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000daa:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000dac:	699b      	ldr	r3, [r3, #24]
			;

		//Send a stop byte
		I2C1->CR1 |= 0x0200;
 8000dae:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a70      	ldr	r2, [pc, #448]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e0d0      	b.n	8000f5e <I2C_Master_Receive+0x252>
	} else {
		//Enable Ack
		I2C1->CR1 |= 0x0400;
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a6c      	ldr	r2, [pc, #432]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
		//Clear Addr flag (by reading SR1 then SR2)
		if (I2C1->SR1 == 0x0)
 8000dc8:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000dca:	695b      	ldr	r3, [r3, #20]
			;
		if (I2C1->SR2 == 0x0)
 8000dcc:	4b69      	ldr	r3, [pc, #420]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000dce:	699b      	ldr	r3, [r3, #24]
			;
	}

	while (size > 0) {
 8000dd0:	e0c5      	b.n	8000f5e <I2C_Master_Receive+0x252>
		if (size <= 3) {
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	f200 809b 	bhi.w	8000f10 <I2C_Master_Receive+0x204>
			// We received only one byte
			if (size == 1) {
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d114      	bne.n	8000e0a <I2C_Master_Receive+0xfe>
				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000de0:	bf00      	nop
 8000de2:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <I2C_Master_Receive+0xd6>
					;
				//Read data
				buffer[i] = I2C1->DR;
 8000dee:	4b61      	ldr	r3, [pc, #388]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000df0:	6919      	ldr	r1, [r3, #16]
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	b2ca      	uxtb	r2, r1
 8000dfa:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e0a9      	b.n	8000f5e <I2C_Master_Receive+0x252>
			}
			// We received two bytes
			else if (size == 2) {
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d13c      	bne.n	8000e8a <I2C_Master_Receive+0x17e>

				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000e10:	bf00      	nop
 8000e12:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f9      	beq.n	8000e12 <I2C_Master_Receive+0x106>
					;

				//Disable Ack
				I2C1->CR1 &= 0xFBFF;
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4954      	ldr	r1, [pc, #336]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e24:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
				//Send a stop byte
				I2C1->CR1 |= 0x0200;
 8000e2c:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a50      	ldr	r2, [pc, #320]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000e38:	4b4e      	ldr	r3, [pc, #312]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]

				//Wait RXNE=1 to receive a byte
				while (!(I2C1->SR1 & 0x0040))
 8000e52:	bf00      	nop
 8000e54:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <I2C_Master_Receive+0x148>
					;

				//Read data
				buffer[i] = I2C1->DR;
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e62:	6919      	ldr	r1, [r3, #16]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	3301      	adds	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]

				// Wait stop to be sent
				while ((I2C1->SR1 & 0x0010))
 8000e7a:	bf00      	nop
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f9      	bne.n	8000e7c <I2C_Master_Receive+0x170>
 8000e88:	e069      	b.n	8000f5e <I2C_Master_Receive+0x252>
					;
			}
			// We received 3 bytes
			else {
				//Wait BTF = 1
				while (!(I2C1->SR1 & 0x0004))
 8000e8a:	bf00      	nop
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f9      	beq.n	8000e8c <I2C_Master_Receive+0x180>
					;

				//Disable Ack
				I2C1->CR1 &= 0xFBFF;
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000e9e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000ea8:	6919      	ldr	r1, [r3, #16]
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2ca      	uxtb	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]

				//Wait BTF = 1
				while (!(I2C1->SR1 & 0x0004))
 8000ec0:	bf00      	nop
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f9      	beq.n	8000ec2 <I2C_Master_Receive+0x1b6>
					;

				//Send a stop byte
				I2C1->CR1 |= 0x0200;
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed8:	6013      	str	r3, [r2, #0]

				//Read data
				buffer[i] = I2C1->DR;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000edc:	6919      	ldr	r1, [r3, #16]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2ca      	uxtb	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]

				//Read data
				buffer[i] = I2C1->DR;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000ef6:	6919      	ldr	r1, [r3, #16]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e026      	b.n	8000f5e <I2C_Master_Receive+0x252>
			}
		} else {
			//Wait RXNE=1 to receive a byte
			while (!(I2C1->SR1 & 0x0040))
 8000f10:	bf00      	nop
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <I2C_Master_Receive+0x206>
				;

			//Read data
			buffer[i] = I2C1->DR;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000f20:	6919      	ldr	r1, [r3, #16]
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
			size = size - 1;
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	71bb      	strb	r3, [r7, #6]
			i = i + 1;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	3301      	adds	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]

			//If BTF is set
			if (I2C1->SR1 & 0x0004) {
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00c      	beq.n	8000f5e <I2C_Master_Receive+0x252>
				//Read data
				buffer[i] = I2C1->DR;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <I2C_Master_Receive+0x268>)
 8000f46:	6919      	ldr	r1, [r3, #16]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
				size = size - 1;
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	71bb      	strb	r3, [r7, #6]
				i = i + 1;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
	while (size > 0) {
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f af36 	bne.w	8000dd2 <I2C_Master_Receive+0xc6>
			}
		}
	}
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40005400 	.word	0x40005400

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fef9 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f837 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f8cf 	bl	8001128 <MX_GPIO_Init>
  RTC_Init();
 8000f8a:	f000 f933 	bl	80011f4 <RTC_Init>
  MX_I2S3_Init();
 8000f8e:	f000 f89d 	bl	80010cc <MX_I2S3_Init>

  /* USER CODE BEGIN 2 */

  //User Init
  init_I2C1();
 8000f92:	f7ff fde3 	bl	8000b5c <init_I2C1>
  DAC_GPIO_Init();
 8000f96:	f7ff faed 	bl	8000574 <DAC_GPIO_Init>
  GPIO_Init();
 8000f9a:	f000 f985 	bl	80012a8 <GPIO_Init>
  init_usart_int();
 8000f9e:	f000 fe0d 	bl	8001bbc <init_usart_int>
  init_SPI();
 8000fa2:	f000 fb29 	bl	80015f8 <init_SPI>
  LIS302DL_init();
 8000fa6:	f7ff fbbf 	bl	8000728 <LIS302DL_init>

  /*Use hexadecimal values except for the weekday
  example : for 19h 01min 40s, Thursday, 13th, April, 2023 right as below
  init_calendar(0x19, 0x1, 0x40, THU, 0x13, 0x4, 0x2023);
  */
  init_calendar(0x10, 0x15, 0x00, TUE, 0x14, 0x04, 0x2023);
 8000faa:	2323      	movs	r3, #35	; 0x23
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2304      	movs	r3, #4
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2115      	movs	r1, #21
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f000 fa9d 	bl	80014fc <init_calendar>

  //Mise en route du DAC
  DAC_Power_Up();
 8000fc2:	f7ff fb07 	bl	80005d4 <DAC_Power_Up>
  //Configuration du beep
  Beep_Config(SHORT_BEEP, SHORT_SILENCE, MEDIUM_SOUND);
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff fb5a 	bl	8000684 <Beep_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (detecter(10)==1) // the card has been stolen
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f7ff fbc5 	bl	8000760 <detecter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d1f9      	bne.n	8000fd0 <main+0x58>
	  {
		  serial_puts("The card has been stolen : Here's the time and data nas the color sensor data : \r\n");
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <main+0x78>)
 8000fde:	f000 fe79 	bl	8001cd4 <serial_puts>
		  Print_Time_And_Date_Usart();
 8000fe2:	f000 f9c5 	bl	8001370 <Print_Time_And_Date_Usart>
		  Print_Color_To_Usart();
 8000fe6:	f7ff fd67 	bl	8000ab8 <Print_Color_To_Usart>
		  while (1)
		  {
			  Run_Alarm();
 8000fea:	f7ff fb89 	bl	8000700 <Run_Alarm>
 8000fee:	e7fc      	b.n	8000fea <main+0x72>
 8000ff0:	08004afc 	.word	0x08004afc

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 f8d2 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <SystemClock_Config+0xd0>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <SystemClock_Config+0xd0>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <SystemClock_Config+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <SystemClock_Config+0xd4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <SystemClock_Config+0xd4>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <SystemClock_Config+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001050:	2309      	movs	r3, #9
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001068:	2308      	movs	r3, #8
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800106c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001070:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001076:	2307      	movs	r3, #7
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ffb8 	bl	8002ff4 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108a:	f000 f8ad 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fa19 	bl	80034e4 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010b8:	f000 f896 	bl	80011e8 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_I2S3_Init+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MX_I2S3_Init+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2S3_Init+0x54>)
 80010d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_I2S3_Init+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2S3_Init+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_I2S3_Init+0x54>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_I2S3_Init+0x54>)
 80010f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_I2S3_Init+0x54>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_I2S3_Init+0x54>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_I2S3_Init+0x54>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2S3_Init+0x54>)
 800110e:	f001 f9a7 	bl	8002460 <HAL_I2S_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001118:	f000 f866 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000a4 	.word	0x200000a4
 8001124:	40003c00 	.word	0x40003c00

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_GPIO_Init+0xb8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_GPIO_Init+0xb8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <MX_GPIO_Init+0xb8>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_GPIO_Init+0xb8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_GPIO_Init+0xbc>)
 80011c4:	f000 ff7e 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2006      	movs	r0, #6
 80011ce:	f000 ff42 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d2:	2006      	movs	r0, #6
 80011d4:	f000 ff5b 	bl	800208e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <RTC_Init>:
  * @brief RTC Initialization Function generated from the graphic interface
  * @param None
  * @retval None
  */
void RTC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */
//structure definition where time and date are stocked
  RTC_TimeTypeDef sTime = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */

  hrtc.Instance = RTC;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <RTC_Init+0xac>)
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <RTC_Init+0xb0>)
 8001210:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <RTC_Init+0xac>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <RTC_Init+0xac>)
 800121a:	227f      	movs	r2, #127	; 0x7f
 800121c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <RTC_Init+0xac>)
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <RTC_Init+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <RTC_Init+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <RTC_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <RTC_Init+0xac>)
 8001238:	f002 fc80 	bl	8003b3c <HAL_RTC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <RTC_Init+0x52>
  {
    RTC_Error_Handler();
 8001242:	f000 f947 	bl	80014d4 <RTC_Error_Handler>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */

  sTime.Hours = 0x0;
 8001246:	2300      	movs	r3, #0
 8001248:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800124a:	2300      	movs	r3, #0
 800124c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800124e:	2300      	movs	r3, #0
 8001250:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <RTC_Init+0xac>)
 8001262:	f002 fce1 	bl	8003c28 <HAL_RTC_SetTime>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <RTC_Init+0x7c>
  {
    RTC_Error_Handler();
 800126c:	f000 f932 	bl	80014d4 <RTC_Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001270:	2305      	movs	r3, #5
 8001272:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8001274:	2303      	movs	r3, #3
 8001276:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001278:	2331      	movs	r3, #49	; 0x31
 800127a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800127c:	2323      	movs	r3, #35	; 0x23
 800127e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <RTC_Init+0xac>)
 8001288:	f002 fdc6 	bl	8003e18 <HAL_RTC_SetDate>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <RTC_Init+0xa2>
  {
    RTC_Error_Handler();
 8001292:	f000 f91f 	bl	80014d4 <RTC_Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000ec 	.word	0x200000ec
 80012a4:	40002800 	.word	0x40002800

080012a8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <GPIO_Init+0x80>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a18      	ldr	r2, [pc, #96]	; (8001328 <GPIO_Init+0x80>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <GPIO_Init+0x80>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <GPIO_Init+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <GPIO_Init+0x80>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <GPIO_Init+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f6:	2301      	movs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <GPIO_Init+0x84>)
 800130c:	f000 feda 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2006      	movs	r0, #6
 8001316:	f000 fe9e 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800131a:	2006      	movs	r0, #6
 800131c:	f000 feb7 	bl	800208e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <Read_Time_And_Date>:

void Read_Time_And_Date(RTC_DateTypeDef *sDate,RTC_TimeTypeDef *sTime, uint32_t Format){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	//Get time and set a error message if the time hasn't been retrieved correctly
	if (HAL_RTC_GetTime(&hrtc,sTime,Format)!= HAL_OK){
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <Read_Time_And_Date+0x3c>)
 8001342:	f002 fd0b 	bl	8003d5c <HAL_RTC_GetTime>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <Read_Time_And_Date+0x20>
		RTC_Error_Handler();
 800134c:	f000 f8c2 	bl	80014d4 <RTC_Error_Handler>
	}
	if (HAL_RTC_GetDate(&hrtc,sDate,Format) != HAL_OK){
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <Read_Time_And_Date+0x3c>)
 8001356:	f002 fde3 	bl	8003f20 <HAL_RTC_GetDate>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <Read_Time_And_Date+0x34>
		RTC_Error_Handler();
 8001360:	f000 f8b8 	bl	80014d4 <RTC_Error_Handler>
	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000ec 	.word	0x200000ec

08001370 <Print_Time_And_Date_Usart>:

void Print_Time_And_Date_Usart(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
	//Defining a Time and Date struct to read using HAL function
	RTC_TimeTypeDef sTime = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]

	//Reading
	Read_Time_And_Date(&sDate,&sTime,RTC_FORMAT_BIN);
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffce 	bl	8001330 <Read_Time_And_Date>

	//Converting the result in the structs to readable string
	//the input is a pointer to sTime and the result is Time_buffer defined by the funciton sTime_To_String
	char * time = sTime_To_String(&sTime);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f820 	bl	80013dc <sTime_To_String>
 800139c:	61f8      	str	r0, [r7, #28]
	char * date = sDate_To_String(&sDate);
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f839 	bl	8001418 <sDate_To_String>
 80013a6:	61b8      	str	r0, [r7, #24]
	//Writing to Usart
	serial_puts("The date time is ");
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <Print_Time_And_Date_Usart+0x64>)
 80013aa:	f000 fc93 	bl	8001cd4 <serial_puts>
	serial_puts(date);
 80013ae:	69b8      	ldr	r0, [r7, #24]
 80013b0:	f000 fc90 	bl	8001cd4 <serial_puts>
	serial_puts("The current time is ");
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <Print_Time_And_Date_Usart+0x68>)
 80013b6:	f000 fc8d 	bl	8001cd4 <serial_puts>
	serial_puts(time);
 80013ba:	69f8      	ldr	r0, [r7, #28]
 80013bc:	f000 fc8a 	bl	8001cd4 <serial_puts>

	//Freeing the buffer, buffer of the time and the date are defined with malloc that have to be freed
	free(date);
 80013c0:	69b8      	ldr	r0, [r7, #24]
 80013c2:	f002 feeb 	bl	800419c <free>
	free(time);
 80013c6:	69f8      	ldr	r0, [r7, #28]
 80013c8:	f002 fee8 	bl	800419c <free>


}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08004b50 	.word	0x08004b50
 80013d8:	08004b64 	.word	0x08004b64

080013dc <sTime_To_String>:

char* sTime_To_String(RTC_TimeTypeDef *sTime){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	6078      	str	r0, [r7, #4]
	char* hour_buffer = (char*) malloc(sizeof(char)*80);
 80013e4:	2050      	movs	r0, #80	; 0x50
 80013e6:	f002 fed1 	bl	800418c <malloc>
 80013ea:	4603      	mov	r3, r0
 80013ec:	60fb      	str	r3, [r7, #12]
	sprintf(hour_buffer, "%02d:%02d:%02d\r\n", sTime->Hours, sTime->Minutes, sTime->Seconds);  // format time string
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	4619      	mov	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	460b      	mov	r3, r1
 8001402:	4904      	ldr	r1, [pc, #16]	; (8001414 <sTime_To_String+0x38>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f002 ffc9 	bl	800439c <siprintf>
	return hour_buffer;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	08004b7c 	.word	0x08004b7c

08001418 <sDate_To_String>:

char* sDate_To_String(RTC_DateTypeDef *sDate){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
	char* date_buffer = (char*) malloc(sizeof(char)*80);
 8001420:	2050      	movs	r0, #80	; 0x50
 8001422:	f002 feb3 	bl	800418c <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	60fb      	str	r3, [r7, #12]
//day is a string of 3 characters + 1 null character for the end of the string
	char day[4];
	switch (sDate->WeekDay){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	2b06      	cmp	r3, #6
 8001432:	d826      	bhi.n	8001482 <sDate_To_String+0x6a>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <sDate_To_String+0x24>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001459 	.word	0x08001459
 8001440:	0800145f 	.word	0x0800145f
 8001444:	08001465 	.word	0x08001465
 8001448:	0800146b 	.word	0x0800146b
 800144c:	08001471 	.word	0x08001471
 8001450:	08001477 	.word	0x08001477
 8001454:	0800147d 	.word	0x0800147d
		case RTC_WEEKDAY_MONDAY :
			strcpy(day,"Mon");
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <sDate_To_String+0x9c>)
 800145a:	60bb      	str	r3, [r7, #8]
			break;
 800145c:	e013      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_TUESDAY :
			strcpy(day,"Tue");
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <sDate_To_String+0xa0>)
 8001460:	60bb      	str	r3, [r7, #8]
			break;
 8001462:	e010      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_WEDNESDAY :
			strcpy(day,"Wed");
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <sDate_To_String+0xa4>)
 8001466:	60bb      	str	r3, [r7, #8]
			break;
 8001468:	e00d      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_THURSDAY :
			strcpy(day,"Thu");
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <sDate_To_String+0xa8>)
 800146c:	60bb      	str	r3, [r7, #8]
			break;
 800146e:	e00a      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_FRIDAY :
			strcpy(day,"Fri");
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <sDate_To_String+0xac>)
 8001472:	60bb      	str	r3, [r7, #8]
			break;
 8001474:	e007      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_SATURDAY :
			strcpy(day,"Sat");
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <sDate_To_String+0xb0>)
 8001478:	60bb      	str	r3, [r7, #8]
			break;
 800147a:	e004      	b.n	8001486 <sDate_To_String+0x6e>
		case RTC_WEEKDAY_SUNDAY :
			strcpy(day,"Sun");
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <sDate_To_String+0xb4>)
 800147e:	60bb      	str	r3, [r7, #8]
			break;
 8001480:	e001      	b.n	8001486 <sDate_To_String+0x6e>
		default :
			strcpy(day,"Mon");
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <sDate_To_String+0x9c>)
 8001484:	60bb      	str	r3, [r7, #8]
	}
//%s for the format remplaced by the variable day, %02d remplace by date and month with a 0 is the date is 1 number
//20%02d is the year (2 numbers) preceded with "20"
	sprintf(date_buffer, "%s %02d-%02d-20%02d\r\n", day, sDate->Date, sDate->Month, sDate->Year);  // format date string
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	789b      	ldrb	r3, [r3, #2]
 800148a:	4618      	mov	r0, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	4619      	mov	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	f107 0208 	add.w	r2, r7, #8
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9100      	str	r1, [sp, #0]
 800149e:	4603      	mov	r3, r0
 80014a0:	490b      	ldr	r1, [pc, #44]	; (80014d0 <sDate_To_String+0xb8>)
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f002 ff7a 	bl	800439c <siprintf>
	return date_buffer;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	006e6f4d 	.word	0x006e6f4d
 80014b8:	00657554 	.word	0x00657554
 80014bc:	00646557 	.word	0x00646557
 80014c0:	00756854 	.word	0x00756854
 80014c4:	00697246 	.word	0x00697246
 80014c8:	00746153 	.word	0x00746153
 80014cc:	006e7553 	.word	0x006e7553
 80014d0:	08004b90 	.word	0x08004b90

080014d4 <RTC_Error_Handler>:
	}
}


void RTC_Error_Handler()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <RTC_Error_Handler+0x8>

080014de <HAL_GPIO_EXTI_Callback>:
  {
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_EXTI_Callback+0x14>
	  {
		Print_Time_And_Date_Usart();
 80014ee:	f7ff ff3f 	bl	8001370 <Print_Time_And_Date_Usart>
	  }
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <init_calendar>:


void init_calendar(uint8_t hour, uint8_t minute, uint8_t second, uint8_t weekday, uint8_t day, uint8_t month, uint8_t year )
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	4604      	mov	r4, r0
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4623      	mov	r3, r4
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4603      	mov	r3, r0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	460b      	mov	r3, r1
 8001514:	717b      	strb	r3, [r7, #5]
 8001516:	4613      	mov	r3, r2
 8001518:	713b      	strb	r3, [r7, #4]
	int temps=0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	int datecomplete=0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
	int jour=0;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
	int mois=0;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]


	temps = hour;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	617b      	str	r3, [r7, #20]
	temps=temps << 8;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	617b      	str	r3, [r7, #20]
	temps |= minute;
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
	temps=temps << 8;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	617b      	str	r3, [r7, #20]
	temps |= second;
 8001542:	797b      	ldrb	r3, [r7, #5]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

	datecomplete = year << 16;
 800154a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	613b      	str	r3, [r7, #16]
	jour = weekday << 12;
 8001552:	793b      	ldrb	r3, [r7, #4]
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	60fb      	str	r3, [r7, #12]
	datecomplete |= jour;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
	mois = month << 8;
 8001560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	60bb      	str	r3, [r7, #8]
	datecomplete |= mois;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
	datecomplete |= day;
 8001570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]


	RCC->BDCR |= 0x1000; //Start the RTC
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <init_calendar+0xf4>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <init_calendar+0xf4>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
	RTC->WPR =0xCAU; //Disable the RTC registers write protection
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <init_calendar+0xf8>)
 8001588:	22ca      	movs	r2, #202	; 0xca
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR =0x53U; //Disable the RTC registers write protection
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <init_calendar+0xf8>)
 800158e:	2253      	movs	r2, #83	; 0x53
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->ISR =0x80; //Enter Initialization mode
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <init_calendar+0xf8>)
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	60da      	str	r2, [r3, #12]
	while(!(RTC->ISR & 0xBF)); //Wait for the confirmation of initialization mode (clock synchronization)
 8001598:	bf00      	nop
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <init_calendar+0xf8>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f9      	beq.n	800159a <init_calendar+0x9e>
	RTC->PRER =0xFF; //Program the prescaler values if needed
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <init_calendar+0xf8>)
 80015a8:	22ff      	movs	r2, #255	; 0xff
 80015aa:	611a      	str	r2, [r3, #16]
	HAL_Delay(100); //permet de remettre la valeur de la clock à la valeur demandée
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f000 fc53 	bl	8001e58 <HAL_Delay>
	RTC->PRER |=0x7F0000; //Program the prescaler values if needed
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <init_calendar+0xf8>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <init_calendar+0xf8>)
 80015b8:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 80015bc:	6113      	str	r3, [r2, #16]
	RTC->TR =temps; //Load time values in the shadow registers
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <init_calendar+0xf8>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	6013      	str	r3, [r2, #0]
	RTC->DR =datecomplete; //Load date values in the shadow registers
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <init_calendar+0xf8>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6053      	str	r3, [r2, #4]
	RTC->CR &=0xBF; //Configure the time format 24h
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <init_calendar+0xf8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <init_calendar+0xf8>)
 80015d0:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80015d4:	6093      	str	r3, [r2, #8]
	RTC->ISR &=0xFFFFFF7F; //Exit Initialization mode
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <init_calendar+0xf8>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <init_calendar+0xf8>)
 80015dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015e0:	60d3      	str	r3, [r2, #12]
	RTC->WPR =0xFFU; //Enable the RTC Registers Write Protection
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <init_calendar+0xf8>)
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40002800 	.word	0x40002800

080015f8 <init_SPI>:
 */


#include "spi.h"

void init_SPI(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <init_SPI+0xc8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <init_SPI+0xc8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <init_SPI+0xc8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23e0      	movs	r3, #224	; 0xe0
 800162c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163a:	2305      	movs	r3, #5
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <init_SPI+0xcc>)
 8001646:	f000 fd3d 	bl	80020c4 <HAL_GPIO_Init>

    /**LIS3DSH ChipSelect Configuration
    PE3     ------> LIS3DSH_SS
    */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <init_SPI+0xc8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <init_SPI+0xc8>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <init_SPI+0xc8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2108      	movs	r1, #8
 800166a:	4817      	ldr	r0, [pc, #92]	; (80016c8 <init_SPI+0xd0>)
 800166c:	f000 fec6 	bl	80023fc <HAL_GPIO_WritePin>
    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001670:	2308      	movs	r3, #8
 8001672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <init_SPI+0xd0>)
 8001688:	f000 fd1c 	bl	80020c4 <HAL_GPIO_Init>

    /**
     * SPI1 configuration
     */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <init_SPI+0xc8>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <init_SPI+0xc8>)
 8001696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <init_SPI+0xc8>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
    // SPI1 clock = APB2, prescaler set to 16 -> 84000000/16 = 5Mhz
    SPI1->CR1 = 0b000001101011100; //0x007E
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <init_SPI+0xd4>)
 80016aa:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80016ae:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0b0000000000000000; //0x0000
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <init_SPI+0xd4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
   // SPI1->I2SCFGR = 0; // SPI enable I2S disable
   // SPI1->I2SPR = 0b0000000000000000;
}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013000 	.word	0x40013000

080016d0 <SPIwrite>:

// Write a data @ address with SPI1
void SPIwrite(uint8_t address, uint8_t data)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	address = address & 0b01111111; // Masque ajouté
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e6:	71fb      	strb	r3, [r7, #7]
	CS_LOW; //CS --> Low
 80016e8:	2200      	movs	r2, #0
 80016ea:	2108      	movs	r1, #8
 80016ec:	481c      	ldr	r0, [pc, #112]	; (8001760 <SPIwrite+0x90>)
 80016ee:	f000 fe85 	bl	80023fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 fbb0 	bl	8001e58 <HAL_Delay>
    SPI1->DR = address;
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <SPIwrite+0x94>)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 fbaa 	bl	8001e58 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 8001704:	bf00      	nop
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <SPIwrite+0x94>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f9      	beq.n	8001706 <SPIwrite+0x36>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001712:	bf00      	nop
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SPIwrite+0x94>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f9      	bne.n	8001714 <SPIwrite+0x44>
    SPI1->DR = data;
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <SPIwrite+0x94>)
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f000 fb96 	bl	8001e58 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // Wait Flag TXE = 1
 800172c:	bf00      	nop
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <SPIwrite+0x94>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f9      	beq.n	800172e <SPIwrite+0x5e>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 800173a:	bf00      	nop
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <SPIwrite+0x94>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f9      	bne.n	800173c <SPIwrite+0x6c>
    HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 fb85 	bl	8001e58 <HAL_Delay>
    CS_HIGH; //CS --> High
 800174e:	2201      	movs	r2, #1
 8001750:	2108      	movs	r1, #8
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <SPIwrite+0x90>)
 8001754:	f000 fe52 	bl	80023fc <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	40013000 	.word	0x40013000

08001768 <SPIread>:
    return tempdat;
}

// Write a tempdat @ address with SPI1
uint8_t SPIread(uint8_t address)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	address = address | 0b10000000; // Masque pour mettre le MSB à 1 pour lire
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001778:	71fb      	strb	r3, [r7, #7]
	 uint8_t tempdat;
	 CS_LOW; //CS --> Low
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	481a      	ldr	r0, [pc, #104]	; (80017e8 <SPIread+0x80>)
 8001780:	f000 fe3c 	bl	80023fc <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	 SPI1->DR = address;
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <SPIread+0x84>)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	60d3      	str	r3, [r2, #12]
	 while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 800178a:	bf00      	nop
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <SPIread+0x84>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f9      	beq.n	800178c <SPIread+0x24>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001798:	bf00      	nop
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <SPIread+0x84>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <SPIread+0x32>
	 //HAL_Delay(100);
	tempdat = SPI1->DR & 0xFF; // Read dummy
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <SPIread+0x84>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	73fb      	strb	r3, [r7, #15]
	 SPI1->DR = DUMMY_BYTE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <SPIread+0x84>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
	 while(!(SPI1->SR & 0x1)); // Wait Flag RXE = 1
 80017b2:	bf00      	nop
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <SPIread+0x84>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f9      	beq.n	80017b4 <SPIread+0x4c>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 80017c0:	bf00      	nop
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <SPIread+0x84>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <SPIread+0x5a>
	// HAL_Delay(100);
	 tempdat = SPI1->DR & 0xFF;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <SPIread+0x84>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	73fb      	strb	r3, [r7, #15]
	// HAL_Delay(100);
	 CS_HIGH; //CS --> High
 80017d4:	2201      	movs	r2, #1
 80017d6:	2108      	movs	r1, #8
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <SPIread+0x80>)
 80017da:	f000 fe0f 	bl	80023fc <HAL_GPIO_WritePin>
	 return tempdat;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40013000 	.word	0x40013000

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f000 fc06 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a39      	ldr	r2, [pc, #228]	; (8001950 <HAL_I2S_MspInit+0x110>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d16b      	bne.n	8001948 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001878:	2302      	movs	r3, #2
 800187a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f81b 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800188c:	f7ff fcac 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_I2S_MspInit+0x114>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_I2S_MspInit+0x114>)
 800189a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6313      	str	r3, [r2, #48]	; 0x30
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_I2S_MspInit+0x114>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e4:	2310      	movs	r3, #16
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f4:	2306      	movs	r3, #6
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4816      	ldr	r0, [pc, #88]	; (8001958 <HAL_I2S_MspInit+0x118>)
 8001900:	f000 fbe0 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001904:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001916:	2306      	movs	r3, #6
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	480e      	ldr	r0, [pc, #56]	; (800195c <HAL_I2S_MspInit+0x11c>)
 8001922:	f000 fbcf 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001938:	2305      	movs	r3, #5
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <HAL_I2S_MspInit+0x11c>)
 8001944:	f000 fbbe 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3738      	adds	r7, #56	; 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40003c00 	.word	0x40003c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020800 	.word	0x40020800

08001960 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_RTC_MspInit+0x4c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001988:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4618      	mov	r0, r3
 8001990:	f001 ff94 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800199a:	f7ff fc25 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_RTC_MspInit+0x50>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40002800 	.word	0x40002800
 80019b0:	42470e3c 	.word	0x42470e3c

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a00:	f000 fa0a 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 fd0f 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f002 fb76 	bl	8004138 <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20020000 	.word	0x20020000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	2000010c 	.word	0x2000010c
 8001a80:	20000128 	.word	0x20000128

08001a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SystemInit+0x20>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <SystemInit+0x20>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <init_usart_int>:

	HAL_Delay(1);
}

// USART2 Initialization with Rx interrupt
void init_usart_int(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

	//Initialize PA2 as USART2_TX and PA3 as USART2_RX
	//Activate A port
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN);
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <init_usart_int+0xcc>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a30      	ldr	r2, [pc, #192]	; (8001c88 <init_usart_int+0xcc>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
    /* Setup PA2 and PA3 as Alternate Function */
	GPIOA->MODER |= 0x000000A0;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <init_usart_int+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <init_usart_int+0xd0>)
 8001bd2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001bd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFFFAF;
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <init_usart_int+0xd0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <init_usart_int+0xd0>)
 8001bde:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001be2:	6013      	str	r3, [r2, #0]
	/* Setup Alternate function as USART2 */
	GPIOA->AFR[0] &= 0xFFFF77FF;
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <init_usart_int+0xd0>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <init_usart_int+0xd0>)
 8001bea:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
 8001bee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <init_usart_int+0xd0>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <init_usart_int+0xd0>)
 8001bf6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001bfa:	6213      	str	r3, [r2, #32]
	/* Push pull output */
	GPIOA->OTYPER &= 0xFFFFFFF3;
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <init_usart_int+0xd0>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <init_usart_int+0xd0>)
 8001c02:	f023 030c 	bic.w	r3, r3, #12
 8001c06:	6053      	str	r3, [r2, #4]
	/* Pull up resistor on */
	GPIOA->PUPDR &= 0xFFFFFF5F;
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <init_usart_int+0xd0>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <init_usart_int+0xd0>)
 8001c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c12:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 0x00000050;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <init_usart_int+0xd0>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <init_usart_int+0xd0>)
 8001c1a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001c1e:	60d3      	str	r3, [r2, #12]
	/* Output speed set to VeryHigh */
	GPIOA->OSPEEDR |= 0x000000F0;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <init_usart_int+0xd0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <init_usart_int+0xd0>)
 8001c26:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001c2a:	6093      	str	r3, [r2, #8]


	//Activate USART2 Clock
	SET_BIT(RCC->APB1ENR,RCC_APB1ENR_USART2EN);
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <init_usart_int+0xcc>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <init_usart_int+0xcc>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
	//Enable USART, no TE no RE yet, Oversampling = 8, 8bit mode, no parity, Rx interrupt enable
	//Enable Tx and Rx
	USART2->CR1 = 0x0000802C;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <init_usart_int+0xd4>)
 8001c3a:	f248 022c 	movw	r2, #32812	; 0x802c
 8001c3e:	60da      	str	r2, [r3, #12]
	// No LIN mode, No clock output (synchronous mode)
	USART2->CR2 = 0x00000000;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <init_usart_int+0xd4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
	// No control mode, 3 sample point,
	USART2->CR3 = 0x00000000;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <init_usart_int+0xd4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
	// 19200bauds -> USARTDIV = 273.4375 -> Mantissa = 273d=0x111 , Fraction = 0.4375*16 = 7d = 0x7
	USART2->BRR = 0x00001117;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <init_usart_int+0xd4>)
 8001c4e:	f241 1217 	movw	r2, #4375	; 0x1117
 8001c52:	609a      	str	r2, [r3, #8]
	//Enable UART
	USART2->CR1 = 0x0000A02C;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <init_usart_int+0xd4>)
 8001c56:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8001c5a:	60da      	str	r2, [r3, #12]
	//SET_BIT(USART2->CR1, USART_CR1_UE );

	HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 f8fb 	bl	8001e58 <HAL_Delay>

	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c62:	f7ff ff21 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff71 	bl	8001b54 <NVIC_EncodePriority>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	2026      	movs	r0, #38	; 0x26
 8001c78:	f7ff ff42 	bl	8001b00 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001c7c:	2026      	movs	r0, #38	; 0x26
 8001c7e:	f7ff ff21 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40004400 	.word	0x40004400

08001c94 <serial_putc>:

void serial_putc(char c)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <serial_putc+0x3c>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8001ca4:	bf00      	nop
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <serial_putc+0x3c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f9      	beq.n	8001ca6 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 8001cb2:	bf00      	nop
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <serial_putc+0x3c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f9      	beq.n	8001cb4 <serial_putc+0x20>
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <serial_puts>:

void serial_puts( char *msg)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001ce0:	e009      	b.n	8001cf6 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffd2 	bl	8001c94 <serial_putc>
		cnt++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ef      	bne.n	8001ce2 <serial_puts+0xe>
	}
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <newLine>:

void newLine()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001d10:	200a      	movs	r0, #10
 8001d12:	f7ff ffbf 	bl	8001c94 <serial_putc>
	serial_putc(13); // retour chariot
 8001d16:	200d      	movs	r0, #13
 8001d18:	f7ff ffbc 	bl	8001c94 <serial_putc>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d26:	490e      	ldr	r1, [pc, #56]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d3c:	4c0b      	ldr	r4, [pc, #44]	; (8001d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff fe9b 	bl	8001a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f002 f9f9 	bl	8004144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff f911 	bl	8000f78 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d64:	08004bfc 	.word	0x08004bfc
  ldr r2, =_sbss
 8001d68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d6c:	20000124 	.word	0x20000124

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f94f 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fd22 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f967 	bl	80020aa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df4:	f000 f92f 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20000010 	.word	0x20000010
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	20000110 	.word	0x20000110

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000110 	.word	0x20000110

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000010 	.word	0x20000010

08001ea0 <__NVIC_SetPriorityGrouping>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e16b      	b.n	80023b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 815a 	bne.w	80023b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b4 	beq.w	80023b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_GPIO_Init+0x310>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x314>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_GPIO_Init+0x226>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d025      	beq.n	80022e6 <HAL_GPIO_Init+0x222>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x31c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <HAL_GPIO_Init+0x21e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x320>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d019      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x324>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00d      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_GPIO_Init+0x20a>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x310>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae90 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f845 	bl	80014de <HAL_GPIO_EXTI_Callback>
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e128      	b.n	80026c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a90      	ldr	r2, [pc, #576]	; (80026cc <HAL_I2S_Init+0x26c>)
 800248a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff f9d7 	bl	8001840 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024a8:	f023 030f 	bic.w	r3, r3, #15
 80024ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2202      	movs	r2, #2
 80024b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d060      	beq.n	8002580 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024c6:	2310      	movs	r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e001      	b.n	80024d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d802      	bhi.n	80024de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024de:	2001      	movs	r0, #1
 80024e0:	f001 face 	bl	8003a80 <HAL_RCCEx_GetPeriphCLKFreq>
 80024e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ee:	d125      	bne.n	800253c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	3305      	adds	r3, #5
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e01f      	b.n	800255a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	fbb2 f2f3 	udiv	r2, r2, r3
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	3305      	adds	r3, #5
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e00e      	b.n	800255a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fbb2 f2f3 	udiv	r2, r2, r3
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	3305      	adds	r3, #5
 8002558:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_I2S_Init+0x270>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e003      	b.n	8002588 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002580:	2302      	movs	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d902      	bls.n	8002594 <HAL_I2S_Init+0x134>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d907      	bls.n	80025a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0210 	orr.w	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e08f      	b.n	80026c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	ea42 0103 	orr.w	r1, r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6851      	ldr	r1, [r2, #4]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6892      	ldr	r2, [r2, #8]
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68d2      	ldr	r2, [r2, #12]
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6992      	ldr	r2, [r2, #24]
 80025da:	430a      	orrs	r2, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d161      	bne.n	80026b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a38      	ldr	r2, [pc, #224]	; (80026d4 <HAL_I2S_Init+0x274>)
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_I2S_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_I2S_Init+0x1a4>
 8002600:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_I2S_Init+0x27c>)
 8002602:	e001      	b.n	8002608 <HAL_I2S_Init+0x1a8>
 8002604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4932      	ldr	r1, [pc, #200]	; (80026d8 <HAL_I2S_Init+0x278>)
 8002610:	428a      	cmp	r2, r1
 8002612:	d101      	bne.n	8002618 <HAL_I2S_Init+0x1b8>
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_I2S_Init+0x27c>)
 8002616:	e001      	b.n	800261c <HAL_I2S_Init+0x1bc>
 8002618:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800261c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002620:	f023 030f 	bic.w	r3, r3, #15
 8002624:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_I2S_Init+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_I2S_Init+0x1d4>
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_I2S_Init+0x27c>)
 8002632:	e001      	b.n	8002638 <HAL_I2S_Init+0x1d8>
 8002634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002638:	2202      	movs	r2, #2
 800263a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_I2S_Init+0x278>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_I2S_Init+0x1ea>
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_I2S_Init+0x27c>)
 8002648:	e001      	b.n	800264e <HAL_I2S_Init+0x1ee>
 800264a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265a:	d003      	beq.n	8002664 <HAL_I2S_Init+0x204>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e001      	b.n	8002670 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800267a:	4313      	orrs	r3, r2
 800267c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002684:	4313      	orrs	r3, r2
 8002686:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800268e:	4313      	orrs	r3, r2
 8002690:	b29a      	uxth	r2, r3
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	4313      	orrs	r3, r2
 8002696:	b29b      	uxth	r3, r3
 8002698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_I2S_Init+0x278>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_I2S_Init+0x24c>
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_I2S_Init+0x27c>)
 80026aa:	e001      	b.n	80026b0 <HAL_I2S_Init+0x250>
 80026ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b0:	897a      	ldrh	r2, [r7, #10]
 80026b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	080029b9 	.word	0x080029b9
 80026d0:	cccccccd 	.word	0xcccccccd
 80026d4:	08002b41 	.word	0x08002b41
 80026d8:	40003800 	.word	0x40003800
 80026dc:	40003400 	.word	0x40003400

080026e0 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_I2S_Transmit+0x1c>
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0dc      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2S_Transmit+0x30>
 800270c:	2302      	movs	r3, #2
 800270e:	e0d4      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d005      	beq.n	8002730 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
 800272e:	e0c4      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2203      	movs	r2, #3
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d002      	beq.n	800275c <HAL_I2S_Transmit+0x7c>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d10a      	bne.n	8002772 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002770:	e005      	b.n	800277e <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d007      	beq.n	80027a6 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	2102      	movs	r1, #2
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f98d 	bl	8002acc <I2S_WaitFlagStateUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04e      	beq.n	8002856 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e070      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2102      	movs	r1, #2
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f962 	bl	8002acc <I2S_WaitFlagStateUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00f      	beq.n	800282e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e045      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d10c      	bne.n	8002856 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1bb      	bne.n	80027d8 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d118      	bne.n	80028a8 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f925 	bl	8002acc <I2S_WaitFlagStateUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00f      	beq.n	80028a8 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e008      	b.n	80028ba <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c9a      	adds	r2, r3, #2
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10e      	bne.n	8002952 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002942:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ffb8 	bl	80028c2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	b292      	uxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10e      	bne.n	80029b0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff93 	bl	80028d6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d13a      	bne.n	8002a4a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d109      	bne.n	80029f2 <I2S_IRQHandler+0x3a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d102      	bne.n	80029f2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ffb4 	bl	800295a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d126      	bne.n	8002a4a <I2S_IRQHandler+0x92>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d11f      	bne.n	8002a4a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a18:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f043 0202 	orr.w	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff50 	bl	80028ea <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d136      	bne.n	8002ac4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d109      	bne.n	8002a74 <I2S_IRQHandler+0xbc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d102      	bne.n	8002a74 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff45 	bl	80028fe <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d122      	bne.n	8002ac4 <I2S_IRQHandler+0x10c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d11b      	bne.n	8002ac4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a9a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ff13 	bl	80028ea <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7ff f9b0 	bl	8001e40 <HAL_GetTick>
 8002ae0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ae2:	e018      	b.n	8002b16 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aea:	d014      	beq.n	8002b16 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002aec:	f7ff f9a8 	bl	8001e40 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e00f      	b.n	8002b36 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1d7      	bne.n	8002ae4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a92      	ldr	r2, [pc, #584]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b5a:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b5c:	e001      	b.n	8002b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a8b      	ldr	r2, [pc, #556]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b78:	4b8a      	ldr	r3, [pc, #552]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b7a:	e001      	b.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d004      	beq.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 8099 	bne.w	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f925 	bl	8002dfc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9c8 	bl	8002f5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d13a      	bne.n	8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d035      	beq.n	8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4969      	ldr	r1, [pc, #420]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bfe:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c00:	e001      	b.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f043 0202 	orr.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fe4f 	bl	80028ea <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	f040 80c3 	bne.w	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80bd 	beq.w	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a49      	ldr	r2, [pc, #292]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c80:	e001      	b.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4944      	ldr	r1, [pc, #272]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	d101      	bne.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c94:	e001      	b.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fe11 	bl	80028ea <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cc8:	e089      	b.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8be 	bl	8002e60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f8fd 	bl	8002ef8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d12f      	bne.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02a      	beq.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d2e:	e001      	b.n	8002d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4919      	ldr	r1, [pc, #100]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d42:	e001      	b.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fdc1 	bl	80028ea <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d136      	bne.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d031      	beq.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d88:	e001      	b.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4902      	ldr	r1, [pc, #8]	; (8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d96:	428b      	cmp	r3, r1
 8002d98:	d106      	bne.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002d9a:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d9c:	e006      	b.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002d9e:	bf00      	nop
 8002da0:	40003800 	.word	0x40003800
 8002da4:	40003400 	.word	0x40003400
 8002da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002db0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0204 	orr.w	r2, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fd87 	bl	80028ea <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ddc:	e000      	b.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dde:	bf00      	nop
}
 8002de0:	bf00      	nop
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c99      	adds	r1, r3, #2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ffc9 	bl	8002de8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c99      	adds	r1, r3, #2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6251      	str	r1, [r2, #36]	; 0x24
 8002e72:	8819      	ldrh	r1, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x90>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <I2SEx_TxISR_I2SExt+0x22>
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x94>)
 8002e80:	e001      	b.n	8002e86 <I2SEx_TxISR_I2SExt+0x26>
 8002e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e86:	460a      	mov	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d121      	bne.n	8002ee6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x90>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <I2SEx_TxISR_I2SExt+0x50>
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x94>)
 8002eae:	e001      	b.n	8002eb4 <I2SEx_TxISR_I2SExt+0x54>
 8002eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <I2SEx_TxISR_I2SExt+0x90>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d101      	bne.n	8002ec4 <I2SEx_TxISR_I2SExt+0x64>
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x94>)
 8002ec2:	e001      	b.n	8002ec8 <I2SEx_TxISR_I2SExt+0x68>
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ecc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff81 	bl	8002de8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40003800 	.word	0x40003800
 8002ef4:	40003400 	.word	0x40003400

08002ef8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68d8      	ldr	r0, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	1c99      	adds	r1, r3, #2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f10:	b282      	uxth	r2, r0
 8002f12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d113      	bne.n	8002f54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff4a 	bl	8002de8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <I2SEx_RxISR_I2SExt+0x90>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <I2SEx_RxISR_I2SExt+0x16>
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x94>)
 8002f70:	e001      	b.n	8002f76 <I2SEx_RxISR_I2SExt+0x1a>
 8002f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f76:	68d8      	ldr	r0, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	1c99      	adds	r1, r3, #2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f82:	b282      	uxth	r2, r0
 8002f84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d121      	bne.n	8002fe2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <I2SEx_RxISR_I2SExt+0x90>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <I2SEx_RxISR_I2SExt+0x50>
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x94>)
 8002faa:	e001      	b.n	8002fb0 <I2SEx_RxISR_I2SExt+0x54>
 8002fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	490d      	ldr	r1, [pc, #52]	; (8002fec <I2SEx_RxISR_I2SExt+0x90>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d101      	bne.n	8002fc0 <I2SEx_RxISR_I2SExt+0x64>
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x94>)
 8002fbe:	e001      	b.n	8002fc4 <I2SEx_RxISR_I2SExt+0x68>
 8002fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff03 	bl	8002de8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40003800 	.word	0x40003800
 8002ff0:	40003400 	.word	0x40003400

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e267      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b82      	ldr	r3, [pc, #520]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b7e      	ldr	r3, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6c      	ldr	r2, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b69      	ldr	r3, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fec8 	bl	8001e40 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fec4 	bl	8001e40 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e207      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe feb4 	bl	8001e40 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe feb0 	bl	8001e40 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f3      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b51      	ldr	r3, [pc, #324]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fe69 	bl	8001e40 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fe65 	bl	8001e40 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fe48 	bl	8001e40 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fe44 	bl	8001e40 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e187      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x248>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fe28 	bl	8001e40 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fe24 	bl	8001e40 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e167      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_OscConfig+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fe11 	bl	8001e40 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fe0d 	bl	8001e40 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e150      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b77      	ldr	r3, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b74      	ldr	r3, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fdcd 	bl	8001e40 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fe fdc9 	bl	8001e40 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x2ea>
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a63      	ldr	r2, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x30c>
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
 800330c:	4b55      	ldr	r3, [pc, #340]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fd8e 	bl	8001e40 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fd8a 	bl	8001e40 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0cb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x334>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fe fd78 	bl	8001e40 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fd74 	bl	8001e40 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a38      	ldr	r2, [pc, #224]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d05c      	beq.n	8003458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d141      	bne.n	800342a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fd48 	bl	8001e40 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fd44 	bl	8001e40 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fd1d 	bl	8001e40 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fd19 	bl	8001e40 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x416>
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fd06 	bl	8001e40 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe fd02 	bl	8001e40 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e038      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fc34 	bl	8001e40 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fe fc30 	bl	8001e40 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fb94 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08004ba8 	.word	0x08004ba8
 80036a8:	20000008 	.word	0x20000008
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b094      	sub	sp, #80	; 0x50
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
 80036bc:	2300      	movs	r3, #0
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	2300      	movs	r3, #0
 80036c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80e1 	bhi.w	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e0db      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b73      	ldr	r3, [pc, #460]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036e8:	e0db      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b73      	ldr	r3, [pc, #460]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ee:	e0d8      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b6d      	ldr	r3, [pc, #436]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003710:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	f04f 0000 	mov.w	r0, #0
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003734:	0150      	lsls	r0, r2, #5
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4621      	mov	r1, r4
 800373c:	1a51      	subs	r1, r2, r1
 800373e:	6139      	str	r1, [r7, #16]
 8003740:	4629      	mov	r1, r5
 8003742:	eb63 0301 	sbc.w	r3, r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	018b      	lsls	r3, r1, #6
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800375e:	4651      	mov	r1, sl
 8003760:	018a      	lsls	r2, r1, #6
 8003762:	4651      	mov	r1, sl
 8003764:	ebb2 0801 	subs.w	r8, r2, r1
 8003768:	4659      	mov	r1, fp
 800376a:	eb63 0901 	sbc.w	r9, r3, r1
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003782:	4690      	mov	r8, r2
 8003784:	4699      	mov	r9, r3
 8003786:	4623      	mov	r3, r4
 8003788:	eb18 0303 	adds.w	r3, r8, r3
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	462b      	mov	r3, r5
 8003790:	eb49 0303 	adc.w	r3, r9, r3
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037a2:	4629      	mov	r1, r5
 80037a4:	024b      	lsls	r3, r1, #9
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037ac:	4621      	mov	r1, r4
 80037ae:	024a      	lsls	r2, r1, #9
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037c0:	f7fc fd56 	bl	8000270 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	e058      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	4611      	mov	r1, r2
 80037da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0159      	lsls	r1, r3, #5
 80037f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fa:	0150      	lsls	r0, r2, #5
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4641      	mov	r1, r8
 8003802:	ebb2 0a01 	subs.w	sl, r2, r1
 8003806:	4649      	mov	r1, r9
 8003808:	eb63 0b01 	sbc.w	fp, r3, r1
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800381c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003820:	ebb2 040a 	subs.w	r4, r2, sl
 8003824:	eb63 050b 	sbc.w	r5, r3, fp
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	00eb      	lsls	r3, r5, #3
 8003832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003836:	00e2      	lsls	r2, r4, #3
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	4643      	mov	r3, r8
 800383e:	18e3      	adds	r3, r4, r3
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	464b      	mov	r3, r9
 8003844:	eb45 0303 	adc.w	r3, r5, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003856:	4629      	mov	r1, r5
 8003858:	028b      	lsls	r3, r1, #10
 800385a:	4621      	mov	r1, r4
 800385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003860:	4621      	mov	r1, r4
 8003862:	028a      	lsls	r2, r1, #10
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	f7fc fcfc 	bl	8000270 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3750      	adds	r7, #80	; 0x50
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d035      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038e4:	4b62      	ldr	r3, [pc, #392]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ea:	f7fe faa9 	bl	8001e40 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038f2:	f7fe faa5 	bl	8001e40 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0b0      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003904:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	019a      	lsls	r2, r3, #6
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	071b      	lsls	r3, r3, #28
 800391c:	4955      	ldr	r1, [pc, #340]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003924:	4b52      	ldr	r3, [pc, #328]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800392a:	f7fe fa89 	bl	8001e40 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003932:	f7fe fa85 	bl	8001e40 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e090      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a43      	ldr	r2, [pc, #268]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003986:	f7fe fa5b 	bl	8001e40 <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fe fa57 	bl	8001e40 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e062      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ac:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d028      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d4:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d114      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fa25 	bl	8001e40 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fe fa21 	bl	8001e40 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e02a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ee      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a28:	d10d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
 8003a44:	e005      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	42470068 	.word	0x42470068
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470e40 	.word	0x42470e40

08003a80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d13e      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d12f      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ab6:	617b      	str	r3, [r7, #20]
          break;
 8003ab8:	e02f      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac6:	d108      	bne.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e007      	b.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b04:	0f1b      	lsrs	r3, r3, #28
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
          break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
          break;
 8003b18:	bf00      	nop
        }
      }
      break;
 8003b1a:	bf00      	nop
    }
  }
  return frequency;
 8003b1c:	697b      	ldr	r3, [r7, #20]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00bb8000 	.word	0x00bb8000
 8003b34:	007a1200 	.word	0x007a1200
 8003b38:	00f42400 	.word	0x00f42400

08003b3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e066      	b.n	8003c20 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7f5b      	ldrb	r3, [r3, #29]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fefc 	bl	8001960 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	22ca      	movs	r2, #202	; 0xca
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2253      	movs	r2, #83	; 0x53
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa45 	bl	800400e <RTC_EnterInitMode>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d12c      	bne.n	8003be8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68d2      	ldr	r2, [r2, #12]
 8003bc8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6919      	ldr	r1, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa4c 	bl	800407c <RTC_ExitInitMode>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d113      	bne.n	8003c16 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	7f1b      	ldrb	r3, [r3, #28]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_RTC_SetTime+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e087      	b.n	8003d54 <HAL_RTC_SetTime+0x12c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d126      	bne.n	8003ca4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa29 	bl	80040c6 <RTC_ByteToBcd2>
 8003c74:	4603      	mov	r3, r0
 8003c76:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fa22 	bl	80040c6 <RTC_ByteToBcd2>
 8003c82:	4603      	mov	r3, r0
 8003c84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c86:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	789b      	ldrb	r3, [r3, #2]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa1a 	bl	80040c6 <RTC_ByteToBcd2>
 8003c92:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	78db      	ldrb	r3, [r3, #3]
 8003c9c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e018      	b.n	8003cd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003cc4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003cca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	22ca      	movs	r2, #202	; 0xca
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2253      	movs	r2, #83	; 0x53
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f991 	bl	800400e <RTC_EnterInitMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d120      	bne.n	8003d38 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d04:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f9a4 	bl	800407c <RTC_ExitInitMode>
 8003d34:	4603      	mov	r3, r0
 8003d36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	22ff      	movs	r2, #255	; 0xff
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	771a      	strb	r2, [r3, #28]

  return status;
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd90      	pop	{r4, r7, pc}

08003d5c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	0d9b      	lsrs	r3, r3, #22
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11a      	bne.n	8003e0e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f98f 	bl	8004100 <RTC_Bcd2ToByte>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f986 	bl	8004100 <RTC_Bcd2ToByte>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	789b      	ldrb	r3, [r3, #2]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f97d 	bl	8004100 <RTC_Bcd2ToByte>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	7f1b      	ldrb	r3, [r3, #28]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_RTC_SetDate+0x1c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e071      	b.n	8003f18 <HAL_RTC_SetDate+0x100>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <HAL_RTC_SetDate+0x4c>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	330a      	adds	r3, #10
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f929 	bl	80040c6 <RTC_ByteToBcd2>
 8003e74:	4603      	mov	r3, r0
 8003e76:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f922 	bl	80040c6 <RTC_ByteToBcd2>
 8003e82:	4603      	mov	r3, r0
 8003e84:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e86:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	789b      	ldrb	r3, [r3, #2]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f91a 	bl	80040c6 <RTC_ByteToBcd2>
 8003e92:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e94:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e00e      	b.n	8003ec2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003eb0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003eb6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	22ca      	movs	r2, #202	; 0xca
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2253      	movs	r2, #83	; 0x53
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f89b 	bl	800400e <RTC_EnterInitMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ef0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8c2 	bl	800407c <RTC_ExitInitMode>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	771a      	strb	r2, [r3, #28]

  return status;
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}

08003f20 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	0c1b      	lsrs	r3, r3, #16
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	0b5b      	lsrs	r3, r3, #13
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d11a      	bne.n	8003fb4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	78db      	ldrb	r3, [r3, #3]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f8bc 	bl	8004100 <RTC_Bcd2ToByte>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8b3 	bl	8004100 <RTC_Bcd2ToByte>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	789b      	ldrb	r3, [r3, #2]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8aa 	bl	8004100 <RTC_Bcd2ToByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fda:	f7fd ff31 	bl	8001e40 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fe0:	e009      	b.n	8003ff6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fe2:	f7fd ff2d 	bl	8001e40 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e007      	b.n	8004006 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d122      	bne.n	8004072 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800403a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fd ff00 	bl	8001e40 <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004042:	e00c      	b.n	800405e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004044:	f7fd fefc 	bl	8001e40 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004052:	d904      	bls.n	800405e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <RTC_EnterInitMode+0x64>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d1e8      	bne.n	8004044 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004096:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff89 	bl	8003fbe <HAL_RTC_WaitForSynchro>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80040d4:	e005      	b.n	80040e2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	3301      	adds	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	3b0a      	subs	r3, #10
 80040e0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d8f6      	bhi.n	80040d6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	b2db      	uxtb	r3, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	4413      	add	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	b2da      	uxtb	r2, r3
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	4413      	add	r3, r2
 800412a:	b2db      	uxtb	r3, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <__errno>:
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <__errno+0x8>)
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000014 	.word	0x20000014

08004144 <__libc_init_array>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4d0d      	ldr	r5, [pc, #52]	; (800417c <__libc_init_array+0x38>)
 8004148:	4c0d      	ldr	r4, [pc, #52]	; (8004180 <__libc_init_array+0x3c>)
 800414a:	1b64      	subs	r4, r4, r5
 800414c:	10a4      	asrs	r4, r4, #2
 800414e:	2600      	movs	r6, #0
 8004150:	42a6      	cmp	r6, r4
 8004152:	d109      	bne.n	8004168 <__libc_init_array+0x24>
 8004154:	4d0b      	ldr	r5, [pc, #44]	; (8004184 <__libc_init_array+0x40>)
 8004156:	4c0c      	ldr	r4, [pc, #48]	; (8004188 <__libc_init_array+0x44>)
 8004158:	f000 fc9e 	bl	8004a98 <_init>
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	2600      	movs	r6, #0
 8004162:	42a6      	cmp	r6, r4
 8004164:	d105      	bne.n	8004172 <__libc_init_array+0x2e>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	f855 3b04 	ldr.w	r3, [r5], #4
 800416c:	4798      	blx	r3
 800416e:	3601      	adds	r6, #1
 8004170:	e7ee      	b.n	8004150 <__libc_init_array+0xc>
 8004172:	f855 3b04 	ldr.w	r3, [r5], #4
 8004176:	4798      	blx	r3
 8004178:	3601      	adds	r6, #1
 800417a:	e7f2      	b.n	8004162 <__libc_init_array+0x1e>
 800417c:	08004bf4 	.word	0x08004bf4
 8004180:	08004bf4 	.word	0x08004bf4
 8004184:	08004bf4 	.word	0x08004bf4
 8004188:	08004bf8 	.word	0x08004bf8

0800418c <malloc>:
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <malloc+0xc>)
 800418e:	4601      	mov	r1, r0
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f000 b87f 	b.w	8004294 <_malloc_r>
 8004196:	bf00      	nop
 8004198:	20000014 	.word	0x20000014

0800419c <free>:
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <free+0xc>)
 800419e:	4601      	mov	r1, r0
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f000 b80b 	b.w	80041bc <_free_r>
 80041a6:	bf00      	nop
 80041a8:	20000014 	.word	0x20000014

080041ac <memset>:
 80041ac:	4402      	add	r2, r0
 80041ae:	4603      	mov	r3, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <_free_r>:
 80041bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041be:	2900      	cmp	r1, #0
 80041c0:	d044      	beq.n	800424c <_free_r+0x90>
 80041c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c6:	9001      	str	r0, [sp, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f1a1 0404 	sub.w	r4, r1, #4
 80041ce:	bfb8      	it	lt
 80041d0:	18e4      	addlt	r4, r4, r3
 80041d2:	f000 f903 	bl	80043dc <__malloc_lock>
 80041d6:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <_free_r+0x94>)
 80041d8:	9801      	ldr	r0, [sp, #4]
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	b933      	cbnz	r3, 80041ec <_free_r+0x30>
 80041de:	6063      	str	r3, [r4, #4]
 80041e0:	6014      	str	r4, [r2, #0]
 80041e2:	b003      	add	sp, #12
 80041e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041e8:	f000 b8fe 	b.w	80043e8 <__malloc_unlock>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d908      	bls.n	8004202 <_free_r+0x46>
 80041f0:	6825      	ldr	r5, [r4, #0]
 80041f2:	1961      	adds	r1, r4, r5
 80041f4:	428b      	cmp	r3, r1
 80041f6:	bf01      	itttt	eq
 80041f8:	6819      	ldreq	r1, [r3, #0]
 80041fa:	685b      	ldreq	r3, [r3, #4]
 80041fc:	1949      	addeq	r1, r1, r5
 80041fe:	6021      	streq	r1, [r4, #0]
 8004200:	e7ed      	b.n	80041de <_free_r+0x22>
 8004202:	461a      	mov	r2, r3
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b10b      	cbz	r3, 800420c <_free_r+0x50>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d9fa      	bls.n	8004202 <_free_r+0x46>
 800420c:	6811      	ldr	r1, [r2, #0]
 800420e:	1855      	adds	r5, r2, r1
 8004210:	42a5      	cmp	r5, r4
 8004212:	d10b      	bne.n	800422c <_free_r+0x70>
 8004214:	6824      	ldr	r4, [r4, #0]
 8004216:	4421      	add	r1, r4
 8004218:	1854      	adds	r4, r2, r1
 800421a:	42a3      	cmp	r3, r4
 800421c:	6011      	str	r1, [r2, #0]
 800421e:	d1e0      	bne.n	80041e2 <_free_r+0x26>
 8004220:	681c      	ldr	r4, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	6053      	str	r3, [r2, #4]
 8004226:	4421      	add	r1, r4
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	e7da      	b.n	80041e2 <_free_r+0x26>
 800422c:	d902      	bls.n	8004234 <_free_r+0x78>
 800422e:	230c      	movs	r3, #12
 8004230:	6003      	str	r3, [r0, #0]
 8004232:	e7d6      	b.n	80041e2 <_free_r+0x26>
 8004234:	6825      	ldr	r5, [r4, #0]
 8004236:	1961      	adds	r1, r4, r5
 8004238:	428b      	cmp	r3, r1
 800423a:	bf04      	itt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	bf04      	itt	eq
 8004244:	1949      	addeq	r1, r1, r5
 8004246:	6021      	streq	r1, [r4, #0]
 8004248:	6054      	str	r4, [r2, #4]
 800424a:	e7ca      	b.n	80041e2 <_free_r+0x26>
 800424c:	b003      	add	sp, #12
 800424e:	bd30      	pop	{r4, r5, pc}
 8004250:	20000114 	.word	0x20000114

08004254 <sbrk_aligned>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4e0e      	ldr	r6, [pc, #56]	; (8004290 <sbrk_aligned+0x3c>)
 8004258:	460c      	mov	r4, r1
 800425a:	6831      	ldr	r1, [r6, #0]
 800425c:	4605      	mov	r5, r0
 800425e:	b911      	cbnz	r1, 8004266 <sbrk_aligned+0x12>
 8004260:	f000 f88c 	bl	800437c <_sbrk_r>
 8004264:	6030      	str	r0, [r6, #0]
 8004266:	4621      	mov	r1, r4
 8004268:	4628      	mov	r0, r5
 800426a:	f000 f887 	bl	800437c <_sbrk_r>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d00a      	beq.n	8004288 <sbrk_aligned+0x34>
 8004272:	1cc4      	adds	r4, r0, #3
 8004274:	f024 0403 	bic.w	r4, r4, #3
 8004278:	42a0      	cmp	r0, r4
 800427a:	d007      	beq.n	800428c <sbrk_aligned+0x38>
 800427c:	1a21      	subs	r1, r4, r0
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f87c 	bl	800437c <_sbrk_r>
 8004284:	3001      	adds	r0, #1
 8004286:	d101      	bne.n	800428c <sbrk_aligned+0x38>
 8004288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800428c:	4620      	mov	r0, r4
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	20000118 	.word	0x20000118

08004294 <_malloc_r>:
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	1ccd      	adds	r5, r1, #3
 800429a:	f025 0503 	bic.w	r5, r5, #3
 800429e:	3508      	adds	r5, #8
 80042a0:	2d0c      	cmp	r5, #12
 80042a2:	bf38      	it	cc
 80042a4:	250c      	movcc	r5, #12
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	4607      	mov	r7, r0
 80042aa:	db01      	blt.n	80042b0 <_malloc_r+0x1c>
 80042ac:	42a9      	cmp	r1, r5
 80042ae:	d905      	bls.n	80042bc <_malloc_r+0x28>
 80042b0:	230c      	movs	r3, #12
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	2600      	movs	r6, #0
 80042b6:	4630      	mov	r0, r6
 80042b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042bc:	4e2e      	ldr	r6, [pc, #184]	; (8004378 <_malloc_r+0xe4>)
 80042be:	f000 f88d 	bl	80043dc <__malloc_lock>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	461c      	mov	r4, r3
 80042c6:	bb34      	cbnz	r4, 8004316 <_malloc_r+0x82>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7ff ffc2 	bl	8004254 <sbrk_aligned>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	4604      	mov	r4, r0
 80042d4:	d14d      	bne.n	8004372 <_malloc_r+0xde>
 80042d6:	6834      	ldr	r4, [r6, #0]
 80042d8:	4626      	mov	r6, r4
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d140      	bne.n	8004360 <_malloc_r+0xcc>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4631      	mov	r1, r6
 80042e2:	4638      	mov	r0, r7
 80042e4:	eb04 0803 	add.w	r8, r4, r3
 80042e8:	f000 f848 	bl	800437c <_sbrk_r>
 80042ec:	4580      	cmp	r8, r0
 80042ee:	d13a      	bne.n	8004366 <_malloc_r+0xd2>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	3503      	adds	r5, #3
 80042f4:	1a6d      	subs	r5, r5, r1
 80042f6:	f025 0503 	bic.w	r5, r5, #3
 80042fa:	3508      	adds	r5, #8
 80042fc:	2d0c      	cmp	r5, #12
 80042fe:	bf38      	it	cc
 8004300:	250c      	movcc	r5, #12
 8004302:	4629      	mov	r1, r5
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff ffa5 	bl	8004254 <sbrk_aligned>
 800430a:	3001      	adds	r0, #1
 800430c:	d02b      	beq.n	8004366 <_malloc_r+0xd2>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	442b      	add	r3, r5
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	e00e      	b.n	8004334 <_malloc_r+0xa0>
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	1b52      	subs	r2, r2, r5
 800431a:	d41e      	bmi.n	800435a <_malloc_r+0xc6>
 800431c:	2a0b      	cmp	r2, #11
 800431e:	d916      	bls.n	800434e <_malloc_r+0xba>
 8004320:	1961      	adds	r1, r4, r5
 8004322:	42a3      	cmp	r3, r4
 8004324:	6025      	str	r5, [r4, #0]
 8004326:	bf18      	it	ne
 8004328:	6059      	strne	r1, [r3, #4]
 800432a:	6863      	ldr	r3, [r4, #4]
 800432c:	bf08      	it	eq
 800432e:	6031      	streq	r1, [r6, #0]
 8004330:	5162      	str	r2, [r4, r5]
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	4638      	mov	r0, r7
 8004336:	f104 060b 	add.w	r6, r4, #11
 800433a:	f000 f855 	bl	80043e8 <__malloc_unlock>
 800433e:	f026 0607 	bic.w	r6, r6, #7
 8004342:	1d23      	adds	r3, r4, #4
 8004344:	1af2      	subs	r2, r6, r3
 8004346:	d0b6      	beq.n	80042b6 <_malloc_r+0x22>
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	50a3      	str	r3, [r4, r2]
 800434c:	e7b3      	b.n	80042b6 <_malloc_r+0x22>
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	bf0c      	ite	eq
 8004354:	6032      	streq	r2, [r6, #0]
 8004356:	605a      	strne	r2, [r3, #4]
 8004358:	e7ec      	b.n	8004334 <_malloc_r+0xa0>
 800435a:	4623      	mov	r3, r4
 800435c:	6864      	ldr	r4, [r4, #4]
 800435e:	e7b2      	b.n	80042c6 <_malloc_r+0x32>
 8004360:	4634      	mov	r4, r6
 8004362:	6876      	ldr	r6, [r6, #4]
 8004364:	e7b9      	b.n	80042da <_malloc_r+0x46>
 8004366:	230c      	movs	r3, #12
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4638      	mov	r0, r7
 800436c:	f000 f83c 	bl	80043e8 <__malloc_unlock>
 8004370:	e7a1      	b.n	80042b6 <_malloc_r+0x22>
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	e7de      	b.n	8004334 <_malloc_r+0xa0>
 8004376:	bf00      	nop
 8004378:	20000114 	.word	0x20000114

0800437c <_sbrk_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d06      	ldr	r5, [pc, #24]	; (8004398 <_sbrk_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fd fb46 	bl	8001a18 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_sbrk_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_sbrk_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	2000011c 	.word	0x2000011c

0800439c <siprintf>:
 800439c:	b40e      	push	{r1, r2, r3}
 800439e:	b500      	push	{lr}
 80043a0:	b09c      	sub	sp, #112	; 0x70
 80043a2:	ab1d      	add	r3, sp, #116	; 0x74
 80043a4:	9002      	str	r0, [sp, #8]
 80043a6:	9006      	str	r0, [sp, #24]
 80043a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ac:	4809      	ldr	r0, [pc, #36]	; (80043d4 <siprintf+0x38>)
 80043ae:	9107      	str	r1, [sp, #28]
 80043b0:	9104      	str	r1, [sp, #16]
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <siprintf+0x3c>)
 80043b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b8:	9105      	str	r1, [sp, #20]
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	a902      	add	r1, sp, #8
 80043c0:	f000 f874 	bl	80044ac <_svfiprintf_r>
 80043c4:	9b02      	ldr	r3, [sp, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	b01c      	add	sp, #112	; 0x70
 80043cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d0:	b003      	add	sp, #12
 80043d2:	4770      	bx	lr
 80043d4:	20000014 	.word	0x20000014
 80043d8:	ffff0208 	.word	0xffff0208

080043dc <__malloc_lock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__malloc_lock+0x8>)
 80043de:	f000 baf9 	b.w	80049d4 <__retarget_lock_acquire_recursive>
 80043e2:	bf00      	nop
 80043e4:	20000120 	.word	0x20000120

080043e8 <__malloc_unlock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	; (80043f0 <__malloc_unlock+0x8>)
 80043ea:	f000 baf4 	b.w	80049d6 <__retarget_lock_release_recursive>
 80043ee:	bf00      	nop
 80043f0:	20000120 	.word	0x20000120

080043f4 <__ssputs_r>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	688e      	ldr	r6, [r1, #8]
 80043fa:	429e      	cmp	r6, r3
 80043fc:	4682      	mov	sl, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	4690      	mov	r8, r2
 8004402:	461f      	mov	r7, r3
 8004404:	d838      	bhi.n	8004478 <__ssputs_r+0x84>
 8004406:	898a      	ldrh	r2, [r1, #12]
 8004408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800440c:	d032      	beq.n	8004474 <__ssputs_r+0x80>
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	6909      	ldr	r1, [r1, #16]
 8004412:	eba5 0901 	sub.w	r9, r5, r1
 8004416:	6965      	ldr	r5, [r4, #20]
 8004418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800441c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004420:	3301      	adds	r3, #1
 8004422:	444b      	add	r3, r9
 8004424:	106d      	asrs	r5, r5, #1
 8004426:	429d      	cmp	r5, r3
 8004428:	bf38      	it	cc
 800442a:	461d      	movcc	r5, r3
 800442c:	0553      	lsls	r3, r2, #21
 800442e:	d531      	bpl.n	8004494 <__ssputs_r+0xa0>
 8004430:	4629      	mov	r1, r5
 8004432:	f7ff ff2f 	bl	8004294 <_malloc_r>
 8004436:	4606      	mov	r6, r0
 8004438:	b950      	cbnz	r0, 8004450 <__ssputs_r+0x5c>
 800443a:	230c      	movs	r3, #12
 800443c:	f8ca 3000 	str.w	r3, [sl]
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	6921      	ldr	r1, [r4, #16]
 8004452:	464a      	mov	r2, r9
 8004454:	f000 fac0 	bl	80049d8 <memcpy>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	6126      	str	r6, [r4, #16]
 8004466:	6165      	str	r5, [r4, #20]
 8004468:	444e      	add	r6, r9
 800446a:	eba5 0509 	sub.w	r5, r5, r9
 800446e:	6026      	str	r6, [r4, #0]
 8004470:	60a5      	str	r5, [r4, #8]
 8004472:	463e      	mov	r6, r7
 8004474:	42be      	cmp	r6, r7
 8004476:	d900      	bls.n	800447a <__ssputs_r+0x86>
 8004478:	463e      	mov	r6, r7
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	4641      	mov	r1, r8
 8004480:	f000 fab8 	bl	80049f4 <memmove>
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	1b9b      	subs	r3, r3, r6
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	4433      	add	r3, r6
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	2000      	movs	r0, #0
 8004492:	e7db      	b.n	800444c <__ssputs_r+0x58>
 8004494:	462a      	mov	r2, r5
 8004496:	f000 fac7 	bl	8004a28 <_realloc_r>
 800449a:	4606      	mov	r6, r0
 800449c:	2800      	cmp	r0, #0
 800449e:	d1e1      	bne.n	8004464 <__ssputs_r+0x70>
 80044a0:	6921      	ldr	r1, [r4, #16]
 80044a2:	4650      	mov	r0, sl
 80044a4:	f7ff fe8a 	bl	80041bc <_free_r>
 80044a8:	e7c7      	b.n	800443a <__ssputs_r+0x46>
	...

080044ac <_svfiprintf_r>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4698      	mov	r8, r3
 80044b2:	898b      	ldrh	r3, [r1, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	b09d      	sub	sp, #116	; 0x74
 80044b8:	4607      	mov	r7, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	4614      	mov	r4, r2
 80044be:	d50e      	bpl.n	80044de <_svfiprintf_r+0x32>
 80044c0:	690b      	ldr	r3, [r1, #16]
 80044c2:	b963      	cbnz	r3, 80044de <_svfiprintf_r+0x32>
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	f7ff fee5 	bl	8004294 <_malloc_r>
 80044ca:	6028      	str	r0, [r5, #0]
 80044cc:	6128      	str	r0, [r5, #16]
 80044ce:	b920      	cbnz	r0, 80044da <_svfiprintf_r+0x2e>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044d8:	e0d1      	b.n	800467e <_svfiprintf_r+0x1d2>
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	616b      	str	r3, [r5, #20]
 80044de:	2300      	movs	r3, #0
 80044e0:	9309      	str	r3, [sp, #36]	; 0x24
 80044e2:	2320      	movs	r3, #32
 80044e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004698 <_svfiprintf_r+0x1ec>
 80044f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044f6:	f04f 0901 	mov.w	r9, #1
 80044fa:	4623      	mov	r3, r4
 80044fc:	469a      	mov	sl, r3
 80044fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004502:	b10a      	cbz	r2, 8004508 <_svfiprintf_r+0x5c>
 8004504:	2a25      	cmp	r2, #37	; 0x25
 8004506:	d1f9      	bne.n	80044fc <_svfiprintf_r+0x50>
 8004508:	ebba 0b04 	subs.w	fp, sl, r4
 800450c:	d00b      	beq.n	8004526 <_svfiprintf_r+0x7a>
 800450e:	465b      	mov	r3, fp
 8004510:	4622      	mov	r2, r4
 8004512:	4629      	mov	r1, r5
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff ff6d 	bl	80043f4 <__ssputs_r>
 800451a:	3001      	adds	r0, #1
 800451c:	f000 80aa 	beq.w	8004674 <_svfiprintf_r+0x1c8>
 8004520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004522:	445a      	add	r2, fp
 8004524:	9209      	str	r2, [sp, #36]	; 0x24
 8004526:	f89a 3000 	ldrb.w	r3, [sl]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a2 	beq.w	8004674 <_svfiprintf_r+0x1c8>
 8004530:	2300      	movs	r3, #0
 8004532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453a:	f10a 0a01 	add.w	sl, sl, #1
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	9307      	str	r3, [sp, #28]
 8004542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004546:	931a      	str	r3, [sp, #104]	; 0x68
 8004548:	4654      	mov	r4, sl
 800454a:	2205      	movs	r2, #5
 800454c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004550:	4851      	ldr	r0, [pc, #324]	; (8004698 <_svfiprintf_r+0x1ec>)
 8004552:	f7fb fe3d 	bl	80001d0 <memchr>
 8004556:	9a04      	ldr	r2, [sp, #16]
 8004558:	b9d8      	cbnz	r0, 8004592 <_svfiprintf_r+0xe6>
 800455a:	06d0      	lsls	r0, r2, #27
 800455c:	bf44      	itt	mi
 800455e:	2320      	movmi	r3, #32
 8004560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004564:	0711      	lsls	r1, r2, #28
 8004566:	bf44      	itt	mi
 8004568:	232b      	movmi	r3, #43	; 0x2b
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800456e:	f89a 3000 	ldrb.w	r3, [sl]
 8004572:	2b2a      	cmp	r3, #42	; 0x2a
 8004574:	d015      	beq.n	80045a2 <_svfiprintf_r+0xf6>
 8004576:	9a07      	ldr	r2, [sp, #28]
 8004578:	4654      	mov	r4, sl
 800457a:	2000      	movs	r0, #0
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4621      	mov	r1, r4
 8004582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004586:	3b30      	subs	r3, #48	; 0x30
 8004588:	2b09      	cmp	r3, #9
 800458a:	d94e      	bls.n	800462a <_svfiprintf_r+0x17e>
 800458c:	b1b0      	cbz	r0, 80045bc <_svfiprintf_r+0x110>
 800458e:	9207      	str	r2, [sp, #28]
 8004590:	e014      	b.n	80045bc <_svfiprintf_r+0x110>
 8004592:	eba0 0308 	sub.w	r3, r0, r8
 8004596:	fa09 f303 	lsl.w	r3, r9, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	9304      	str	r3, [sp, #16]
 800459e:	46a2      	mov	sl, r4
 80045a0:	e7d2      	b.n	8004548 <_svfiprintf_r+0x9c>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	1d19      	adds	r1, r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	9103      	str	r1, [sp, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbb      	ittet	lt
 80045ae:	425b      	neglt	r3, r3
 80045b0:	f042 0202 	orrlt.w	r2, r2, #2
 80045b4:	9307      	strge	r3, [sp, #28]
 80045b6:	9307      	strlt	r3, [sp, #28]
 80045b8:	bfb8      	it	lt
 80045ba:	9204      	strlt	r2, [sp, #16]
 80045bc:	7823      	ldrb	r3, [r4, #0]
 80045be:	2b2e      	cmp	r3, #46	; 0x2e
 80045c0:	d10c      	bne.n	80045dc <_svfiprintf_r+0x130>
 80045c2:	7863      	ldrb	r3, [r4, #1]
 80045c4:	2b2a      	cmp	r3, #42	; 0x2a
 80045c6:	d135      	bne.n	8004634 <_svfiprintf_r+0x188>
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	9203      	str	r2, [sp, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfb8      	it	lt
 80045d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80045d8:	3402      	adds	r4, #2
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046a8 <_svfiprintf_r+0x1fc>
 80045e0:	7821      	ldrb	r1, [r4, #0]
 80045e2:	2203      	movs	r2, #3
 80045e4:	4650      	mov	r0, sl
 80045e6:	f7fb fdf3 	bl	80001d0 <memchr>
 80045ea:	b140      	cbz	r0, 80045fe <_svfiprintf_r+0x152>
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	eba0 000a 	sub.w	r0, r0, sl
 80045f2:	fa03 f000 	lsl.w	r0, r3, r0
 80045f6:	9b04      	ldr	r3, [sp, #16]
 80045f8:	4303      	orrs	r3, r0
 80045fa:	3401      	adds	r4, #1
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004602:	4826      	ldr	r0, [pc, #152]	; (800469c <_svfiprintf_r+0x1f0>)
 8004604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004608:	2206      	movs	r2, #6
 800460a:	f7fb fde1 	bl	80001d0 <memchr>
 800460e:	2800      	cmp	r0, #0
 8004610:	d038      	beq.n	8004684 <_svfiprintf_r+0x1d8>
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <_svfiprintf_r+0x1f4>)
 8004614:	bb1b      	cbnz	r3, 800465e <_svfiprintf_r+0x1b2>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	3307      	adds	r3, #7
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	3308      	adds	r3, #8
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004624:	4433      	add	r3, r6
 8004626:	9309      	str	r3, [sp, #36]	; 0x24
 8004628:	e767      	b.n	80044fa <_svfiprintf_r+0x4e>
 800462a:	fb0c 3202 	mla	r2, ip, r2, r3
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	e7a5      	b.n	8004580 <_svfiprintf_r+0xd4>
 8004634:	2300      	movs	r3, #0
 8004636:	3401      	adds	r4, #1
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0c0a 	mov.w	ip, #10
 8004640:	4620      	mov	r0, r4
 8004642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004646:	3a30      	subs	r2, #48	; 0x30
 8004648:	2a09      	cmp	r2, #9
 800464a:	d903      	bls.n	8004654 <_svfiprintf_r+0x1a8>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0c5      	beq.n	80045dc <_svfiprintf_r+0x130>
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	e7c3      	b.n	80045dc <_svfiprintf_r+0x130>
 8004654:	fb0c 2101 	mla	r1, ip, r1, r2
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	e7f0      	b.n	8004640 <_svfiprintf_r+0x194>
 800465e:	ab03      	add	r3, sp, #12
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462a      	mov	r2, r5
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <_svfiprintf_r+0x1f8>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	4638      	mov	r0, r7
 800466a:	f3af 8000 	nop.w
 800466e:	1c42      	adds	r2, r0, #1
 8004670:	4606      	mov	r6, r0
 8004672:	d1d6      	bne.n	8004622 <_svfiprintf_r+0x176>
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	065b      	lsls	r3, r3, #25
 8004678:	f53f af2c 	bmi.w	80044d4 <_svfiprintf_r+0x28>
 800467c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800467e:	b01d      	add	sp, #116	; 0x74
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	ab03      	add	r3, sp, #12
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	462a      	mov	r2, r5
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <_svfiprintf_r+0x1f8>)
 800468c:	a904      	add	r1, sp, #16
 800468e:	4638      	mov	r0, r7
 8004690:	f000 f87a 	bl	8004788 <_printf_i>
 8004694:	e7eb      	b.n	800466e <_svfiprintf_r+0x1c2>
 8004696:	bf00      	nop
 8004698:	08004bb8 	.word	0x08004bb8
 800469c:	08004bc2 	.word	0x08004bc2
 80046a0:	00000000 	.word	0x00000000
 80046a4:	080043f5 	.word	0x080043f5
 80046a8:	08004bbe 	.word	0x08004bbe

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4699      	mov	r9, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfb8      	it	lt
 80046c0:	4613      	movlt	r3, r2
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c8:	4607      	mov	r7, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc26      	bgt.n	8004742 <_printf_common+0x96>
 80046f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f8:	1e13      	subs	r3, r2, #0
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d42b      	bmi.n	800475c <_printf_common+0xb0>
 8004704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004708:	4649      	mov	r1, r9
 800470a:	4638      	mov	r0, r7
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d01e      	beq.n	8004750 <_printf_common+0xa4>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	68e5      	ldr	r5, [r4, #12]
 8004716:	6832      	ldr	r2, [r6, #0]
 8004718:	f003 0306 	and.w	r3, r3, #6
 800471c:	2b04      	cmp	r3, #4
 800471e:	bf08      	it	eq
 8004720:	1aad      	subeq	r5, r5, r2
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	bf0c      	ite	eq
 8004728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800472c:	2500      	movne	r5, #0
 800472e:	4293      	cmp	r3, r2
 8004730:	bfc4      	itt	gt
 8004732:	1a9b      	subgt	r3, r3, r2
 8004734:	18ed      	addgt	r5, r5, r3
 8004736:	2600      	movs	r6, #0
 8004738:	341a      	adds	r4, #26
 800473a:	42b5      	cmp	r5, r6
 800473c:	d11a      	bne.n	8004774 <_printf_common+0xc8>
 800473e:	2000      	movs	r0, #0
 8004740:	e008      	b.n	8004754 <_printf_common+0xa8>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4649      	mov	r1, r9
 8004748:	4638      	mov	r0, r7
 800474a:	47c0      	blx	r8
 800474c:	3001      	adds	r0, #1
 800474e:	d103      	bne.n	8004758 <_printf_common+0xac>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	3501      	adds	r5, #1
 800475a:	e7c6      	b.n	80046ea <_printf_common+0x3e>
 800475c:	18e1      	adds	r1, r4, r3
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	2030      	movs	r0, #48	; 0x30
 8004762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004766:	4422      	add	r2, r4
 8004768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800476c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004770:	3302      	adds	r3, #2
 8004772:	e7c7      	b.n	8004704 <_printf_common+0x58>
 8004774:	2301      	movs	r3, #1
 8004776:	4622      	mov	r2, r4
 8004778:	4649      	mov	r1, r9
 800477a:	4638      	mov	r0, r7
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d0e6      	beq.n	8004750 <_printf_common+0xa4>
 8004782:	3601      	adds	r6, #1
 8004784:	e7d9      	b.n	800473a <_printf_common+0x8e>
	...

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	7e0f      	ldrb	r7, [r1, #24]
 800478e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004790:	2f78      	cmp	r7, #120	; 0x78
 8004792:	4691      	mov	r9, r2
 8004794:	4680      	mov	r8, r0
 8004796:	460c      	mov	r4, r1
 8004798:	469a      	mov	sl, r3
 800479a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	; 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d8 	beq.w	800495a <_printf_i+0x1d2>
 80047aa:	2f58      	cmp	r7, #88	; 0x58
 80047ac:	f000 80a3 	beq.w	80048f6 <_printf_i+0x16e>
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a101      	add	r1, pc, #4	; (adr r1, 80047c8 <_printf_i+0x40>)
 80047c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004941 	.word	0x08004941
 80047f8:	08004865 	.word	0x08004865
 80047fc:	08004923 	.word	0x08004923
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	08004963 	.word	0x08004963
 800480c:	080047b1 	.word	0x080047b1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	0800492b 	.word	0x0800492b
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e0a3      	b.n	800497c <_printf_i+0x1f4>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	6829      	ldr	r1, [r5, #0]
 8004838:	0606      	lsls	r6, r0, #24
 800483a:	f101 0304 	add.w	r3, r1, #4
 800483e:	d50a      	bpl.n	8004856 <_printf_i+0xce>
 8004840:	680e      	ldr	r6, [r1, #0]
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	2e00      	cmp	r6, #0
 8004846:	da03      	bge.n	8004850 <_printf_i+0xc8>
 8004848:	232d      	movs	r3, #45	; 0x2d
 800484a:	4276      	negs	r6, r6
 800484c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004850:	485e      	ldr	r0, [pc, #376]	; (80049cc <_printf_i+0x244>)
 8004852:	230a      	movs	r3, #10
 8004854:	e019      	b.n	800488a <_printf_i+0x102>
 8004856:	680e      	ldr	r6, [r1, #0]
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800485e:	bf18      	it	ne
 8004860:	b236      	sxthne	r6, r6
 8004862:	e7ef      	b.n	8004844 <_printf_i+0xbc>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	1d19      	adds	r1, r3, #4
 800486a:	6029      	str	r1, [r5, #0]
 800486c:	0601      	lsls	r1, r0, #24
 800486e:	d501      	bpl.n	8004874 <_printf_i+0xec>
 8004870:	681e      	ldr	r6, [r3, #0]
 8004872:	e002      	b.n	800487a <_printf_i+0xf2>
 8004874:	0646      	lsls	r6, r0, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0xe8>
 8004878:	881e      	ldrh	r6, [r3, #0]
 800487a:	4854      	ldr	r0, [pc, #336]	; (80049cc <_printf_i+0x244>)
 800487c:	2f6f      	cmp	r7, #111	; 0x6f
 800487e:	bf0c      	ite	eq
 8004880:	2308      	moveq	r3, #8
 8004882:	230a      	movne	r3, #10
 8004884:	2100      	movs	r1, #0
 8004886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800488a:	6865      	ldr	r5, [r4, #4]
 800488c:	60a5      	str	r5, [r4, #8]
 800488e:	2d00      	cmp	r5, #0
 8004890:	bfa2      	ittt	ge
 8004892:	6821      	ldrge	r1, [r4, #0]
 8004894:	f021 0104 	bicge.w	r1, r1, #4
 8004898:	6021      	strge	r1, [r4, #0]
 800489a:	b90e      	cbnz	r6, 80048a0 <_printf_i+0x118>
 800489c:	2d00      	cmp	r5, #0
 800489e:	d04d      	beq.n	800493c <_printf_i+0x1b4>
 80048a0:	4615      	mov	r5, r2
 80048a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048a6:	fb03 6711 	mls	r7, r3, r1, r6
 80048aa:	5dc7      	ldrb	r7, [r0, r7]
 80048ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048b0:	4637      	mov	r7, r6
 80048b2:	42bb      	cmp	r3, r7
 80048b4:	460e      	mov	r6, r1
 80048b6:	d9f4      	bls.n	80048a2 <_printf_i+0x11a>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d10b      	bne.n	80048d4 <_printf_i+0x14c>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	07de      	lsls	r6, r3, #31
 80048c0:	d508      	bpl.n	80048d4 <_printf_i+0x14c>
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	4299      	cmp	r1, r3
 80048c8:	bfde      	ittt	le
 80048ca:	2330      	movle	r3, #48	; 0x30
 80048cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80048d4:	1b52      	subs	r2, r2, r5
 80048d6:	6122      	str	r2, [r4, #16]
 80048d8:	f8cd a000 	str.w	sl, [sp]
 80048dc:	464b      	mov	r3, r9
 80048de:	aa03      	add	r2, sp, #12
 80048e0:	4621      	mov	r1, r4
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7ff fee2 	bl	80046ac <_printf_common>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d14c      	bne.n	8004986 <_printf_i+0x1fe>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	b004      	add	sp, #16
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	4835      	ldr	r0, [pc, #212]	; (80049cc <_printf_i+0x244>)
 80048f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048fc:	6829      	ldr	r1, [r5, #0]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f851 6b04 	ldr.w	r6, [r1], #4
 8004904:	6029      	str	r1, [r5, #0]
 8004906:	061d      	lsls	r5, r3, #24
 8004908:	d514      	bpl.n	8004934 <_printf_i+0x1ac>
 800490a:	07df      	lsls	r7, r3, #31
 800490c:	bf44      	itt	mi
 800490e:	f043 0320 	orrmi.w	r3, r3, #32
 8004912:	6023      	strmi	r3, [r4, #0]
 8004914:	b91e      	cbnz	r6, 800491e <_printf_i+0x196>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f023 0320 	bic.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	2310      	movs	r3, #16
 8004920:	e7b0      	b.n	8004884 <_printf_i+0xfc>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	2378      	movs	r3, #120	; 0x78
 800492c:	4828      	ldr	r0, [pc, #160]	; (80049d0 <_printf_i+0x248>)
 800492e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004932:	e7e3      	b.n	80048fc <_printf_i+0x174>
 8004934:	0659      	lsls	r1, r3, #25
 8004936:	bf48      	it	mi
 8004938:	b2b6      	uxthmi	r6, r6
 800493a:	e7e6      	b.n	800490a <_printf_i+0x182>
 800493c:	4615      	mov	r5, r2
 800493e:	e7bb      	b.n	80048b8 <_printf_i+0x130>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	6826      	ldr	r6, [r4, #0]
 8004944:	6961      	ldr	r1, [r4, #20]
 8004946:	1d18      	adds	r0, r3, #4
 8004948:	6028      	str	r0, [r5, #0]
 800494a:	0635      	lsls	r5, r6, #24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	d501      	bpl.n	8004954 <_printf_i+0x1cc>
 8004950:	6019      	str	r1, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0x1d2>
 8004954:	0670      	lsls	r0, r6, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0x1c8>
 8004958:	8019      	strh	r1, [r3, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	4615      	mov	r5, r2
 8004960:	e7ba      	b.n	80048d8 <_printf_i+0x150>
 8004962:	682b      	ldr	r3, [r5, #0]
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	602a      	str	r2, [r5, #0]
 8004968:	681d      	ldr	r5, [r3, #0]
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	2100      	movs	r1, #0
 800496e:	4628      	mov	r0, r5
 8004970:	f7fb fc2e 	bl	80001d0 <memchr>
 8004974:	b108      	cbz	r0, 800497a <_printf_i+0x1f2>
 8004976:	1b40      	subs	r0, r0, r5
 8004978:	6060      	str	r0, [r4, #4]
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	2300      	movs	r3, #0
 8004980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004984:	e7a8      	b.n	80048d8 <_printf_i+0x150>
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	462a      	mov	r2, r5
 800498a:	4649      	mov	r1, r9
 800498c:	4640      	mov	r0, r8
 800498e:	47d0      	blx	sl
 8004990:	3001      	adds	r0, #1
 8004992:	d0ab      	beq.n	80048ec <_printf_i+0x164>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	d413      	bmi.n	80049c2 <_printf_i+0x23a>
 800499a:	68e0      	ldr	r0, [r4, #12]
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	4298      	cmp	r0, r3
 80049a0:	bfb8      	it	lt
 80049a2:	4618      	movlt	r0, r3
 80049a4:	e7a4      	b.n	80048f0 <_printf_i+0x168>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4632      	mov	r2, r6
 80049aa:	4649      	mov	r1, r9
 80049ac:	4640      	mov	r0, r8
 80049ae:	47d0      	blx	sl
 80049b0:	3001      	adds	r0, #1
 80049b2:	d09b      	beq.n	80048ec <_printf_i+0x164>
 80049b4:	3501      	adds	r5, #1
 80049b6:	68e3      	ldr	r3, [r4, #12]
 80049b8:	9903      	ldr	r1, [sp, #12]
 80049ba:	1a5b      	subs	r3, r3, r1
 80049bc:	42ab      	cmp	r3, r5
 80049be:	dcf2      	bgt.n	80049a6 <_printf_i+0x21e>
 80049c0:	e7eb      	b.n	800499a <_printf_i+0x212>
 80049c2:	2500      	movs	r5, #0
 80049c4:	f104 0619 	add.w	r6, r4, #25
 80049c8:	e7f5      	b.n	80049b6 <_printf_i+0x22e>
 80049ca:	bf00      	nop
 80049cc:	08004bc9 	.word	0x08004bc9
 80049d0:	08004bda 	.word	0x08004bda

080049d4 <__retarget_lock_acquire_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <__retarget_lock_release_recursive>:
 80049d6:	4770      	bx	lr

080049d8 <memcpy>:
 80049d8:	440a      	add	r2, r1
 80049da:	4291      	cmp	r1, r2
 80049dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049e0:	d100      	bne.n	80049e4 <memcpy+0xc>
 80049e2:	4770      	bx	lr
 80049e4:	b510      	push	{r4, lr}
 80049e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ee:	4291      	cmp	r1, r2
 80049f0:	d1f9      	bne.n	80049e6 <memcpy+0xe>
 80049f2:	bd10      	pop	{r4, pc}

080049f4 <memmove>:
 80049f4:	4288      	cmp	r0, r1
 80049f6:	b510      	push	{r4, lr}
 80049f8:	eb01 0402 	add.w	r4, r1, r2
 80049fc:	d902      	bls.n	8004a04 <memmove+0x10>
 80049fe:	4284      	cmp	r4, r0
 8004a00:	4623      	mov	r3, r4
 8004a02:	d807      	bhi.n	8004a14 <memmove+0x20>
 8004a04:	1e43      	subs	r3, r0, #1
 8004a06:	42a1      	cmp	r1, r4
 8004a08:	d008      	beq.n	8004a1c <memmove+0x28>
 8004a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a12:	e7f8      	b.n	8004a06 <memmove+0x12>
 8004a14:	4402      	add	r2, r0
 8004a16:	4601      	mov	r1, r0
 8004a18:	428a      	cmp	r2, r1
 8004a1a:	d100      	bne.n	8004a1e <memmove+0x2a>
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a26:	e7f7      	b.n	8004a18 <memmove+0x24>

08004a28 <_realloc_r>:
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4614      	mov	r4, r2
 8004a30:	460e      	mov	r6, r1
 8004a32:	b921      	cbnz	r1, 8004a3e <_realloc_r+0x16>
 8004a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f7ff bc2b 	b.w	8004294 <_malloc_r>
 8004a3e:	b92a      	cbnz	r2, 8004a4c <_realloc_r+0x24>
 8004a40:	f7ff fbbc 	bl	80041bc <_free_r>
 8004a44:	4625      	mov	r5, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4c:	f000 f81b 	bl	8004a86 <_malloc_usable_size_r>
 8004a50:	4284      	cmp	r4, r0
 8004a52:	4607      	mov	r7, r0
 8004a54:	d802      	bhi.n	8004a5c <_realloc_r+0x34>
 8004a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a5a:	d812      	bhi.n	8004a82 <_realloc_r+0x5a>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f7ff fc18 	bl	8004294 <_malloc_r>
 8004a64:	4605      	mov	r5, r0
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0ed      	beq.n	8004a46 <_realloc_r+0x1e>
 8004a6a:	42bc      	cmp	r4, r7
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	4631      	mov	r1, r6
 8004a70:	bf28      	it	cs
 8004a72:	463a      	movcs	r2, r7
 8004a74:	f7ff ffb0 	bl	80049d8 <memcpy>
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f7ff fb9e 	bl	80041bc <_free_r>
 8004a80:	e7e1      	b.n	8004a46 <_realloc_r+0x1e>
 8004a82:	4635      	mov	r5, r6
 8004a84:	e7df      	b.n	8004a46 <_realloc_r+0x1e>

08004a86 <_malloc_usable_size_r>:
 8004a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8a:	1f18      	subs	r0, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bfbc      	itt	lt
 8004a90:	580b      	ldrlt	r3, [r1, r0]
 8004a92:	18c0      	addlt	r0, r0, r3
 8004a94:	4770      	bx	lr
	...

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
